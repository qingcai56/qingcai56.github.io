<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GoF_状态变化</title>
    <link href="/2021/02/20/GoF-%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96/"/>
    <url>/2021/02/20/GoF-%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿“状态变化”模式"><a href="#🌿“状态变化”模式" class="headerlink" title="🌿“状态变化”模式"></a>🌿“状态变化”模式</h2><p>在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效管理？同时又维持高层模块的稳定？ “状态变化”模式为这一问题提供一种解决方案。</p><p><strong>典型模式：</strong></p><ul><li>State</li><li>Memento</li></ul><h2 id="🌿State-状态"><a href="#🌿State-状态" class="headerlink" title="🌿State 状态"></a>🌿State 状态</h2><h3 id="🌹模式定义"><a href="#🌹模式定义" class="headerlink" title="🌹模式定义"></a>🌹模式定义</h3><p>允许一个对象在其内部状态改变时改变它地行为。从而使对象看起来似乎修改了其行为。</p><h3 id="🌹动机"><a href="#🌹动机" class="headerlink" title="🌹动机"></a>🌹动机</h3><ul><li>在软件构建过程中，某些对象的状态如果改变，其行为也会随之而发生变化，比如文档处于只读状态，其支持的行为和读写状态支持的行为就可能完全不同。</li><li>如何在运行时根据对象的状态来透明地更改对象地行为？而不会为对象操作和状态转化之间引入紧耦合。</li></ul><h3 id="🌹源代码"><a href="#🌹源代码" class="headerlink" title="🌹源代码"></a>🌹源代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">NetworkState</span></span><br><span class="hljs-class">&#123;</span><br>    Network_Open,<br>    Network_Close,<br>    Network_Connect,<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkProcessor</span>&#123;</span><br>    <br>    NetworkState state;<br><br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (state == Network_Open)&#123;<br><br>            <span class="hljs-comment">//**********</span><br>            state = Network_Close;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == Network_Close)&#123;<br><br>            <span class="hljs-comment">//..........</span><br>            state = Network_Connect;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == Network_Connect)&#123;<br><br>            <span class="hljs-comment">//$$$$$$$$$$</span><br>            state = Network_Open;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (state == Network_Open)&#123;<br>            <br>            <span class="hljs-comment">//**********</span><br>            state = Network_Connect;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == Network_Close)&#123;<br><br>            <span class="hljs-comment">//.....</span><br>            state = Network_Open;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == Network_Connect)&#123;<br><br>            <span class="hljs-comment">//$$$$$$$$$$</span><br>            state = Network_Close;<br>        &#125;<br>    <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//改进</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkState</span>&#123;</span><br><br><span class="hljs-keyword">public</span>:<br>    NetworkState* pNext;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">virtual</span> ~NetworkState()&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OpenState</span> :</span><span class="hljs-keyword">public</span> NetworkState&#123;<br>    <br>    <span class="hljs-keyword">static</span> NetworkState* m_instance;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> NetworkState* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (m_instance == <span class="hljs-literal">nullptr</span>) &#123;<br>            m_instance = <span class="hljs-keyword">new</span> OpenState();<br>        &#125;<br>        <span class="hljs-keyword">return</span> m_instance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span></span>&#123;<br>        <br>        <span class="hljs-comment">//**********</span><br>        pNext = CloseState::getInstance();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span></span>&#123;<br>        <br>        <span class="hljs-comment">//..........</span><br>        pNext = ConnectState::getInstance();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span></span>&#123;<br>        <br>        <span class="hljs-comment">//$$$$$$$$$$</span><br>        pNext = OpenState::getInstance();<br>    &#125;<br>    <br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloseState</span>:</span><span class="hljs-keyword">public</span> NetworkState&#123; &#125;<br><span class="hljs-comment">//...</span><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkProcessor</span>&#123;</span><br>    <br>    NetworkState* pState;<br>    <br><span class="hljs-keyword">public</span>:<br>    <br>    NetworkProcessor(NetworkState* pState)&#123;<br>        <br>        <span class="hljs-keyword">this</span>-&gt;pState = pState;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        pState-&gt;Operation1();<br>        pState = pState-&gt;pNext;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        pState-&gt;Operation2();<br>        pState = pState-&gt;pNext;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        pState-&gt;Operation3();<br>        pState = pState-&gt;pNext;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="🌹结构"><a href="#🌹结构" class="headerlink" title="🌹结构"></a>🌹结构</h3><p><img src=".\1.png" alt="与策略模式类图一样"></p><h3 id="🌹要点总结"><a href="#🌹要点总结" class="headerlink" title="🌹要点总结"></a>🌹要点总结</h3><ul><li>State模式将<strong>所有与一个特定状态相关地行为都放入一个State地子类对象中</strong>，在对象状态切换时，切换相应地对象；但同时维持State的接口，这样实现了具体操作与状态转化之间地解耦。</li><li>为不同的状态引入不同的对象使得状态转化变得更加明确，而且可以保证不会出现状态不一致的情况，因为转化是原子性的——即要么彻底转化过来，要么不转换。</li><li>如果State对象没有实例变量，那么各个上下文可以共享同一个State对象，从而节省对象开销。</li></ul><h2 id="🌿Memento-备忘录"><a href="#🌿Memento-备忘录" class="headerlink" title="🌿Memento 备忘录"></a>🌿Memento 备忘录</h2><h3 id="🌹模式定义-1"><a href="#🌹模式定义-1" class="headerlink" title="🌹模式定义"></a>🌹模式定义</h3><p>在不破化封装性的前提下，捕获一个对象的在其内部状态，并在该对象之外保存这个状态。这样以后就可以对该对象恢复到原先保存的状态。</p><h3 id="🌹动机-1"><a href="#🌹动机-1" class="headerlink" title="🌹动机"></a>🌹动机</h3><ul><li>在软件构建过程中，某些对象的状态在转换过程中，可能由于某种需求，要求程序能够回溯到对象之前处于某个点的状态。如果使用一些公有接口来让其他对象得到对象的状态，便会暴露对象的细节实现。</li><li>如何实现对象状态的良好保存和恢复？但同时又不会因此破坏对象本身的封装性。</li></ul><h3 id="🌹示例代码"><a href="#🌹示例代码" class="headerlink" title="🌹示例代码"></a>🌹示例代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memento</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-built_in">string</span> state;<br>    <span class="hljs-comment">//..</span><br><span class="hljs-keyword">public</span>:<br>    Memento(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp; s) : state(s) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">getState</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> state; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp; s)</span> </span>&#123; state = s; &#125;<br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Originator</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-built_in">string</span> state;<br>    <span class="hljs-comment">//....</span><br><span class="hljs-keyword">public</span>:<br>    Originator() &#123;&#125;<br>    <span class="hljs-function">Memento <span class="hljs-title">createMomento</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">Memento <span class="hljs-title">m</span><span class="hljs-params">(state)</span></span>;<br>        <span class="hljs-keyword">return</span> m;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setMomento</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Memento &amp; m)</span> </span>&#123;<br>        state = m.getState();<br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Originator orginator;<br>    <br>    <span class="hljs-comment">//捕获对象状态，存储到备忘录</span><br>    Memento mem = orginator.createMomento();<br>    <br>    <span class="hljs-comment">//... 改变orginator状态</span><br>    <br>    <span class="hljs-comment">//从备忘录中恢复</span><br>    orginator.setMomento(memento);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🌹结构-1"><a href="#🌹结构-1" class="headerlink" title="🌹结构"></a>🌹结构</h3><p><img src=".\2.png" alt=""></p><h3 id="🌹要点总结-1"><a href="#🌹要点总结-1" class="headerlink" title="🌹要点总结"></a>🌹要点总结</h3><ul><li>备忘录(Memento)存储原发器(Originator)对象的内部状态，在需要时恢复原发器状态。</li><li>Memento模式的核心是信息隐藏，即Originator需要向外界隐藏信息，保存其封装性。但同时又需要将状态保存到外界(Memento)。</li><li>由于现代语音运行时(如C#、Java)都具有相当的对象序列化支持，因此往往采用效率较高、又较容易正确实现的序列化方案来实现Memento模式。</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GOF_接口隔离</title>
    <link href="/2021/02/19/GOF-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB/"/>
    <url>/2021/02/19/GOF-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿“接口隔离”模式"><a href="#🌿“接口隔离”模式" class="headerlink" title="🌿“接口隔离”模式"></a>🌿“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题、甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><p><strong>典型模式：</strong></p><ul><li>Facade</li><li>Proxy</li><li>Adapter</li><li>Mediator</li></ul><h2 id="🌿Facade-门面"><a href="#🌿Facade-门面" class="headerlink" title="🌿Facade 门面"></a>🌿Facade 门面</h2><p><img src=".\1.png" alt=""></p><h3 id="🌹动机"><a href="#🌹动机" class="headerlink" title="🌹动机"></a>🌹动机</h3><ul><li>上述方案的问题在于组件的客户和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战。</li><li>如何简化外部客户程序和系统间的交互接口？如何将外部呵护程序的演化和内部子系统的变化中间件的依赖相互解耦？</li></ul><h3 id="🌹模式定义"><a href="#🌹模式定义" class="headerlink" title="🌹模式定义"></a>🌹模式定义</h3><p>为子系统中的一组接口提供一个一致（稳定）的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用（复用）。</p><h3 id="🌹结构"><a href="#🌹结构" class="headerlink" title="🌹结构"></a>🌹结构</h3><p><img src=".\2.png" alt=""></p><h3 id="🌹要点总结"><a href="#🌹要点总结" class="headerlink" title="🌹要点总结"></a>🌹要点总结</h3><ul><li>从客户程序的角度来看，Facade模式简化了整个组件系统的借口对于组件内部与外部客户程序来说，达到了一种“解耦”的效果——内部子系统的任何变化不会影响到facade接口的变化。</li><li>Facade设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。<strong>Facade很多时候更是一种架构模式</strong></li><li>Facade设计模式并非一个集装箱，可以任意地放进任何多个对象。Facade模式中组件的内部应该是“互相耦合关系比较大的一系列组件”，而不是一个简单功能的集合。</li></ul><blockquote><p>虚拟文件系统VFS就是采用这种设计模式</p></blockquote><h2 id="🌿Proxy-代理"><a href="#🌿Proxy-代理" class="headerlink" title="🌿Proxy 代理"></a>🌿Proxy 代理</h2><h3 id="🌹模式定义-1"><a href="#🌹模式定义-1" class="headerlink" title="🌹模式定义"></a>🌹模式定义</h3><p>为其他对象<strong>提供一种代理以控制（隔离、使用接口）对这个对象的访问</strong>。</p><h3 id="🌹动机-1"><a href="#🌹动机-1" class="headerlink" title="🌹动机"></a>🌹动机</h3><ul><li>在面对对象系统中，有些对象由于某种原因（比如对象创建的开销很大，或者某些操作系统需要<strong>安全控制</strong>，或者需要<strong>进程外的访问</strong>等），直接访问会给使用者、或者系统结构带来许多麻烦。</li><li>如何在<strong>不失去透明操作对象的同时来管理/控制这些对象</strong>特有的复杂性？增加一层间接层是软件开发中常见的解决方式。</li></ul><h3 id="🌹代码示例"><a href="#🌹代码示例" class="headerlink" title="🌹代码示例"></a>🌹代码示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ISubject</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RealSubject</span>:</span> <span class="hljs-keyword">public</span> ISubject&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//....</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientApp</span>&#123;</span><br>    <br>    ISubject* subject;<br>    <br><span class="hljs-keyword">public</span>:<br>    <br>    ClientApp()&#123;<br>        subject=<span class="hljs-keyword">new</span> RealSubject();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoTask</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        subject-&gt;process();<br>        <br>        <span class="hljs-comment">//....</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ISubject</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><br><span class="hljs-comment">//Proxy的设计</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubjectProxy</span>:</span> <span class="hljs-keyword">public</span> ISubject&#123;<br>    <br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//对RealSubject的一种间接访问</span><br>        <span class="hljs-comment">//....</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientApp</span>&#123;</span><br>    <br>    ISubject* subject;<br>    <br><span class="hljs-keyword">public</span>:<br>    <br>    ClientApp()&#123;<br>        subject=<span class="hljs-keyword">new</span> SubjectProxy();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoTask</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        subject-&gt;process();<br>        <br>        <span class="hljs-comment">//....</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="🌹结构-1"><a href="#🌹结构-1" class="headerlink" title="🌹结构"></a>🌹结构</h3><p><img src=".\3.png" alt=""></p><h3 id="🌹要点总结-1"><a href="#🌹要点总结-1" class="headerlink" title="🌹要点总结"></a>🌹要点总结</h3><ul><li>“增加一层间接层”是软件系统中对许多复杂问题的一种常见解决方法。在面对对象系统中，直接使用某些对象会带来很多问题，作为间接层的proxy对象便是解决者一问题的常用手段。</li><li>具体proxy设计模式的实现方法、实现粒度都相差很大，有些可能对单个对象做细粒度的控制，如<strong>copy-on-write技术</strong>，有些可能对组件模块提供抽象代理层，在架构层次对对象做proxy。</li><li>proxy并不一定要求保持接口一致的完整性，只要能够实现间接控制，有时候损及一些透明性是可以接受的。</li></ul><blockquote><p>代理人模式，例如现实生活中明星安排活动，活动方和代理人沟通协商细节，明显完成核心工作即可。 在计算机领域的细节：例如安全控制，分布式管理、性能优化什么的。</p></blockquote><h2 id="🌿Adapter-适配器"><a href="#🌿Adapter-适配器" class="headerlink" title="🌿Adapter 适配器"></a>🌿Adapter 适配器</h2><h3 id="🌹模式定义-2"><a href="#🌹模式定义-2" class="headerlink" title="🌹模式定义"></a>🌹模式定义</h3><p>将一个类的接口转换成客户希望的另一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><h3 id="🌹动机-2"><a href="#🌹动机-2" class="headerlink" title="🌹动机"></a>🌹动机</h3><ul><li>在软件系统中，由于应用环境的变化，常常需要将“一些现存的对象”放在新环境中应用，但是新环境的接口是这些现存对象所不满足的。</li><li>如何应对这种“迁移的变化”？如何既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口？</li></ul><p><img src=".\4.png" alt=""></p><h3 id="🌹代码示例-1"><a href="#🌹代码示例-1" class="headerlink" title="🌹代码示例"></a>🌹代码示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//目标接口（新接口）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ITarget</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//遗留接口（老接口）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IAdaptee</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//遗留类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OldClass</span>:</span> <span class="hljs-keyword">public</span> IAdaptee&#123;<br>    <span class="hljs-comment">//....</span><br>&#125;;<br><br><span class="hljs-comment">//对象适配器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span>:</span> <span class="hljs-keyword">public</span> ITarget&#123; <span class="hljs-comment">//继承</span><br><span class="hljs-keyword">protected</span>:<br>    IAdaptee* pAdaptee;<span class="hljs-comment">//组合</span><br>    <br><span class="hljs-keyword">public</span>:<br>    <br>    Adapter(IAdaptee* pAdaptee)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;pAdaptee=pAdaptee;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> data=pAdaptee-&gt;bar();<br>        pAdaptee-&gt;foo(data);<br>        <br>    &#125;<br>    <br>    <br>&#125;;<br><br><br><span class="hljs-comment">//类适配器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span>:</span> <span class="hljs-keyword">public</span> ITarget,<br>               <span class="hljs-keyword">protected</span> OldClass&#123; <span class="hljs-comment">//多继承</span><br>               <br>               <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    IAdaptee* pAdaptee=<span class="hljs-keyword">new</span> OldClass();<br>    <br>    <br>    ITarget* pTarget=<span class="hljs-keyword">new</span> Adapter(pAdaptee);<br>    pTarget-&gt;process();<br>    <br>    <br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stack</span>&#123;</span><br>    deqeue container;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">queue</span>&#123;</span><br>    deqeue container;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="🌹结构-2"><a href="#🌹结构-2" class="headerlink" title="🌹结构"></a>🌹结构</h3><p><img src=".\5.png" alt=""></p><h3 id="🌹要点总结-2"><a href="#🌹要点总结-2" class="headerlink" title="🌹要点总结"></a>🌹要点总结</h3><ul><li>Adapter模式主要应用于“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”，在遗留代码复用，类库迁移等方面非常有用。</li><li>GoF 23定义了两种Adapter模式的实现结构：对象适配器和类适配器。<strong>单类适配器采用“多继承”的实现方式，一般不推荐使用。</strong>对象适配器采用“对象组合”的方式，更符合松耦合精神。</li><li>Adapter模式可以实现的非常灵活，不必拘泥于Gof23中定义的两种结构。例如，完全可以将Adapter模式种的“现存对象”作为新的接口方法参数，来达到适配的目的。</li></ul><blockquote><p>如C++STL库中stack和queue就是deque的一种适配器，map和set就是rb_tree的适配器。</p></blockquote><h2 id="🌿Mediator-中介者"><a href="#🌿Mediator-中介者" class="headerlink" title="🌿Mediator 中介者"></a>🌿Mediator 中介者</h2><h3 id="🌹模式定义-3"><a href="#🌹模式定义-3" class="headerlink" title="🌹模式定义"></a>🌹模式定义</h3><p>用一个中介对象来封装（封装变化）一系列的对象交互。中介者使得各个对象不需要显示的互相引用（<strong>编译时依赖—&gt;运行时依赖</strong>），从而使其耦合松散（管理变化），而且可以独立地改变它们之间地交互。</p><h3 id="🌹动机-3"><a href="#🌹动机-3" class="headerlink" title="🌹动机"></a>🌹动机</h3><ul><li>在软件构建过程中，经常会出现多个对象互相关联交互地情况，对象之间常常会维持一种复杂地引用关系，如果遇到一些需求地更改，这种直接地引用关系将面临不断地变化。</li><li>在这种情况下，我们可以使用一个“中介对象”来管理对象间地关联关系，避免互相交互的对象之间的紧耦合引用关系，从而跟好地抵御变化。</li></ul><p><img src=".\6.jpg" alt="电话线从每两用户都有一根到星型结构中控管理"></p><h3 id="🌹结构-3"><a href="#🌹结构-3" class="headerlink" title="🌹结构"></a>🌹结构</h3><p><img src=".\7.png" alt=""></p><h3 id="🌹要点总结-3"><a href="#🌹要点总结-3" class="headerlink" title="🌹要点总结"></a>🌹要点总结</h3><ul><li>将多个对象间复杂的关联关系解耦，Mediator模式将多个对象间的控制逻辑进行机制管理，<strong>变“多个对象互相关联”为“多个对象和一个中介者关联”</strong>，简化了系统维护，抵御了可能变化。</li><li>随着控制逻辑的复杂化，Mediator具体对象的实现可能相当复杂。这时候可以对Mediator对象进行分解处理。</li><li>Facade模式是解耦系统间（单向）的对象关联关系；Mediator模式是解耦系统内各个对象之间（双向）的关联关系。</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GOF_性能对象</title>
    <link href="/2021/02/17/GOF-%E5%AF%B9%E8%B1%A1%E6%80%A7%E8%83%BD/"/>
    <url>/2021/02/17/GOF-%E5%AF%B9%E8%B1%A1%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿“对象性能”模式"><a href="#🌿“对象性能”模式" class="headerlink" title="🌿“对象性能”模式"></a>🌿“对象性能”模式</h2><p>面向对象很好地解决了“抽象”的问题，但是必不可免地要付出一定代价。对于通常情况来讲，面对对象地成本可以忽略不计。但是某些情况，面向对象所带来地成本必须谨慎处理。</p><ul><li>Singleton</li><li>Flyweight</li></ul><h2 id="🌿Singleton-单件模式"><a href="#🌿Singleton-单件模式" class="headerlink" title="🌿Singleton 单件模式"></a>🌿Singleton 单件模式</h2><h3 id="🌹定义"><a href="#🌹定义" class="headerlink" title="🌹定义"></a>🌹定义</h3><p>保证一个类仅有一个实例，并提供一个该实例的全局访问点。    </p><h3 id="🌹动机"><a href="#🌹动机" class="headerlink" title="🌹动机"></a>🌹动机</h3><ul><li><p>在软件系统中，经常有这样一些特殊地类，必须<strong>保证它们在系统中只存在一个实例</strong>，才能保证它们多的逻辑正确性、以及良好地效率。</p></li><li><p>如何<strong>绕过常规构造器，提供提供一个机制来保证一个类只有一个实例</strong>？</p></li><li><p>这个机制设计是类设计者的责任，而不是使用者的责任</p></li></ul><h3 id="🌹代码"><a href="#🌹代码" class="headerlink" title="🌹代码"></a>🌹代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    Singleton();<br>    Singleton(<span class="hljs-keyword">const</span> Singleton&amp; other);<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">static</span> Singleton* m_instance;<br>&#125;;<br><br>Singleton* Singleton::m_instance=<span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-comment">//线程非安全版本</span><br><span class="hljs-function">Singleton* <span class="hljs-title">Singleton::getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (m_instance == <span class="hljs-literal">nullptr</span>) &#123;<br>        m_instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    <span class="hljs-keyword">return</span> m_instance;<br>&#125;<br><br><br><span class="hljs-comment">//线程安全版本，但锁的代价过高</span><br><span class="hljs-function">Singleton* <span class="hljs-title">Singleton::getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    Lock lock;<br>    <span class="hljs-keyword">if</span> (m_instance == <span class="hljs-literal">nullptr</span>) &#123;<br>        m_instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    <span class="hljs-keyword">return</span> m_instance;<br>&#125;<br><br><br><span class="hljs-comment">//双检查锁，但由于内存读写reorder不安全</span><br><span class="hljs-comment">//nullptr后lock前两个线程抢进来，再检查一次</span><br><span class="hljs-comment">//reorder，先分内存，再赋值，最后构造</span><br><span class="hljs-comment">//thread 一开始直接认为非null，直接把没构造的内存返回了</span><br><span class="hljs-function">Singleton* <span class="hljs-title">Singleton::getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">if</span>(m_instance==<span class="hljs-literal">nullptr</span>)&#123;<br>        Lock lock;<br>        <span class="hljs-keyword">if</span> (m_instance == <span class="hljs-literal">nullptr</span>) &#123;<br>            m_instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> m_instance;<br>&#125;<br><br><br><span class="hljs-comment">//C++ 11版本之后的跨平台实现 (volatile，java和c#)</span><br><span class="hljs-built_in">std</span>::atomic&lt;Singleton*&gt; Singleton::m_instance;<br><span class="hljs-built_in">std</span>::mutex Singleton::m_mutex;<br><br><span class="hljs-function">Singleton* <span class="hljs-title">Singleton::getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    Singleton* tmp = m_instance.load(<span class="hljs-built_in">std</span>::memory_order_relaxed);<br>    <span class="hljs-built_in">std</span>::atomic_thread_fence(<span class="hljs-built_in">std</span>::memory_order_acquire);<span class="hljs-comment">//获取内存fence</span><br>    <span class="hljs-keyword">if</span> (tmp == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-built_in">std</span>::lock_guard&lt;<span class="hljs-built_in">std</span>::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(m_mutex)</span></span>;<br>        tmp = m_instance.load(<span class="hljs-built_in">std</span>::memory_order_relaxed);<br>        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-literal">nullptr</span>) &#123;<br>            tmp = <span class="hljs-keyword">new</span> Singleton;<br>            <span class="hljs-built_in">std</span>::atomic_thread_fence(<span class="hljs-built_in">std</span>::memory_order_release);<span class="hljs-comment">//释放内存fence</span><br>            m_instance.store(tmp, <span class="hljs-built_in">std</span>::memory_order_relaxed);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🌹结构"><a href="#🌹结构" class="headerlink" title="🌹结构"></a>🌹结构</h3><p><img src=".\1.png" alt=""></p><h3 id="🌹要点总结"><a href="#🌹要点总结" class="headerlink" title="🌹要点总结"></a>🌹要点总结</h3><ul><li>Singleton模式中的实例构造器可以设置为protected以允许子类派生。</li><li>Singleton模式一般不要支持拷贝构造函数和Clone接口，因为这可能导致多个对象实例，与Singleton模式的初衷违背。</li><li>如何实现多线程环境下安全的Singleton？注意双检查锁的正确实现。</li></ul><h2 id="🌿享元模式"><a href="#🌿享元模式" class="headerlink" title="🌿享元模式"></a>🌿享元模式</h2><h3 id="🌹定义-1"><a href="#🌹定义-1" class="headerlink" title="🌹定义"></a>🌹定义</h3><p>运用共享技术有效地支持大量细粒度地对象</p><h3 id="🌹动机-1"><a href="#🌹动机-1" class="headerlink" title="🌹动机"></a>🌹动机</h3><ul><li>在软件系统中采用存粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需要方面的代价。</li><li>如何避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面对对象地方式进行操作？</li></ul><p><img src=".\2.png" alt=""></p><h3 id="🌹代码-1"><a href="#🌹代码-1" class="headerlink" title="🌹代码"></a>🌹代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Font</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-comment">//unique object key</span><br>    <span class="hljs-built_in">string</span> key;<br>    <br>    <span class="hljs-comment">//object state</span><br>    <span class="hljs-comment">//....</span><br>    <br><span class="hljs-keyword">public</span>:<br>    Font(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; key)&#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;;<br>ß<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FontFactory</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,Font* &gt; fontPool;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Font* <span class="hljs-title">GetFont</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; key)</span></span>&#123;<br><br>        <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,Font*&gt;::iterator item=fontPool.find(key);<br>        <span class="hljs-comment">//找到对象就返回对象，没找到就创建新的。</span><br>        <span class="hljs-keyword">if</span>(item!=footPool.end())&#123;<br>            <span class="hljs-keyword">return</span> fontPool[key];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            Font* font = <span class="hljs-keyword">new</span> Font(key);<br>            fontPool[key]= font;<br>            <span class="hljs-keyword">return</span> font;<br>        &#125;<br><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="🌹要点总结-1"><a href="#🌹要点总结-1" class="headerlink" title="🌹要点总结"></a>🌹要点总结</h3><ul><li>面向对象很好解决了抽象性的问题，但是作为一个运行在机器中的程序实体，我们需要考虑对象的代价问题。Flyweight主要解决了面向对象的代价问题，一般不涉及到抽象性问题。</li><li>Flyweight采用<strong>对象共享的做法来降低系统中对象的个数</strong>，从而降低细粒度对象给系统带来的内存压力。在具体实现方面，要<strong>注意对象状态的处理(一般共享的对象都是只读对象)</strong>。</li><li>对象的数量太大从而导致对象内存开销加大——<strong>什么样的数量才算大？</strong>这需要我们仔细的根据具体应用情况进行评估，而不能凭空臆断。</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL关联容器</title>
    <link href="/2021/02/17/STL%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/"/>
    <url>/2021/02/17/STL%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿rb-tree"><a href="#🌿rb-tree" class="headerlink" title="🌿rb_tree"></a>🌿rb_tree</h2><p><img src=".\1.png" alt=""></p><p><img src=".\2.png" alt=""></p><p><img src=".\3.png" alt=""></p><p><img src=".\4.png" alt="红黑树使用实例"></p><p><img src=".\5.png" alt="类结构，map和set以rbtree作为底层容器"></p><h2 id="🌿set-multiset"><a href="#🌿set-multiset" class="headerlink" title="🌿set/multiset"></a>🌿set/multiset</h2><p><img src=".\6.png" alt=""></p><p><img src=".\7.png" alt="全都交给rb_tree去做，默认compare是less，类比较的话要做&lt;运算符重载"></p><h2 id="🌿map-multimap"><a href="#🌿map-multimap" class="headerlink" title="🌿map/multimap"></a>🌿map/multimap</h2><p><img src=".\8.png" alt=""></p><p><img src=".\9.png" alt=""></p><p><img src=".\10.png" alt=""></p><h2 id="🌿hashtable"><a href="#🌿hashtable" class="headerlink" title="🌿hashtable"></a>🌿hashtable</h2><p><img src=".\11.png" alt="哈希表长度要比链表大，且哈希表以质数两倍成长"></p><p><img src=".\12.png" alt=""><img src=".\13.png" alt=""></p><p><img src=".\14.png" alt="hashfunction计算hashcode"></p><p><img src=".\15.png" alt=""></p><p><img src=".\16.png" alt="根据hashcode取模看落在那个bucket"></p><p><img src=".\17.png" alt="例子"></p><h2 id="🌿unordered容器"><a href="#🌿unordered容器" class="headerlink" title="🌿unordered容器"></a>🌿unordered容器</h2><p><img src=".\18.png" alt=""></p><p><img src=".\19.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-侯捷 -STL库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL顺序容器</title>
    <link href="/2021/02/13/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    <url>/2021/02/13/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿容器、结构与分类"><a href="#🌿容器、结构与分类" class="headerlink" title="🌿容器、结构与分类"></a>🌿容器、结构与分类</h2><p><img src=".\1.png" alt="缩排形式是复合(composition)关系，并非继承(inheritance)关系"></p><h2 id="🌿List"><a href="#🌿List" class="headerlink" title="🌿List"></a>🌿List</h2><h3 id="🌹List结构"><a href="#🌹List结构" class="headerlink" title="🌹List结构"></a>🌹List结构</h3><p><img src=".\2.png" alt=""></p><h3 id="🌹List操作"><a href="#🌹List操作" class="headerlink" title="🌹List操作"></a>🌹List操作</h3><p><img src=".\3.png" alt="迭代器模仿指针的行为会有*解引用，-&gt;箭头，++，--等操作"></p><p><img src=".\4.png" alt="后缀++用int标识，返回value，函数体内调用前缀++"></p><p><img src=".\5.png" alt=""></p><h3 id="🌹List的迭代器结构"><a href="#🌹List的迭代器结构" class="headerlink" title="🌹List的迭代器结构"></a>🌹List的迭代器结构</h3><p><img src=".\6.png" alt=""></p><p><img src=".\7.png" alt="4.9版的List设计，将指向结点的指针改成了空指针，还有一些不明不白的继承关系"></p><h2 id="🌿Lterator设计原则与Traits"><a href="#🌿Lterator设计原则与Traits" class="headerlink" title="🌿Lterator设计原则与Traits"></a>🌿Lterator设计原则与Traits</h2><h3 id="🌹设计原则-iter-type-value-max-difference"><a href="#🌹设计原则-iter-type-value-max-difference" class="headerlink" title="🌹设计原则(iter_type? value? max_difference?)"></a>🌹设计原则(iter_type? value? max_difference?)</h3><p><img src=".\8.png" alt="iterator要回答算法的问题，ref和ptr从来没被使用过"></p><p><img src=".\9.png" alt=""></p><h3 id="🌹萃取机"><a href="#🌹萃取机" class="headerlink" title="🌹萃取机"></a>🌹萃取机</h3><p><img src=".\10.png" alt=""></p><p><img src=".\11.png" alt=""></p><h2 id="🌿Vector"><a href="#🌿Vector" class="headerlink" title="🌿Vector"></a>🌿Vector</h2><p><img src=".\12.png" alt="顺序容器的迭代器一般都是指针，带有三个指针"></p><p><img src=".\13.png" alt="insert_aux中还进行一次检查，不止push_back函数会调用它"></p><p><img src=".\14.png" alt=""></p><h2 id="🌿Array"><a href="#🌿Array" class="headerlink" title="🌿Array"></a>🌿Array</h2><p><img src=".\15.png" alt="对数组进行了一层封装，使之能享受容器的功能"></p><h2 id="🌿Forward-List"><a href="#🌿Forward-List" class="headerlink" title="🌿Forward_List"></a>🌿Forward_List</h2><p><img src=".\16.png" alt="其迭代器是单向迭代器，不提供--操作"></p><h2 id="🌿Deque"><a href="#🌿Deque" class="headerlink" title="🌿Deque"></a>🌿Deque</h2><h3 id="🌹Deque结构"><a href="#🌹Deque结构" class="headerlink" title="🌹Deque结构"></a>🌹Deque结构</h3><p><img src=".\17.png" alt=""><img src=".\18.png" alt=""></p><h3 id="🌹Insert操作"><a href="#🌹Insert操作" class="headerlink" title="🌹Insert操作"></a>🌹Insert操作</h3><p><img src=".\19.png" alt=""></p><p><img src=".\20.png" alt=""></p><h3 id="🌹Deque如何模拟连续空间"><a href="#🌹Deque如何模拟连续空间" class="headerlink" title="🌹Deque如何模拟连续空间"></a>🌹Deque如何模拟连续空间</h3><p><img src=".\21.png" alt=""></p><p><img src=".\22.png" alt=""></p><p><img src=".\23.png" alt=""></p><p><img src=".\24.png" alt=""></p><p><img src=".\25.png" alt="全部最终都调用+=函数"></p><p><img src=".\26.png" alt="deque_uml图"></p><h2 id="🌿Stack和Queue"><a href="#🌿Stack和Queue" class="headerlink" title="🌿Stack和Queue"></a>🌿Stack和Queue</h2><p><img src=".\27.png" alt=""></p><p><img src=".\28.png" alt=""></p><p><img src=".\29.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-侯捷 -STL库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RB-Tree</title>
    <link href="/2021/02/12/RB-Tree/"/>
    <url>/2021/02/12/RB-Tree/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿性质"><a href="#🌿性质" class="headerlink" title="🌿性质"></a>🌿性质</h2><p>红黑树是一种<strong>自平衡二叉搜索树</strong>，它可以在<strong>O(log<sub>n</sub>)</strong>时间内完成查找、插入和删除，这里的<strong>n</strong>是树中元素的数目，它具有以下特点：</p><ol><li>节点是红色或黑色。</li><li><strong>根是黑色</strong>。</li><li>所有<strong>叶子都是黑色</strong>（叶子是NIL节点）。</li><li><strong>每个红色节点必须有两个黑色的子节点</strong>。（从每个叶子到根的所有路径上不能有两个连续的红色节点。)</li><li>从任一节点到其每个叶子的所有简单路径都包含<strong>相同数目的黑色节点</strong>。</li></ol><p><img src=".\1.png" alt="null结点算作黑色结点"></p><p>这些约束确保了红黑树的关键特性：<strong>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长</strong>，使得这棵树大抵是平衡的，比AVL树条件宽松。</p><h2 id="🌿插入和旋转"><a href="#🌿插入和旋转" class="headerlink" title="🌿插入和旋转"></a>🌿插入和旋转</h2><p>📺<a href="https://www.bilibili.com/video/BV1Pp4y1D7u1/?spm_id_from=333.788.videocard.1">红黑树</a>    16:30开始插入演示👇</p><p><img src=".\1.5.png" alt="选择表格，比AVL选择复杂一些"></p><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91#%E6%8F%92%E5%85%A5">🔗维基插入锚点</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91#%E5%88%A0%E9%99%A4">🔗维基删除锚点</a></p><h2 id="🌿各种balance树"><a href="#🌿各种balance树" class="headerlink" title="🌿各种balance树"></a>🌿各种balance树</h2><h3 id="🌹AVL树"><a href="#🌹AVL树" class="headerlink" title="🌹AVL树"></a>🌹AVL树</h3><p><strong>高度自平衡二叉树</strong>，<strong>任一节点对应的两棵子树的最大高度差为1</strong>，<strong>查找、插入和删除</strong>在平均和最坏情况下的<strong>时间复杂度</strong>都是<strong>O(log<sub>n</sub>)</strong>增加和删除元素的操作则可能需要借由一次或多次树旋转以实现树的重新平衡。</p><p><img src=".\2.gif" style="zoom:200%;" /></p><p><img src=".\2.5.png" alt="avl树旋转的图形描述。"></p><p>🔗<a href="https://zh.wikipedia.org/wiki/AVL%E6%A0%91">艾薇儿树维基</a></p><blockquote><p>AVL树相对于RB树维护平衡的开销（旋转操作）更大，但是查找的速度也相应的更快。</p></blockquote><h3 id="🌹B树"><a href="#🌹B树" class="headerlink" title="🌹B树"></a>🌹B树</h3><p><strong>B树\B-数</strong>（英语：B-tree）是一种自平衡的树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的动作，都在<strong>对数时间</strong>内完成。</p><p><img src=".\3.png" alt=""></p><p>🔗<a href="https://zh.wikipedia.org/wiki/B%E6%A0%91">b树维基</a></p><h3 id="🌹B-树"><a href="#🌹B-树" class="headerlink" title="🌹B+树"></a>🌹B+树</h3><p>与b树类似，但是自由叶子结点存储value，<strong>非叶子结点只存储key</strong>。并且叶子结点用一条指针相连起来，方便数据的遍历。</p><p><img src=".\5.png" alt="把键1-7连接到值 d1-d7 的B+树。链表（红色）用于快速顺序遍历叶子节点。树的分叉因子b=4。"></p><p>🔗<a href="https://zh.wikipedia.org/wiki/B%2B%E6%A0%91">b+树维基</a></p><p>📺<a href="https://www.bilibili.com/video/BV1UC4y1p7zm?from=search&amp;seid=17085138785753425050">彻底理解B树和B+树！为何它们常用在数据库中？</a></p><p>🔗 <a href="https://blog.ouyangsihai.cn/mian-shi-guan-wen-ni-b-shu-he-b-shu-jiu-ba-zhe-pian-wen-zhang-diu-gei-ta.html">面试官问你B树和B+树，就把这篇文章丢给他</a></p><blockquote><p>B和B+主要用在文件系统以及数据库中做索引</p></blockquote><hr><p><img src=".\7.png" alt="红黑树大白话理解"></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL综述</title>
    <link href="/2021/02/12/CPP-STL%E7%BB%BC%E8%BF%B0/"/>
    <url>/2021/02/12/CPP-STL%E7%BB%BC%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿STL六大部件"><a href="#🌿STL六大部件" class="headerlink" title="🌿STL六大部件"></a>🌿STL六大部件</h2><p><img src=".\1.png" alt=""></p><ol><li><strong>容器 Containers</strong>：存放我们要操作的数据，可以是数字、对象等； </li><li><strong>分配器 Allocators</strong>：容器需要占用内存，容器占用的内存由分配器分配； </li><li><strong>算法 Algorithms</strong>：被独立出来的模板函数，用来操作容器，包块常见的排序算法、查找算法等； </li><li><strong>迭代器 Iterators</strong>：算法既然要操作容器中的数据，需要有工具访问容器中数据，那就是迭代器，是一种泛化的指针； </li><li><strong>容器适配器 Adapters</strong>：一些容器底层和数据操作具有一定的相似，所以一些容器使用其他容器作为底层数据结构，并将其他容器的函数转换为自己的函数； </li><li><strong>仿函数Functors</strong>：实际上是类中的operator()小括号运算符重载函数，存在类似函数的行为。</li></ol><blockquote><p>迭代器begin()与end()是前闭后开区间，即end()指向最后一个元素的末尾</p></blockquote><h2 id="🌿容器结构分类"><a href="#🌿容器结构分类" class="headerlink" title="🌿容器结构分类"></a>🌿容器结构分类</h2><p><img src=".\2.png" alt=""></p><h3 id="🌹顺序容器"><a href="#🌹顺序容器" class="headerlink" title="🌹顺序容器"></a>🌹顺序容器</h3><ul><li>Array 内存顺序存储</li><li>Vector  内存顺序存储，内存不够自动扩充，g++2倍，vc1.5倍。</li><li>Deque <strong>分段</strong>内存顺序存储，同样内存不够自动扩充底层结构是Vector</li><li>List  <strong>环形</strong>链表</li><li>Forward-List <strong>带头结点</strong>单向链表，内存耗用闭list少</li></ul><h3 id="🌹关联容器"><a href="#🌹关联容器" class="headerlink" title="🌹关联容器"></a>🌹关联容器</h3><ul><li>Set/Multiset: 集合/<strong>元素内容可重复（multi）</strong>，底层数据结构是红黑树。</li><li>Map/Multimap： 每个结点带有key，data对，底层数据结构也是红黑树。</li><li>Unordered Set/Multiset：无顺序集合，底层采用链地址法处理冲突的hashtable，如果baket太长查找会比较慢。</li><li>Unordered Map/Multimap：无顺序Map，底层采用链地址法处理冲突的hashtable。</li></ul><blockquote><p>使用一个东西，却不明白它的道理，不高明   ——林语堂</p></blockquote><h2 id="🌿OOP-VS-GP"><a href="#🌿OOP-VS-GP" class="headerlink" title="🌿OOP VS GP"></a>🌿OOP VS GP</h2><p>Object-oriented programming（面对对象的编程）与 Generic Programming(泛型编程)，而STL库就是用GP思想设计的。</p><p><img src=".\3.png" alt=""></p><p><img src=".\4.png" alt=""></p><ul><li>使用GP可以使Containers和Algorithms团队分开来各自闭门造车，只要定好Iterator的标准即可。</li><li>Algorithms通过Iterator确定操作范围，并通过Iterator取用Container元素。</li><li>OOP对类进行实例化，我感觉GP更像是用对象对method进行实例化。</li></ul><h2 id="🌿GP必备知识"><a href="#🌿GP必备知识" class="headerlink" title="🌿GP必备知识"></a>🌿GP必备知识</h2><h3 id="🌹Operator-Overloading"><a href="#🌹Operator-Overloading" class="headerlink" title="🌹Operator Overloading"></a>🌹Operator Overloading</h3><p><img src=".\5.png" alt=""></p><h3 id="🌹Templates"><a href="#🌹Templates" class="headerlink" title="🌹Templates"></a>🌹Templates</h3><h4 id="🦊Class-Templates"><a href="#🦊Class-Templates" class="headerlink" title="🦊Class Templates"></a>🦊Class Templates</h4><p><img src=".\6.png" alt=""></p><h4 id="🦊Function-Templates"><a href="#🦊Function-Templates" class="headerlink" title="🦊Function Templates"></a>🦊Function Templates</h4><p><img src=".\7.png" alt=""></p><h4 id="🦊Member-Templates"><a href="#🦊Member-Templates" class="headerlink" title="🦊Member Templates"></a>🦊Member Templates</h4><p><img src=".\8.png" alt=""></p><blockquote><p>模板类之间的赋值问题👇</p></blockquote><p><img src=".\9.png" alt="问题"></p><p><img src=".\10.png" alt="解决"></p><h4 id="🦊Specialization特化"><a href="#🦊Specialization特化" class="headerlink" title="🦊Specialization特化"></a>🦊Specialization特化</h4><p><img src=".\11.png" alt=""></p><h4 id="🦊Partial-Specialization偏特化"><a href="#🦊Partial-Specialization偏特化" class="headerlink" title="🦊Partial Specialization偏特化"></a>🦊Partial Specialization偏特化</h4><p><img src=".\12.png" alt=""></p><h2 id="🌿allocator分配器"><a href="#🌿allocator分配器" class="headerlink" title="🌿allocator分配器"></a>🌿allocator分配器</h2><blockquote><p>所有容器的第二个默认模板参数是allocator<T></p></blockquote><p><img src=".\13.png" alt=""></p><p><img src=".\14.png" alt="一般alloc只是对new和delete调用，delete是要填数字"></p><p><img src=".\15.png" alt="G2.9的alloc做法"></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-侯捷 -STL库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>侯捷_OOP与虚函数</title>
    <link href="/2021/02/03/%E4%BE%AF%E6%8D%B7-OOP%E4%B8%8E%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <url>/2021/02/03/%E4%BE%AF%E6%8D%B7-OOP%E4%B8%8E%E8%99%9A%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿Composition-複合-has-a"><a href="#🌿Composition-複合-has-a" class="headerlink" title="🌿Composition (複合 has a)"></a>🌿Composition (複合 has a)</h2><p><img src=".\1.png" alt=""></p><p><img src=".\2.png" alt=""></p><p><img src=".\3.png" alt=""></p><h2 id="🌿Delegation-委託"><a href="#🌿Delegation-委託" class="headerlink" title="🌿Delegation (委託)"></a>🌿Delegation (委託)</h2><blockquote><p>Composition by reference</p></blockquote><p><img src=".\4.png" alt="Pointer to Implementation"></p><h2 id="🌿Inheritance-繼承，is-a"><a href="#🌿Inheritance-繼承，is-a" class="headerlink" title="🌿Inheritance (繼承，is-a)"></a>🌿Inheritance (繼承，is-a)</h2><p><img src=".\5.png" alt=""></p><p><img src=".\6.png" alt=""></p><h2 id="🌿虚函数-amp-继承（virtual）"><a href="#🌿虚函数-amp-继承（virtual）" class="headerlink" title="🌿虚函数 &amp; 继承（virtual）"></a>🌿虚函数 &amp; 继承（virtual）</h2><p><img src=".\7.png" alt=""></p><h3 id="🌼template-method"><a href="#🌼template-method" class="headerlink" title="🌼template method"></a>🌼template method</h3><p><img src=".\8.png" alt="例子：打开磁盘文件"></p><p><img src=".\9.png" alt="继承with虚函数"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDocument</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnFileOpen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 這是個算法，每個 cout 輸出代表一個實際動作</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dialog...&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;check file status...&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;open file...&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>Serialize();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;close file...&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;update all views...&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Serialize</span><span class="hljs-params">()</span> </span>&#123; &#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMyDoc</span> :</span> <span class="hljs-keyword">public</span> CDocument<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Serialize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 只有應用程序本身才知道如何讀取自己的文件(格式)</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;CMyDoc::Serialize()&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>CMyDoc myDoc; <span class="hljs-comment">// 假設對應[File/Open]</span><br>myDoc.OnFileOpen();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🌿组合"><a href="#🌿组合" class="headerlink" title="🌿组合"></a>🌿组合</h2><h3 id="🌼Inheritance-Composition"><a href="#🌼Inheritance-Composition" class="headerlink" title="🌼Inheritance+Composition"></a>🌼Inheritance+Composition</h3><p><img src=".\10.png" alt=""></p><p><img src=".\11.png" alt=""></p><h3 id="🌼Delegation-Inheritance"><a href="#🌼Delegation-Inheritance" class="headerlink" title="🌼Delegation + Inheritance"></a>🌼Delegation + Inheritance</h3><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p><img src=".\12.png" alt="observer"></p><p><img src=".\13.png" alt="observer应用场景"></p><p><img src=".\14.png" alt=""></p><h4 id="原型模式🔗（对于复杂对象的创建）"><a href="#原型模式🔗（对于复杂对象的创建）" class="headerlink" title="原型模式🔗（对于复杂对象的创建）"></a><a href="https://qingcai56.cn/2021/01/27/GoF-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/#%F0%9F%8C%BFPrototype%EF%BC%88%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%89">原型模式🔗</a>（对于复杂对象的创建）</h4>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-侯捷 -面对对象的高级开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>侯捷_ObjectBased</title>
    <link href="/2021/02/01/%E4%BE%AF%E6%8D%B7-ObjectBased/"/>
    <url>/2021/02/01/%E4%BE%AF%E6%8D%B7-ObjectBased/</url>
    
    <content type="html"><![CDATA[<h2 id="🌿知识"><a href="#🌿知识" class="headerlink" title="🌿知识"></a>🌿知识</h2><h3 id="两种class"><a href="#两种class" class="headerlink" title="两种class"></a>两种class</h3><ul><li><strong>Object Based</strong> : 面對的是單一 class 的設計。</li><li><strong>Object Oriented</strong> : 面對的是多重 classes 的設計， classes 和 classes之間的關係。</li></ul><h3 id="Object-Based经典两类"><a href="#Object-Based经典两类" class="headerlink" title="Object Based经典两类"></a>Object Based经典两类</h3><ul><li>Class <strong>without pointer</strong> member(s)：complex</li><li>Class <strong>with pointer</strong> member(s) ：string</li></ul><blockquote><p>带指针和不带指针的区别是new和delete的时候情况有所不同</p></blockquote><p><img src=".\1.png" alt="cpp项目基本结构"></p><h3 id="头文件防卫式声明"><a href="#头文件防卫式声明" class="headerlink" title="头文件防卫式声明"></a>头文件防卫式声明</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//防止头文件被多次引用</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __COMPLEX__</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __COMPLEX__</span><br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//...</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">//pragma👇在老的编译器中可能不支持</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br></code></pre></td></tr></table></figure><h3 id="类的权限"><a href="#类的权限" class="headerlink" title="类的权限"></a>类的权限</h3><p><img src=".\2.jpg" alt=""></p><h2 id="🌿Complex"><a href="#🌿Complex" class="headerlink" title="🌿Complex"></a>🌿Complex</h2><h3 id="h文件布局"><a href="#h文件布局" class="headerlink" title="h文件布局"></a>h文件布局</h3><p><img src=".\3.png" alt=""></p><h3 id="h文件源码"><a href="#h文件源码" class="headerlink" title="h文件源码"></a>h文件源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __COMPLEX__</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __COMPLEX__</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;iostream.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">complex</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">complex</span>(<span class="hljs-keyword">double</span> r = <span class="hljs-number">0</span>, <span class="hljs-keyword">double</span> i = <span class="hljs-number">0</span>)<br>: re(r), im(i)<br>&#123; &#125;;<br><span class="hljs-built_in">complex</span>&amp; <span class="hljs-keyword">operator</span> +=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp;);<br>    <span class="hljs-comment">//👇这个定义在类中的重载调用 classname&lt;&lt;cout,不符合习惯</span><br>ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt;(ostream&amp; os)<br>&#123;<br><span class="hljs-keyword">return</span> os &lt;&lt; <span class="hljs-string">&#x27;(&#x27;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;real() &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;imag() &lt;&lt; <span class="hljs-string">&#x27;)&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">real</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> re; &#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">imag</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> im; &#125;<br>~<span class="hljs-built_in">complex</span>() &#123;&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">double</span> re, im;<br><br><span class="hljs-keyword">friend</span> <span class="hljs-built_in">complex</span>&amp; __doapl(<span class="hljs-built_in">complex</span>*, <span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp;);<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt;(ostream&amp; os, <span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp; x);<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// ! __Complex__</span></span><br></code></pre></td></tr></table></figure><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>在类中声明的函数都是inline函数（编译时直接代码替换，不调用函数，不过对于代码量太大的函数也可能忽略inline关键字，！！inline和constexpr必须放在头文件中）</p></li><li><p>类内函数默认传入this指针形参（this指向类自身）</p></li><li><p>构造函数用参数化列表性能要远高于=赋值</p></li><li><p>形参是&amp;引用<strong>是否加const（修改？）</strong>？</p></li><li><p>什么时候<code>return by refrence</code>？什么时候<code>return by value</code>？</p></li><li><p>对于不修改类的数据的函数，<strong>一律在括号后面加const</strong>,将this指针从 <code>int *const不让修改指针指向</code>转化成 <code>const int *const类型即不让修改指针指向，也不让修改指针所指向的数据</code></p></li><li><p>friend可以自由获取该类的private，<code>相同类的对象互为友元</code></p></li></ul><h3 id="cpp文件-源码"><a href="#cpp文件-源码" class="headerlink" title="cpp文件 源码"></a>cpp文件 源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Complex.h&quot;</span></span><br><span class="hljs-comment">//复数可以加实数，实数也可以加复数，如果定义在类中就会受限</span><br><span class="hljs-keyword">inline</span> <span class="hljs-built_in">complex</span> <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp; x, <span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp; y)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">complex</span>(x.real() + y.real(), x.imag() + y.imag());<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-built_in">complex</span> <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp; x, <span class="hljs-keyword">int</span> y)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">complex</span>(x.real() + y, x.imag());<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-built_in">complex</span> <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp; y)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">complex</span>(x + y.real(), y.imag());<br>&#125;<br><br><span class="hljs-comment">//两个复数类相加</span><br><span class="hljs-keyword">inline</span> <span class="hljs-built_in">complex</span>&amp; __doapl(<span class="hljs-built_in">complex</span>* ths, <span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp; r)<br>&#123;<br>ths-&gt;re += r.re;<br>ths-&gt;im += r.im;<br><span class="hljs-keyword">return</span> *ths;<br>&#125;<br><br><span class="hljs-keyword">inline</span> <span class="hljs-built_in">complex</span>&amp; <span class="hljs-built_in">complex</span>::<span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp; r)<br>&#123;<br><span class="hljs-keyword">return</span> __doapl(<span class="hljs-keyword">this</span>, r);<br>&#125;<br><br><span class="hljs-comment">//操作符重载,可以连续调用 cout&lt;&lt;c1&lt;&lt;endl，所以返回值不能为void</span><br>ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt;(ostream&amp; os, <span class="hljs-keyword">const</span> <span class="hljs-built_in">complex</span>&amp; x)<br>&#123;<br><span class="hljs-keyword">return</span> os &lt;&lt; <span class="hljs-string">&#x27;(&#x27;</span> &lt;&lt; x.real() &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; x.imag() &lt;&lt; <span class="hljs-string">&#x27;)&#x27;</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="🌿-String"><a href="#🌿-String" class="headerlink" title="🌿 String"></a>🌿 String</h2><h3 id="h文件源码-1"><a href="#h文件源码-1" class="headerlink" title="h文件源码"></a>h文件源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __String__</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __String__</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;iostream.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>String(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* cstr);<br>String(<span class="hljs-keyword">const</span> String&amp; str);<br>String&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> String&amp; str);<br>~String();<br><span class="hljs-comment">//是否改动数据？__:加const </span><br><span class="hljs-comment">//隐式this指针:string *const </span><br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">get_c_str</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_data; &#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">char</span>* m_data;<br>&#125;;<br><br><span class="hljs-comment">//定义在类中的函数都是内联的，而在类外则需要加入修饰符  </span><br><span class="hljs-comment">//！！inline一定要放在头文件内</span><br><span class="hljs-comment">//因为函数定义成inline，所以就没写cpp文件</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">String::String</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* cstr = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (cstr)<br>&#123;<br>m_data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(cstr) + <span class="hljs-number">1</span>];<br>strcpy_s(m_data, <span class="hljs-built_in">strlen</span>(cstr) + <span class="hljs-number">1</span>, cstr);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>m_data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1</span>];<br>*m_data = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">String::String</span><span class="hljs-params">(<span class="hljs-keyword">const</span> String&amp; str)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//c语言风格最后有一个&#x27;\0&#x27;,strcpy_s中间参数是缓冲区大小</span><br>m_data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(str.m_data) + <span class="hljs-number">1</span>];<br>strcpy_s(m_data, <span class="hljs-built_in">strlen</span>(str.m_data) + <span class="hljs-number">1</span>, str.m_data);<br>&#125;<br><br><span class="hljs-keyword">inline</span> String::~String()<br>&#123;<br><span class="hljs-keyword">delete</span>[] m_data;<br>&#125;<br><br><span class="hljs-comment">//如果函数返回值为void，则不支持连串赋值</span><br><span class="hljs-keyword">inline</span> String&amp; String::<span class="hljs-keyword">operator</span>= (<span class="hljs-keyword">const</span> String&amp; str)<br>&#123;<br><span class="hljs-comment">//必须要判断自我复制，因为以后操作是先delete再cpy</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == &amp;str)<br>&#123;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-keyword">delete</span>[] m_data;<br>m_data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>(<span class="hljs-built_in">strlen</span>(str.m_data) + <span class="hljs-number">1</span>);<br>strcpy_s(m_data, <span class="hljs-built_in">strlen</span>(str.m_data) + <span class="hljs-number">1</span>, str.m_data);<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="带指针类的Big-Three"><a href="#带指针类的Big-Three" class="headerlink" title="带指针类的Big Three"></a>带指针类的Big Three</h3><ul><li><strong>拷贝构造</strong>：String(const String&amp; str)</li><li><strong>拷贝复制</strong>：String&amp; operator=(const String&amp; str)</li><li><strong>析构</strong>：~String()</li></ul><p><img src=".\4.png" alt="class with pointer member必須有copy ctor和copy p="></p><blockquote><p>深拷贝（数据全部拷贝过去），浅拷贝（两个指针指向同一块内存）</p></blockquote><p><img src=".\5.png" alt="一定要在operator=中檢查是否self assignment"></p><h3 id="new和delete"><a href="#new和delete" class="headerlink" title="new和delete"></a>new和delete</h3><ul><li>new：先分配 memory, 再調用 ctor</li><li>delete：先調用 dtor, 再釋放 memory</li></ul><p><img src=".\6.png" alt="new Complex"></p><p><img src=".\7.png" alt="delete complex"></p><blockquote><p>new（分配内存-&gt;转型-&gt;构造函数）  C语法: Complex <em>pc=(Complex </em>)malloc(sizeof(Complex));  pc-&gt;Comlex::Complex(1,2)</p><p> delete(析构-&gt;释放内存)</p></blockquote><p><img src=".\8.png" alt="new String"></p><p><img src=".\9.png" alt="delete String"></p><h3 id="Stack（栈）和Heap（堆）"><a href="#Stack（栈）和Heap（堆）" class="headerlink" title="Stack（栈）和Heap（堆）"></a>Stack（栈）和Heap（堆）</h3><ul><li><strong>Stack</strong>：是存在於某作用域 (scope) 的一塊內存空間 (memory space)。例如當你調用函數，函數本身即會形成一個 stack 用來放置它所接收的參數，以及返回地址。 在函數本體 (function body) 內聲明的任何變量， 其所使用的內存塊都取自上述 stack。<strong>stack object其生命在作用域 (scope) 結束之際結束</strong>。</li><li><strong>Heap</strong>：或謂 system heap，是指由操作系統提供的一塊 global 內存空間，程序可動態分配 (dynamic allocated) 從某中獲得若干區塊 (blocks)，<strong>heap object其生命 在它被 deleted 之際結束</strong>，使用<strong>new动态分配的内存一定要delete释放</strong>，否则会出现内存泄漏（memory leak）。</li></ul><h3 id="VC动态分配内存块（了解）"><a href="#VC动态分配内存块（了解）" class="headerlink" title="VC动态分配内存块（了解）"></a>VC动态分配内存块（了解）</h3><p><img src=".\10.png" alt="内存分配，再debug和release模式下"></p><blockquote><p>注意区分 代码区和数据区，object的函数全部放在类共用代码区，所以分配内存块只分配数据的内存。VC编译器分配内存的习惯是16字节对齐</p></blockquote><p><img src=".\11.png" alt="数组对象的内存分配"></p><h3 id="array-new搭配array-delete"><a href="#array-new搭配array-delete" class="headerlink" title="array new搭配array delete"></a>array new搭配array delete</h3><p><img src=".\12.png" alt=""></p><h2 id="🌿补充"><a href="#🌿补充" class="headerlink" title="🌿补充"></a>🌿补充</h2><h3 id="关键字static"><a href="#关键字static" class="headerlink" title="关键字static"></a>关键字static</h3><p>static全局变量只能在本文件中使用，不能被extern其他文件，</p><p>静态成员函数没有this point只能去处理静态data</p><p><img src=".\13.png" alt=""></p><h4 id="例子（银行利率）"><a href="#例子（银行利率）" class="headerlink" title="例子（银行利率）"></a>例子（银行利率）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> m_rate;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set_rate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span>&amp; x)</span> </span>&#123; m_rate = x; &#125;<br>&#125;;<br><span class="hljs-keyword">double</span> Account::m_rate = <span class="hljs-number">8.0</span>;<br><br><span class="hljs-comment">//调用static函数的两种方式</span><br><span class="hljs-comment">//1.通过object调用</span><br><span class="hljs-comment">//2.通过class name 调用</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Account::set_rate(<span class="hljs-number">9.0</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; Account::m_rate;<br>Account a;<br>a.set_rate(<span class="hljs-number">8.5</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; a.m_rate;<br>a.m_rate = <span class="hljs-number">4.0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; a.m_rate;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h4><p><img src=".\14.png" alt=""></p><h3 id="模板template"><a href="#模板template" class="headerlink" title="模板template"></a>模板template</h3><p><img src=".\15.png" alt="类模板"></p><p><img src=".\16.png" alt="函数模板"></p><ul><li>Class 自定义类</li><li>typename 使用内置类型</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-侯捷 -面对对象的高级开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>王道数据结构_第二章线性表</title>
    <link href="/2021/01/30/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2021/01/30/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="线性表-linear-list"><a href="#线性表-linear-list" class="headerlink" title="线性表(linear list)"></a>线性表(linear list)</h1><p><strong>逻辑结构、数据运算、存储结构</strong></p><h3 id="🎈定义"><a href="#🎈定义" class="headerlink" title="🎈定义"></a>🎈定义</h3><p>线性表是具有<strong>相同数据类型</strong>的n（n&gt;=0）个数据元素的<strong>有限 序列</strong>，其中n为表长，当n=0时线性表是一个空表。若L命令线性表，则其一般表示为</p><script type="math/tex; mode=display">L=(a_1,a_2,...,a_i,a_{i+1},a_n)</script><p><img src=".\1.png" alt=""></p><h3 id="🎉基本运算"><a href="#🎉基本运算" class="headerlink" title="🎉基本运算"></a>🎉基本运算</h3><p><img src=".\2.png" alt=""></p><h2 id="🌿顺序表"><a href="#🌿顺序表" class="headerlink" title="🌿顺序表"></a>🌿顺序表</h2><h3 id="🎈定义-1"><a href="#🎈定义-1" class="headerlink" title="🎈定义"></a>🎈定义</h3><p><strong>线性表的顺序存储</strong>称为顺序表。逻辑上相邻的元素物理位置也相邻</p><p><img src=".\3.png" alt=""></p><h4 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/***** 静态分配 ******/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10      <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize];  <span class="hljs-comment">//静态的&quot;数组&quot;存放数据元素</span><br>    <span class="hljs-keyword">int</span> length;         <span class="hljs-comment">//顺序表当前长度</span><br>&#125;SqList;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br>    &#123;<br>        L.data[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    L.length = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><p><strong>malloc函数：</strong></p><script type="math/tex; mode=display">L.data = (ElemType *)malloc(sizeof(ElemType)*InitSize);</script><ol><li>开辟<code>InitSize</code>×<code>sizeof（）</code>大小的内存区域</li><li>将其强制类型转化为<code>该类型</code>指针，返回该内存地址的首地址</li></ol><p><strong>new函数（c++）：</strong></p><script type="math/tex; mode=display">L.data = new \quad ElemType[InitSize];</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/***** 动态分配 ******/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> InitSize 10     <span class="hljs-comment">//定义初始长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> *Data;          <span class="hljs-comment">//动态分配数组的指针</span><br>    <span class="hljs-keyword">int</span> MaxSize;        <span class="hljs-comment">//最大长度</span><br>    <span class="hljs-keyword">int</span> Length;         <span class="hljs-comment">//当前长度</span><br>&#125;SeqList;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SeqList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>    L.Data = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(InitSize * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    L.Length = <span class="hljs-number">0</span>;<br>    L.MaxSize = InitSize;<br>&#125;  <br><br><span class="hljs-comment">//顺序表满时，再用malloc动态拓展顺序的最大容量</span><br><span class="hljs-comment">//将数据元素复制到新的存储区域，并用free函数释放原区域</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SeqList&amp; L, <span class="hljs-keyword">int</span> Len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span>* P = L.Data;<br>    <span class="hljs-comment">//l存data的整个内存空间发生了转移，复制复制到了新的区域</span><br>    L.Data = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>((l.MaxSize + Len) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;L.Length; i++)<br>    &#123;<br>        L.Data[i] = P[i];<br>    &#125;<br>    L.MaxSize += Len;<br>    <span class="hljs-built_in">free</span>(P);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>随机访问，可以在O(1)时间内找到第<code>i</code>个元素</li><li>存储密度高，每个结点只存储数据元素</li><li>插入删除，拓展容量等操作不方便</li></ul><h3 id="🎉顺序表上的基本操作"><a href="#🎉顺序表上的基本操作" class="headerlink" title="🎉顺序表上的基本操作"></a>🎉顺序表上的基本操作</h3><h4 id="ListInsert-amp-L-i-e"><a href="#ListInsert-amp-L-i-e" class="headerlink" title="ListInsert(&amp;L,i,e)"></a>ListInsert(&amp;L,i,e)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//时间复杂度最好O(1)，最坏时间复杂度O(n)，平均O(N/2)=O(N)</span><br><span class="hljs-comment">//插入的元素依次后移，填上空挡</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList&amp; L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//存储空间已经满了</span><br>    <span class="hljs-keyword">if</span> (L.length&gt;=MaxSize)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//插入位置有问题</span><br>    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span>||i&gt;L.length+<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = L.length; k &gt; i; k--)<br>    &#123;<br>        L.data[k] = L.data[k - <span class="hljs-number">1</span>];<br>    &#125;<br>    L.data[i - <span class="hljs-number">1</span>] = e;<br>    L.length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ListDelete-amp-L-i-amp-e"><a href="#ListDelete-amp-L-i-amp-e" class="headerlink" title="ListDelete(&amp;L,i,&amp;e)"></a>ListDelete(&amp;L,i,&amp;e)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//时间复杂度最好O(1)，最坏时间复杂度O(n)，平均O(N/2)=O(N)</span><br><span class="hljs-comment">//删除的元素依次前移，填上空挡</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList&amp; L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i&lt;i||i&gt;L.length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e = L.data[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt; L.length; k++)<br>    &#123;<br>        L.data[i - <span class="hljs-number">1</span>] = L.data[i];<br>    &#125;<br>    L.length--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Get-LocateElem-L-e"><a href="#Get-LocateElem-L-e" class="headerlink" title="Get/LocateElem(L,e)"></a>Get/LocateElem(L,e)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/***** 按位查找 ******/</span>  <br><span class="hljs-function">ElemType <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList L, <span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> L.data[i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-comment">/***** 按值查找 ******/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList L, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (L.data[i]==e)<br>        &#123;<br>            <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>结构体ElemType不能直接比较大小，要比较结构体内元素的大小，当然在c++中可以用重载。</p></blockquote><h2 id="🌿单链表"><a href="#🌿单链表" class="headerlink" title="🌿单链表"></a>🌿单链表</h2><h3 id="🎈定义-2"><a href="#🎈定义-2" class="headerlink" title="🎈定义"></a>🎈定义</h3><p><img src=".\4.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/***** 定义 ******/</span><br><span class="hljs-comment">//两种表示方法</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    ElemType data;       <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>* <span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//指针域</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> <span class="hljs-title">LNode</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">LinkList</span>;</span><br><br><span class="hljs-comment">//书上的方式二，更为简洁</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    ElemType data;       <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>* <span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//指针域</span><br>&#125;LNode, * LinkList;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//为什么要定义两个结点指针</span><br><span class="hljs-comment">//强调可读性，一个表示这个是结点的指针，一个表示是List</span><br>LNode* L;<br>LinkList L;<br></code></pre></td></tr></table></figure><h4 id="不带头结点的单链表"><a href="#不带头结点的单链表" class="headerlink" title="不带头结点的单链表"></a>不带头结点的单链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//不带头结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList&amp; L)</span> </span>&#123;<br>    <span class="hljs-comment">//指针置空</span><br>    L = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span>(L == <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="带头结点"><a href="#带头结点" class="headerlink" title="带头结点"></a>带头结点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//带头结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList&amp; L)</span> </span>&#123;<br>    L = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span> (L==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    L-&gt;next == <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🎉单链表上的基本操作"><a href="#🎉单链表上的基本操作" class="headerlink" title="🎉单链表上的基本操作"></a>🎉单链表上的基本操作</h3><h4 id="指定位插入结点"><a href="#指定位插入结点" class="headerlink" title="指定位插入结点"></a>指定位插入结点</h4><p><img src=".\5.png" alt="带头结点的链表"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-keyword">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/** 找到第i-1个结点 LNode *p=GetElem(L,i-1) **/</span><br>    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode* p=L;<br>    <span class="hljs-comment">//使p指向i-1个结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;i<span class="hljs-number">-1</span> &amp;&amp; p!=<span class="hljs-literal">NULL</span>; j++)<br>    &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">/** 在p后面插入新元素 return InsertNextNode(p,e)**/</span><br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode* node = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    node-&gt;data = e;<br>    node-&gt;next = p-&gt;next;<br>    p-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\6.png" alt="不带头结点的链表在表首的插入"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-keyword">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//在表首部插入</span><br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)<br>    &#123;<br>        LNode* node = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        node-&gt;data = e;<br>        node-&gt;next = L;<br>        L = node;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    LNode* p = L;<br>    <span class="hljs-comment">//使得p指向i-1个结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i - <span class="hljs-number">1</span> &amp;&amp; p != <span class="hljs-literal">NULL</span>; j++)<br>    &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode* node = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    node-&gt;data = e;<br>    node-&gt;next = p-&gt;next;<br>    p-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后插元素"><a href="#后插元素" class="headerlink" title="后插元素"></a>后插元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode* p, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode* node = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-comment">//内存满了分配不成功</span><br>    <span class="hljs-keyword">if</span> (node==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    node-&gt;data = e;<br>    node-&gt;next = p-&gt;next;<br>    p-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前插元素"><a href="#前插元素" class="headerlink" title="前插元素"></a>前插元素</h4><p><img src=".\7.png" alt="数据交换"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertPriorNode</span><span class="hljs-params">(LNode* p, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode* node = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-comment">//连接链表</span><br>    node-&gt;next = p-&gt;next;<br>    p-&gt;next = node;<br>    <span class="hljs-comment">//交换数据</span><br>    node-&gt;data = p-&gt;data;<br>    p-&gt;data = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除指定位"><a href="#删除指定位" class="headerlink" title="删除指定位"></a>删除指定位</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-keyword">int</span> i, ElemType&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode* p = L;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j&lt;i<span class="hljs-number">-1</span> &amp;&amp; p!=<span class="hljs-literal">NULL</span>; j++)<br>    &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//i值不合法，和i-1后面已经没有结点</span><br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span> || p-&gt;next==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//保持q结点以用于释放内存（q为被删除结点）</span><br>    LNode* q = p-&gt;next;<br>    e = q-&gt;data;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除指定结点"><a href="#删除指定结点" class="headerlink" title="删除指定结点"></a>删除指定结点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNode</span><span class="hljs-params">(LNode* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    LNode* q = p-&gt;next;<br>    p-&gt;data = p-&gt;next-&gt;data;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\8.png" alt=""></p><p><img src=".\9.png" alt=""></p><p><img src=".\9.5.png" alt=""></p><p><img src=".\10.png" alt="小bug，末尾是null必须从头结点开始扫"></p><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LNode* <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">//头结点是第0个结点</span><br>    LNode* p=L;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;i &amp;&amp; p!=<span class="hljs-literal">NULL</span>; j++)<br>    &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a><strong>按值查找</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LNode* <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkList L, ELemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    LNode* p = L-&gt;next;<br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> || p-&gt;data!=e)<br>    &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//找到后返回p，否则返回NULL</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="求表长"><a href="#求表长" class="headerlink" title="求表长"></a>求表长</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(LinkList L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    LNode* p = L;<br>    <span class="hljs-keyword">while</span> (p-&gt;next!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        p = p-&gt;next;<br>        len++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🌹单链表的创立"><a href="#🌹单链表的创立" class="headerlink" title="🌹单链表的创立"></a>🌹单链表的创立</h3><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LinkList <span class="hljs-title">List_TailInsert</span><span class="hljs-params">(LinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    LNode* s, * r = L;<br>    scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    <span class="hljs-keyword">while</span> (x!=<span class="hljs-number">9999</span>)<br>    &#123;<br>        s = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = x;<br>        r-&gt;next = s;<br>        r = s;<br>        scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="头插法（链表逆置）"><a href="#头插法（链表逆置）" class="headerlink" title="头插法（链表逆置）"></a>头插法（链表逆置）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LinkList <span class="hljs-title">List_HeadInsert</span><span class="hljs-params">(LinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>    LNode* s;<br>    <span class="hljs-keyword">int</span> x;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br>    scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">9999</span>)<br>    &#123;<br>        s = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = x;<br>        s-&gt;next = L-&gt;next;<br>        L-&gt;next = s;<br>        scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\11.png" alt="没有L-&gt;next = NULL"></p><ul><li>扫描链表用其元素头插塞到新链表之中</li><li>从末尾取结点，重新头插回结点之中</li></ul><h2 id="🌿双向链表"><a href="#🌿双向链表" class="headerlink" title="🌿双向链表"></a>🌿双向链表</h2><h3 id="🎈定义-3"><a href="#🎈定义-3" class="headerlink" title="🎈定义"></a>🎈定义</h3><p><img src=".\12.png" alt="image-20210130205954514"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span>&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span>* <span class="hljs-title">prior</span>, * <span class="hljs-title">next</span>;</span><br>&#125;DNode,*DLinkList;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitDLinkList</span><span class="hljs-params">(DLinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>    L = (DNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DNode));<br>    L-&gt;prior = <span class="hljs-literal">NULL</span>;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinkList L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (L-&gt;next);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🎉基本操作"><a href="#🎉基本操作" class="headerlink" title="🎉基本操作"></a>🎉基本操作</h3><h4 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h4><p><img src=".\13.png" alt=""><br><img src=".\14.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//插入结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextDNode</span><span class="hljs-params">(DNode* p, DNode* s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>||s==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;next = p-&gt;next;<br>    <span class="hljs-keyword">if</span> (s-&gt;next!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        s-&gt;next-&gt;prior = s;<br>    &#125;<br>    s-&gt;prior = p;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><ul><li><strong>在结点p前插入一个结点</strong>：只需要p-&gt;prior找到它的前驱结点，然后再执行后插操作</li><li><strong>位序i前插入</strong>，从头结点开始找到i-1号结点，对结点实行后插操作。</li></ul><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p><img src=".\15.png" alt=""></p><p><img src=".\16.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//删除q的后继结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNextDNode</span><span class="hljs-params">(DNode* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    DNode* q = p-&gt;next;<br>    <span class="hljs-keyword">if</span> (q==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-keyword">if</span> (p-&gt;next!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        q-&gt;next-&gt;prior = p;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestoryList</span><span class="hljs-params">(DLinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (L-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        DeleteNextDNode(L);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(L);<br>    L = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\17.png" alt="遍历"></p><h2 id="🌿循环链表"><a href="#🌿循环链表" class="headerlink" title="🌿循环链表"></a>🌿循环链表</h2><h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><p><img src=".\18.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//链表初始化</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitDLinkList</span><span class="hljs-params">(LinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>    L = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    L-&gt;next = L;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(LinkList L, LNode* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (p-&gt;next==L)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\19.png" alt="循环遍历"></p><h3 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h3><p><img src=".\20.png" alt=""></p><p><img src=".\21.png" alt=""></p><p><img src=".\22.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//后面插入结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextDNode</span><span class="hljs-params">(DNode* p, DNode* s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>||s==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;next = p-&gt;next;<br>        s-&gt;next-&gt;prior = s;<span class="hljs-comment">//这句和非循环链表不一样</span><br>    s-&gt;prior = p;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//后面删除结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNextDNode</span><span class="hljs-params">(DNode* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    DNode* q = p-&gt;next;<br>    p-&gt;next = q-&gt;next;<br>    q-&gt;next-&gt;prior = p;  <span class="hljs-comment">//这句不一样</span><br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🌿静态链表"><a href="#🌿静态链表" class="headerlink" title="🌿静态链表"></a>🌿静态链表</h2><p><img src=".\23.png" alt=""></p><blockquote><p>初始化： a[0]设为-1 ，其他结点设置一个特殊值表示空闲如-2</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-keyword">int</span> next;<br>&#125;SLinkList[MaxSize];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    ElemType data;<br>    <span class="hljs-keyword">int</span> next;<br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> <span class="hljs-title">SLinkList</span>[<span class="hljs-title">MaxSize</span>]</span><br></code></pre></td></tr></table></figure><blockquote><p>应用：操作系统文件分配表FAT</p></blockquote><h2 id="🌿顺序表和链表的比较"><a href="#🌿顺序表和链表的比较" class="headerlink" title="🌿顺序表和链表的比较"></a>🌿顺序表和链表的比较</h2><p><img src=".\24.png" alt="创建"></p><p><img src=".\25.png" alt="销毁"></p><p><img src=".\26.png" alt="插入删除"></p><p><img src=".\27.png" alt="查找"></p><h2 id="🦊思维导图"><a href="#🦊思维导图" class="headerlink" title="🦊思维导图"></a>🦊思维导图</h2><p><img src=".\-1.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-考研 -王道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoF_对象创建模式</title>
    <link href="/2021/01/27/GoF-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/01/27/GoF-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="对象创建”-模式"><a href="#对象创建”-模式" class="headerlink" title="对象创建” 模式"></a>对象创建” 模式</h1><p>通过“对象创建” 模式绕开new，来<strong>避免对象创建（new）过程中所导致的紧耦合</strong>（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><p><strong>典型模式</strong>：</p><ul><li>Factory Method</li><li>Abstract Factory</li><li>Prototype</li><li>Builder</li></ul><h2 id="🌿Factory-Method（工厂方法）"><a href="#🌿Factory-Method（工厂方法）" class="headerlink" title="🌿Factory Method（工厂方法）"></a>🌿Factory Method（工厂方法）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义一个用于<strong>创建对象的接口</strong>，让<strong>子类决定实例化哪一个类</strong>。 Factory Method使得一个类的<strong>实例化延迟</strong>（<strong>目的：解耦， 手段：虚函数</strong>）到子类。</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><ul><li>在软件系统中，经常面临着创建对象的工作；由于需求的变化， <strong>需要创建的对象的具体类型经常变化</strong>。</li><li>如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一 种“封装机制”来避免客户程序和这种“具体对象创建工作”的紧耦合？</li></ul><h3 id="样例👇（文件分割器）"><a href="#样例👇（文件分割器）" class="headerlink" title="样例👇（文件分割器）"></a>样例👇（文件分割器）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 1</span><br><span class="hljs-comment">/*FileSplitter1.cpp*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ISplitter</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~ISplitter()&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySplitter</span> :</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TxtSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PictureSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br>    <br>&#125;;<br><br><span class="hljs-comment">/*****************************************************/</span><br><span class="hljs-comment">/*MainForm1.cpp*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form<br>&#123;<br>TextBox* txtFilePath;<br>TextBox* txtFileNumber;<br>ProgressBar* progressBar;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Button1_Click</span><span class="hljs-params">()</span></span>&#123;<br><br><br><span class="hljs-comment">//ISplitter 面向接口编程</span><br>        <span class="hljs-comment">//依赖具体类,抽象依赖具体实现，即BinarySplitter</span><br>ISplitter * splitter=<br>            <span class="hljs-keyword">new</span> BinarySplitter();<br>        <br>        splitter-&gt;split();<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>方法一中 MainForm1编译依赖于FileSplitter1，违反依赖倒置原则，当需要创建的对象改变时，MainForm1.cpp文件也会发生改变</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 2</span><br><span class="hljs-comment">/*ISplitterFactory.cpp*/</span><br><span class="hljs-comment">//抽象类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ISplitter</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~ISplitter()&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-comment">//工厂基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SplitterFactory</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">CreateSplitter</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~SplitterFactory()&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">/*********************************************************************/</span><br><span class="hljs-comment">/*ISplitter.cpp*/</span><br><span class="hljs-comment">//具体类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySplitter</span> :</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TxtSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PictureSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br>    <br>&#125;;<br><br><span class="hljs-comment">//具体工厂</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySplitterFactory</span>:</span> <span class="hljs-keyword">public</span> SplitterFactory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">CreateSplitter</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BinarySplitter();<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TxtSplitterFactory</span>:</span> <span class="hljs-keyword">public</span> SplitterFactory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">CreateSplitter</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TxtSplitter();<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PictureSplitterFactory</span>:</span> <span class="hljs-keyword">public</span> SplitterFactory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">CreateSplitter</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PictureSplitter();<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoSplitterFactory</span>:</span> <span class="hljs-keyword">public</span> SplitterFactory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">CreateSplitter</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> VideoSplitter();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/************************************************************************/</span><br><span class="hljs-comment">/*MainForm2.cpp*/</span><br><span class="hljs-comment">// ！！！MainForm现在只依赖抽象基类，不依赖具体类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form<br>&#123;<br>    SplitterFactory*  factory;<span class="hljs-comment">//工厂</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//只依赖与外界传来的Splitter类型，根据外界传来的类型多态创建</span><br>    MainForm(SplitterFactory*  factory)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;factory=factory;<br>    &#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Button1_Click</span><span class="hljs-params">()</span></span>&#123;<br><br>        <br>ISplitter * splitter=<br>            factory-&gt;CreateSplitter(); <span class="hljs-comment">//多态new</span><br>        <br>        splitter-&gt;split();<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src=".\structrue.png" alt=""></p><h3 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>Factory Method模式用于<strong>隔离类对象的使用者和具体类型之间的耦合关系</strong>。面对一个经常变化的具体类型，紧耦合关系(new)会导致软件的脆弱。</li><li>Factory Method模式通过面向对象的手法（<strong>多态</strong>），将所要创建的<strong>具体对象工作延迟到子类</strong>，从而实现一种<strong>扩展（而非更改）</strong>的策略，较好 地解决了这种紧耦合关系。 </li><li>Factory Method模式解决“单个对象”的需求变化。缺点在于要求<strong>创建方法/参数相同</strong>。</li></ul><h2 id="🌿Abstract-Factory（抽象工厂）"><a href="#🌿Abstract-Factory（抽象工厂）" class="headerlink" title="🌿Abstract Factory（抽象工厂）"></a>🌿Abstract Factory（抽象工厂）</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>提供一个接口，让该接口负责创建<strong>一系列“相关或者相互依赖的对象”</strong>，无需指定它们具体的类。</p><h3 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h3><p>在软件系统中，经常面临着“<strong>一系列相互依赖的对象</strong>”的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作。 </p><p>如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一 种“封装机制”来避免客户程序和这种“多系列具体对象创建工作” 的紧耦合？</p><h3 id="样例👇（写数据访问）"><a href="#样例👇（写数据访问）" class="headerlink" title="样例👇（写数据访问）"></a>样例👇（写数据访问）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 1 直接创建</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeDAO</span>&#123;</span><br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;EmployeeDO&gt; <span class="hljs-title">GetEmployees</span><span class="hljs-params">()</span></span>&#123;<br>        SqlConnection* connection =<br>            <span class="hljs-keyword">new</span> SqlConnection();<br>        connection-&gt;ConnectionString = <span class="hljs-string">&quot;...&quot;</span>;<br><br>        SqlCommand* command =<br>            <span class="hljs-keyword">new</span> SqlCommand();<br>        command-&gt;CommandText=<span class="hljs-string">&quot;...&quot;</span>;<br>        command-&gt;SetConnection(connection);<br><br>        SqlDataReader* reader = command-&gt;ExecuteReader();<br>        <span class="hljs-keyword">while</span> (reader-&gt;Read())&#123;<br><br>        &#125;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// method 2 工厂方法</span><br><span class="hljs-comment">//数据库访问有关的基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBConnection</span>&#123;</span><br>    <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBConnectionFactory</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBConnection* <span class="hljs-title">CreateDBConnection</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBCommand</span>&#123;</span><br>    <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBCommandFactory</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBCommand* <span class="hljs-title">CreateDBCommand</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDataReader</span>&#123;</span><br>    <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDataReaderFactory</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDataReader* <span class="hljs-title">CreateDataReader</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><br><br><span class="hljs-comment">//具体实现</span><br><br><span class="hljs-comment">//支持SQL Server</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlConnection</span>:</span> <span class="hljs-keyword">public</span> IDBConnection&#123;<br>    <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlConnectionFactory</span>:</span><span class="hljs-keyword">public</span> IDBConnectionFactory&#123;<br>    <br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlCommand</span>:</span> <span class="hljs-keyword">public</span> IDBCommand&#123;<br>    <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlCommandFactory</span>:</span><span class="hljs-keyword">public</span> IDBCommandFactory&#123;<br>    <br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlDataReader</span>:</span> <span class="hljs-keyword">public</span> IDataReader&#123;<br>    <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlDataReaderFactory</span>:</span><span class="hljs-keyword">public</span> IDataReaderFactory&#123;<br>    <br>&#125;;<br><br><span class="hljs-comment">//支持Oracle</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleConnection</span>:</span> <span class="hljs-keyword">public</span> IDBConnection&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleCommand</span>:</span> <span class="hljs-keyword">public</span> IDBCommand&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleDataReader</span>:</span> <span class="hljs-keyword">public</span> IDataReader&#123;<br>    <br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeDAO</span>&#123;</span><br>    IDBConnectionFactory* dbConnectionFactory;<br>    IDBCommandFactory* dbCommandFactory;<br>    IDataReaderFactory* dataReaderFactory;<br>    <br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;EmployeeDO&gt; <span class="hljs-title">GetEmployees</span><span class="hljs-params">()</span></span>&#123;<br>        IDBConnection* connection =<br>            dbConnectionFactory-&gt;CreateDBConnection();<br>        connection-&gt;ConnectionString(<span class="hljs-string">&quot;...&quot;</span>);<br><br>        IDBCommand* command =<br>            dbCommandFactory-&gt;CreateDBCommand();<br>        command-&gt;CommandText(<span class="hljs-string">&quot;...&quot;</span>);<br>        command-&gt;SetConnection(connection); <span class="hljs-comment">//关联性</span><br><br>        IDBDataReader* reader = command-&gt;ExecuteReader(); <span class="hljs-comment">//关联性</span><br>        <span class="hljs-keyword">while</span> (reader-&gt;Read())&#123;<br><br>        &#125;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>问题 dbConnection、dbCommand、dataReader存在关联性，如果传过来的参数不一样怎么办？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Method 3 抽象工厂（family）</span><br><span class="hljs-comment">//数据库访问有关的基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBConnection</span>&#123;</span><br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBCommand</span>&#123;</span><br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDataReader</span>&#123;</span><br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBFactory</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBConnection* <span class="hljs-title">CreateDBConnection</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBCommand* <span class="hljs-title">CreateDBCommand</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDataReader* <span class="hljs-title">CreateDataReader</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <br>&#125;;<br><br><span class="hljs-comment">//具体实现</span><br><span class="hljs-comment">//支持SQL Server</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlConnection</span>:</span> <span class="hljs-keyword">public</span> IDBConnection&#123;<br>    <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlCommand</span>:</span> <span class="hljs-keyword">public</span> IDBCommand&#123;<br>    <br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlDataReader</span>:</span> <span class="hljs-keyword">public</span> IDataReader&#123;<br>    <br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlDBFactory</span>:</span><span class="hljs-keyword">public</span> IDBFactory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBConnection* <span class="hljs-title">CreateDBConnection</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBCommand* <span class="hljs-title">CreateDBCommand</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> IDataReader* <span class="hljs-title">CreateDataReader</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br> <br>&#125;;<br><br><span class="hljs-comment">//支持Oracle</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleConnection</span>:</span> <span class="hljs-keyword">public</span> IDBConnection&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleCommand</span>:</span> <span class="hljs-keyword">public</span> IDBCommand&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleDataReader</span>:</span> <span class="hljs-keyword">public</span> IDataReader&#123;<br>    <br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeDAO</span>&#123;</span><br>    IDBFactory* dbFactory;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;EmployeeDO&gt; <span class="hljs-title">GetEmployees</span><span class="hljs-params">()</span></span>&#123;<br>        IDBConnection* connection =<br>            dbFactory-&gt;CreateDBConnection();<br>        connection-&gt;ConnectionString(<span class="hljs-string">&quot;...&quot;</span>);<br><br>        IDBCommand* command =<br>            dbFactory-&gt;CreateDBCommand();<br>        command-&gt;CommandText(<span class="hljs-string">&quot;...&quot;</span>);<br>        command-&gt;SetConnection(connection); <span class="hljs-comment">//关联性</span><br><br>        IDBDataReader* reader = command-&gt;ExecuteReader(); <span class="hljs-comment">//关联性</span><br>        <span class="hljs-keyword">while</span> (reader-&gt;Read())&#123;<br><br>        &#125;<br><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p><img src=".\structrue2.png" alt=""></p><h3 id="要点总结-1"><a href="#要点总结-1" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>如果<strong>没有应对“多系列对象构建”</strong>的需求变化，则没有必要使用Abstract Factory模式，这时候使用简单的工厂完全可以。</li><li>“系列对象”指的是在某一特定系列下的对象之间<strong>有相互依赖、 或作用的关系</strong>。不同系列的对象之间不能相互依赖。 </li><li>Abstract Factory模式主要在于<strong>应对“新系列”</strong>的需求变动。其缺 点在于<strong>难以应对“新对象”</strong>的需求变动。</li></ul><h2 id="🌿Prototype（原型模式）"><a href="#🌿Prototype（原型模式）" class="headerlink" title="🌿Prototype（原型模式）"></a>🌿Prototype（原型模式）</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>使用原型实例指定创建对象的种类，然后拷贝这些原型创建新对象。 </p><h3 id="动机-2"><a href="#动机-2" class="headerlink" title="动机"></a>动机</h3><ul><li>在软件系统中，经常面临着“<strong>某些结构复杂的对象</strong>”的<strong>创建工作</strong>；由于需求的变化，这些对象经常面临着剧烈的变化，但是却拥有比较稳定一致的接口</li><li>如何应对这种变化？如何向“客户程序（使用这些对象的程序）”隔离出“这些易变对象，从而使得”依赖这些易变对象的客户程序“不随着需求发生改变？</li></ul><h3 id="样例（工厂的那个文件分割器）👇"><a href="#样例（工厂的那个文件分割器）👇" class="headerlink" title="样例（工厂的那个文件分割器）👇"></a>样例（工厂的那个文件分割器）👇</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//👇为Prototype   ！！注意观察与工厂模式的区别</span><br><span class="hljs-comment">//抽象类 Prototype.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ISplitter</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>; <span class="hljs-comment">//通过克隆自己来创建对象</span><br>    <br>    <span class="hljs-keyword">virtual</span> ~ISplitter()&#123;&#125;<br><br>&#125;;<br><br><br><span class="hljs-comment">//具体类 ConcretePrototype.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySplitter</span> :</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BinarySplitter(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TxtSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TxtSplitter(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PictureSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PictureSplitter(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoSplitter</span>:</span> <span class="hljs-keyword">public</span> ISplitter&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ISplitter* <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> VideoSplitter(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//Client.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form<br>&#123;<br>    ISplitter*  prototype;<span class="hljs-comment">//原型对象</span><br><br><span class="hljs-keyword">public</span>:<br>    <br>    MainForm(ISplitter*  prototype)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;prototype=prototype;<br>    &#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Button1_Click</span><span class="hljs-params">()</span></span>&#123;<br><br>ISplitter * splitter=<br>            prototype-&gt;clone(); <span class="hljs-comment">//克隆原型</span><br>        <br>        splitter-&gt;split();<br>        <br>        <br><br>&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p><img src=".\stuctrue3.png" alt=""></p><h3 id="要点总结-2"><a href="#要点总结-2" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>Prototype模式同样用于<strong>隔离类的使用者和具体类型（易变类）之间的耦合关系</strong>，它同样要求这些“易变类”拥有“稳定的接口”。</li><li>Prototype模式对于“如何创建易变类的实体对象”采用“<strong>原型克隆</strong>”的方法来做，它使得我们可以非常灵活地创建“<strong>拥有某些稳定接口</strong>”的新对象——所需工作仅仅是注册一个新类的对象（原型）然后在任何需要的地方Clone</li><li>Prototype模式中的Clone方法可以利用某些框架中的序列化（java c#）来深拷贝。</li></ul><blockquote><p>原型和工厂模式的区别 “对象初始化是否复杂”</p></blockquote><h2 id="🌿Builder-构建器"><a href="#🌿Builder-构建器" class="headerlink" title="🌿Builder 构建器"></a>🌿Builder 构建器</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>将一个复杂对象的<strong>构建与其表示相分离</strong>，使得同样的构建过程(稳定)可以创建不同的表示(变化)。</p><h3 id="动机-3"><a href="#动机-3" class="headerlink" title="动机"></a>动机</h3><ul><li>在软件系统中，有时候面临着“一个复杂对象”的创建工作，其通常由<strong>各个部分的子对象用一定的算法</strong>构成；由于需求的变化，这个复杂对象的<strong>各个部分经常面临着剧烈的变化</strong>，但是将它们<strong>组合在一起的算法却相对稳定</strong>。 </li><li>如何应对这种变化？如何提供一种“封装机制”来隔离出“复杂对象的各个部分”的变化，从而保持系统中的“稳定构建算法”不随着需求改变而改变？</li></ul><h3 id="样例（游戏中创建房子的流程）👇"><a href="#样例（游戏中创建房子的流程）👇" class="headerlink" title="样例（游戏中创建房子的流程）👇"></a>样例（游戏中创建房子的流程）👇</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span>&#123;</span><br>    <span class="hljs-comment">//....</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseBuilder</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">House* <span class="hljs-title">GetResult</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> pHouse;<br>    &#125;<br>    <span class="hljs-keyword">virtual</span> ~HouseBuilder()&#123;&#125;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-comment">//右元或内部指针</span><br>    House* pHouse;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart1</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart2</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart3</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart4</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart5</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StoneHouse</span>:</span> <span class="hljs-keyword">public</span> House&#123;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StoneHouseBuilder</span>:</span> <span class="hljs-keyword">public</span> HouseBuilder&#123;<br><span class="hljs-keyword">protected</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//pHouse-&gt;Part1 = ...;</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart2</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart3</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart4</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPart5</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>    <br>&#125;;<span class="hljs-number">44</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseDirector</span>&#123;</span><br>    <br><span class="hljs-keyword">public</span>:<br>    HouseBuilder* pHouseBuilder;<br>    <br>    HouseDirector(HouseBuilder* pHouseBuilder)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;pHouseBuilder=pHouseBuilder;<br>    &#125;<br>    <br>    <span class="hljs-function">House* <span class="hljs-title">Construct</span><span class="hljs-params">()</span></span>&#123;<br>        <br>        pHouseBuilder-&gt;BuildPart1();<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>            pHouseBuilder-&gt;BuildPart2();<br>        &#125;<br>        <br>        <span class="hljs-keyword">bool</span> flag=pHouseBuilder-&gt;BuildPart3();<br>        <br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            pHouseBuilder-&gt;BuildPart4();<br>        &#125;<br>        <br>        pHouseBuilder-&gt;BuildPart5();<br>        <br>        <span class="hljs-keyword">return</span> pHouseBuilder-&gt;GetResult();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>与template method 有异曲同工之妙</p></blockquote><h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><p><img src=".\stuctrue4.png" alt=""></p><h3 id="要点总结-3"><a href="#要点总结-3" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>Builder 模式主要用于“分步骤构建一个复杂的对象”。在这其中 <strong>“分步骤”是一个稳定的算法</strong>，而复杂对象的各个部分则经常变化。 </li><li>变化点在哪里，封装哪里—— Builder模式主要在于应对“复杂对 象各个部分”的频繁需求变动。其缺点在于难以应对“分步骤构建 算法”的需求变动。 </li><li>在Builder模式中，要注意不同语言中构造器内调用虚函数的差别 （C++ vs. C#) 。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoF_单一职责</title>
    <link href="/2021/01/24/GoF-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/"/>
    <url>/2021/01/24/GoF-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="“单一职责”模式"><a href="#“单一职责”模式" class="headerlink" title="“单一职责”模式"></a>“单一职责”模式</h1><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。</p><p><strong>典型模式:</strong></p><ul><li>Decorator</li><li>Bridge</li></ul><h2 id="🌿Decorator"><a href="#🌿Decorator" class="headerlink" title="🌿Decorator"></a>🌿Decorator</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>动态（组合）地给一个对象增加一些额外的职责。<strong>就增加功能而言，Decorator模式比生成子类（继承）更为灵活</strong>（消除重复代码 &amp; 减少子类个数）。</p><h3 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h3><ul><li>在某些情况下我们可能会“<strong>过度地使用继承来扩展对象的功能</strong>” ， 由于继承为类型引入的<strong>静态特质</strong>（修改换成指针多态实现），使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</li><li>如何使“对象功能的扩展”能够根据需要来动态地实现？同时避 免“扩展功能的增多”带来的子类膨胀问题？从而使得任何“功能 扩展变化”所导致的影响将为最低？</li></ul><h3 id="样例👇（stream操作）"><a href="#样例👇（stream操作）" class="headerlink" title="样例👇（stream操作）"></a>样例👇（stream操作）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//业务操作 method 1</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stream</span>&#123;</span><br><span class="hljs-keyword">public</span>：<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">char</span> data)</span></span>=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">virtual</span> ~Stream()&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//主体类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileStream</span>:</span> <span class="hljs-keyword">public</span> Stream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <span class="hljs-comment">//读文件流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//定位文件流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">char</span> data)</span></span>&#123;<br>        <span class="hljs-comment">//写文件流</span><br>    &#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkStream</span> :</span><span class="hljs-keyword">public</span> Stream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <span class="hljs-comment">//读网络流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//定位网络流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">char</span> data)</span></span>&#123;<br>        <span class="hljs-comment">//写网络流</span><br>    &#125;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemoryStream</span> :</span><span class="hljs-keyword">public</span> Stream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <span class="hljs-comment">//读内存流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//定位内存流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">char</span> data)</span></span>&#123;<br>        <span class="hljs-comment">//写内存流</span><br>    &#125;<br>    <br>&#125;;<br><br><span class="hljs-comment">//扩展操作</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CryptoFileStream</span> :</span><span class="hljs-keyword">public</span> FileStream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>       <br>        <span class="hljs-comment">//额外的加密操作...</span><br>        FileStream::Read(number);<span class="hljs-comment">//读文件流</span><br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        FileStream::Seek(position);<span class="hljs-comment">//定位文件流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(byte data)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        FileStream::Write(data);<span class="hljs-comment">//写文件流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CryptoNetworkStream</span> :</span> :<span class="hljs-keyword">public</span> NetworkStream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <br>        <span class="hljs-comment">//额外的加密操作...</span><br>        NetworkStream::Read(number);<span class="hljs-comment">//读网络流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        NetworkStream::Seek(position);<span class="hljs-comment">//定位网络流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(byte data)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        NetworkStream::Write(data);<span class="hljs-comment">//写网络流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CryptoMemoryStream</span> :</span> <span class="hljs-keyword">public</span> MemoryStream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <br>        <span class="hljs-comment">//额外的加密操作...</span><br>        MemoryStream::Read(number);<span class="hljs-comment">//读内存流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        MemoryStream::Seek(position);<span class="hljs-comment">//定位内存流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(byte data)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        MemoryStream::Write(data);<span class="hljs-comment">//写内存流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedFileStream</span> :</span> <span class="hljs-keyword">public</span> FileStream&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedNetworkStream</span> :</span> <span class="hljs-keyword">public</span> NetworkStream&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedMemoryStream</span> :</span> <span class="hljs-keyword">public</span> MemoryStream&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br><br><br><br><span class="hljs-comment">//即加密又缓冲</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CryptoBufferedFileStream</span> :</span><span class="hljs-keyword">public</span> FileStream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <br>        <span class="hljs-comment">//额外的加密操作...</span><br>        <span class="hljs-comment">//额外的缓冲操作...</span><br>        FileStream::Read(number);<span class="hljs-comment">//读文件流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        <span class="hljs-comment">//额外的缓冲操作...</span><br>        FileStream::Seek(position);<span class="hljs-comment">//定位文件流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>        <span class="hljs-comment">//额外的缓冲操作...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(byte data)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        <span class="hljs-comment">//额外的缓冲操作...</span><br>        FileStream::Write(data);<span class="hljs-comment">//写文件流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>        <span class="hljs-comment">//额外的缓冲操作...</span><br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Process</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">//编译时装配</span><br>    CryptoFileStream *fs1 = <span class="hljs-keyword">new</span> CryptoFileStream();<br><br>    BufferedFileStream *fs2 = <span class="hljs-keyword">new</span> BufferedFileStream();<br><br>    CryptoBufferedFileStream *fs3 =<span class="hljs-keyword">new</span> CryptoBufferedFileStream();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\structure.png" alt="真的是继承关系嘛？"></p><blockquote><p>类的数量  1+n+n*（m！/2）   m！/2为子类相互组合，read，seek，write代码被大量重复</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//业务操作 method2 编译时复用，运行是多态变化</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stream</span>&#123;</span><br><br><span class="hljs-keyword">public</span>：<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">char</span> data)</span></span>=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">virtual</span> ~Stream()&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//主体类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileStream</span>:</span> <span class="hljs-keyword">public</span> Stream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <span class="hljs-comment">//读文件流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//定位文件流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">char</span> data)</span></span>&#123;<br>        <span class="hljs-comment">//写文件流</span><br>    &#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkStream</span> :</span><span class="hljs-keyword">public</span> Stream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <span class="hljs-comment">//读网络流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//定位网络流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">char</span> data)</span></span>&#123;<br>        <span class="hljs-comment">//写网络流</span><br>    &#125;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemoryStream</span> :</span><span class="hljs-keyword">public</span> Stream&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>        <span class="hljs-comment">//读内存流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//定位内存流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">char</span> data)</span></span>&#123;<br>        <span class="hljs-comment">//写内存流</span><br>    &#125;<br>    <br>&#125;;<br><br><span class="hljs-comment">//扩展操作，！！组合优于继承，类中定义流是为了实现组合，继承为了实现虚函数接口规范，DecoratorStream中间类。</span><br><br>DecoratorStream: <span class="hljs-keyword">public</span> Stream&#123;<br><span class="hljs-keyword">protected</span>:<br>    Stream* stream;<span class="hljs-comment">//...</span><br>    <br>    DecoratorStream(Stream * stm):stream(stm)&#123;<br>    <br>    &#125;<br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CryptoStream</span>:</span> <span class="hljs-keyword">public</span> DecoratorStream &#123;<br> <br><br><span class="hljs-keyword">public</span>:<br>    CryptoStream(Stream* stm):DecoratorStream(stm)&#123;<br>    <br>    &#125;<br>    <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">char</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>       <br>        <span class="hljs-comment">//额外的加密操作...</span><br>        stream-&gt;Read(number);<span class="hljs-comment">//读文件流</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        stream::Seek(position);<span class="hljs-comment">//定位文件流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(byte data)</span></span>&#123;<br>        <span class="hljs-comment">//额外的加密操作...</span><br>        stream::Write(data);<span class="hljs-comment">//写文件流</span><br>        <span class="hljs-comment">//额外的加密操作...</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedStream</span> :</span> <span class="hljs-keyword">public</span> DecoratorStream&#123;<br>    <br>    Stream* stream;<span class="hljs-comment">//...</span><br>    <br><span class="hljs-keyword">public</span>:<br>    BufferedStream(Stream* stm):DecoratorStream(stm)&#123;<br>        <br>    &#125;<br>    <span class="hljs-comment">//...</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Process</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-comment">//运行时装配</span><br>    FileStream* s1=<span class="hljs-keyword">new</span> FileStream();<br>    <br>    <span class="hljs-comment">//扩展操作，必须传一个对象 !!装饰的含义</span><br>    CryptoStream* s2=<span class="hljs-keyword">new</span> CryptoStream(s1);<br>    <br>    BufferedStream* s3=<span class="hljs-keyword">new</span> BufferedStream(s1);<br>    <br>    <span class="hljs-comment">//套娃</span><br>    BufferedStream* s4=<span class="hljs-keyword">new</span> BufferedStream(s2);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\structure2.png" alt=""></p><blockquote><p>类的数量  1+n+1+m</p></blockquote><p>根本原因是对继承的不恰当使用，造成大量重复代码</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src=".\123.png" alt="对应前一个图的结构"></p><h3 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>通过采用组合而非继承的手法， Decorator模式实现了在<strong>运行时动态扩展对象功能</strong>的能力，而且可以根据需要扩展多个功能。避免了使用继承带来的“灵活性差”和“多子类衍生问题” 。 </li><li>Decorator类在接口上表现为<strong>is-a Component</strong>的继承关系，即 Decorator类继承了Component类所具有的接口。但在实现上又 表现为<strong>has-a Component</strong>的组合关系，即Decorator类又使用了 另外一个Component类（即继承Component—?为了接口完善的规范，同时也有Component字段—&gt;组合为了支持将来实现）。 </li><li>Decorator模式的目的并非解决“多子类衍生的多继承”问题， Decorator模式应用的要点在于解决“<strong>主体类在多个方向上的扩展功能</strong>”——是为“<strong>装饰</strong>”的含义。</li></ul><blockquote><p><a href="https://refactoring.guru/design-patterns/decorator"> 网站章节学习资料</a></p></blockquote><p><br></p><hr><p><br></p><h2 id="🌿Bridge"><a href="#🌿Bridge" class="headerlink" title="🌿Bridge"></a>🌿Bridge</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>将<strong>抽象部分(业务功能)</strong>与<strong>实现部分(平台实现)</strong>分离，使它们 都可以独立地变化。</p><h3 id="动机（Motivation）-1"><a href="#动机（Motivation）-1" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h3><ul><li>由于某些类型的固有的实现逻辑，使得它们具有两个变化的维度， 乃至<strong>多个纬度的变化</strong>。 </li><li>如何应对这种“多维度的变化”？如何利用面向对象技术来使得类型可以轻松地沿着两个乃至多个方向变化，而<strong>不引入额外的复杂度</strong>？</li></ul><h3 id="样例👇（Message通知）"><a href="#样例👇（Message通知）" class="headerlink" title="样例👇（Message通知）"></a>样例👇（Message通知）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Messager</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Login</span><span class="hljs-params">(<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-built_in">string</span> message)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPicture</span><span class="hljs-params">(Image image)</span></span>=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//后面四个操作不同平台不一样</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlaySound</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawShape</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteText</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Connect</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">virtual</span> ~Messager()&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-comment">//平台实现</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PCMessagerBase</span> :</span> <span class="hljs-keyword">public</span> Messager&#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlaySound</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//**********</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawShape</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//**********</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteText</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//**********</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Connect</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//**********</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobileMessagerBase</span> :</span> <span class="hljs-keyword">public</span> Messager&#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlaySound</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//==========</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawShape</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//==========</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteText</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//==========</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Connect</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//==========</span><br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">//业务抽象</span><br><span class="hljs-comment">//为什么不把继承变成组合呢？</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PCMessagerLite</span> :</span> <span class="hljs-keyword">public</span> PCMessagerBase &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Login</span><span class="hljs-params">(<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password)</span></span>&#123;<br>        <br>        PCMessagerBase::Connect();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-built_in">string</span> message)</span></span>&#123;<br>        <br>        PCMessagerBase::WriteText();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPicture</span><span class="hljs-params">(Image image)</span></span>&#123;<br>        <br>        PCMessagerBase::DrawShape();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PCMessagerPerfect</span> :</span> <span class="hljs-keyword">public</span> PCMessagerBase &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Login</span><span class="hljs-params">(<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password)</span></span>&#123;<br>        <br>        PCMessagerBase::PlaySound();<br>        <span class="hljs-comment">//********</span><br>        PCMessagerBase::Connect();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-built_in">string</span> message)</span></span>&#123;<br>        <br>        PCMessagerBase::PlaySound();<br>        <span class="hljs-comment">//********</span><br>        PCMessagerBase::WriteText();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPicture</span><span class="hljs-params">(Image image)</span></span>&#123;<br>        <br>        PCMessagerBase::PlaySound();<br>        <span class="hljs-comment">//********</span><br>        PCMessagerBase::DrawShape();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobileMessagerLite</span> :</span> <span class="hljs-keyword">public</span> MobileMessagerBase &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Login</span><span class="hljs-params">(<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password)</span></span>&#123;<br>        <br>        MobileMessagerBase::Connect();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-built_in">string</span> message)</span></span>&#123;<br>        <br>        MobileMessagerBase::WriteText();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPicture</span><span class="hljs-params">(Image image)</span></span>&#123;<br>        <br>        MobileMessagerBase::DrawShape();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobileMessagerPerfect</span> :</span> <span class="hljs-keyword">public</span> MobileMessagerBase &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Login</span><span class="hljs-params">(<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password)</span></span>&#123;<br>        <br>        MobileMessagerBase::PlaySound();<br>        <span class="hljs-comment">//********</span><br>        MobileMessagerBase::Connect();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-built_in">string</span> message)</span></span>&#123;<br>        <br>        MobileMessagerBase::PlaySound();<br>        <span class="hljs-comment">//********</span><br>        MobileMessagerBase::WriteText();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPicture</span><span class="hljs-params">(Image image)</span></span>&#123;<br>        <br>        MobileMessagerBase::PlaySound();<br>        <span class="hljs-comment">//********</span><br>        MobileMessagerBase::DrawShape();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Process</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//编译时装配</span><br>        Messager *m =<br>            <span class="hljs-keyword">new</span> MobileMessagerPerfect();<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>平台实现为m，业务抽象为m ，类的数目为1+n+n*m</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Messager</span>&#123;</span><br><span class="hljs-keyword">protected</span>:<br>     MessagerImp* messagerImp;<span class="hljs-comment">//...</span><br><span class="hljs-keyword">public</span>:<br>    Messager(MessagerImp * mi):messagerImp(mi)&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Login</span><span class="hljs-params">(<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-built_in">string</span> message)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPicture</span><span class="hljs-params">(Image image)</span></span>=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">virtual</span> ~Messager()&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessagerImp</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlaySound</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawShape</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteText</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Connect</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-title">MessagerImp</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-comment">//平台实现 n</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PCMessagerImp</span> :</span> <span class="hljs-keyword">public</span> MessagerImp&#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlaySound</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//**********</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawShape</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//**********</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteText</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//**********</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Connect</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//**********</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobileMessagerImp</span> :</span> <span class="hljs-keyword">public</span> MessagerImp&#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlaySound</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//==========</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawShape</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//==========</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteText</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//==========</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Connect</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//==========</span><br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">//业务抽象 m</span><br><br><span class="hljs-comment">//类的数目：1+n+m</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessagerLite</span> :</span><span class="hljs-keyword">public</span> Messager &#123;<br><br>    <br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Login</span><span class="hljs-params">(<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password)</span></span>&#123;<br>        <br>        messagerImp-&gt;Connect();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-built_in">string</span> message)</span></span>&#123;<br>        <br>        messagerImp-&gt;WriteText();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPicture</span><span class="hljs-params">(Image image)</span></span>&#123;<br>        <br>        messagerImp-&gt;DrawShape();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessagerPerfect</span>  :</span><span class="hljs-keyword">public</span> Messager &#123;<br>    <br>   <br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Login</span><span class="hljs-params">(<span class="hljs-built_in">string</span> username, <span class="hljs-built_in">string</span> password)</span></span>&#123;<br>        <br>        messagerImp-&gt;PlaySound();<br>        <span class="hljs-comment">//********</span><br>        messagerImp-&gt;Connect();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(<span class="hljs-built_in">string</span> message)</span></span>&#123;<br>        <br>        messagerImp-&gt;PlaySound();<br>        <span class="hljs-comment">//********</span><br>        messagerImp-&gt;WriteText();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SendPicture</span><span class="hljs-params">(Image image)</span></span>&#123;<br>        <br>        messagerImp-&gt;PlaySound();<br>        <span class="hljs-comment">//********</span><br>        messagerImp-&gt;DrawShape();<br>        <span class="hljs-comment">//........</span><br>    &#125;<br>&#125;;<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Process</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//运行时装配</span><br>    MessagerImp* mImp=<span class="hljs-keyword">new</span> PCMessagerImp();<br>    MessagerLite *m =<span class="hljs-keyword">new</span> MessagerLite(mImp);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p><img src=".\456.png" alt=""></p><h3 id="要点总结-1"><a href="#要点总结-1" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>Bridge模式使用“对象间的组合关系”解耦了抽象和实现之间固 有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现<strong>沿着各自纬度</strong>的变化，即“<strong>子类化</strong>”它们。 </li><li>Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。 Bridge模式是比多继承方案更好的解决方法。 </li><li>Bridge模式的应用一般在“两个非常强的变化维度”，有时一个类也有多于两个的变化维度（<strong>抽象指针</strong>），这时可以使用Bridge的扩展模式。</li></ul><blockquote><p><a href="https://refactoring.guru/design-patterns/bridge">网站学习资料</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoF_组件协作</title>
    <link href="/2021/01/24/GoF-%E7%BB%84%E4%BB%B6%E5%8D%8F%E4%BD%9C/"/>
    <url>/2021/01/24/GoF-%E7%BB%84%E4%BB%B6%E5%8D%8F%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="“组件协作”模式"><a href="#“组件协作”模式" class="headerlink" title="“组件协作”模式"></a>“组件协作”模式</h1><p>​            现代软件专业分工之后的第一个结果是“<strong>框架与应用程序</strong>的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合是二者之间协作时常用的模式。</p><p><strong>典型模式：</strong></p><ul><li>Template Method  </li><li>Observer / Event </li><li>Strategy</li></ul><h2 id="🌿Template-Method"><a href="#🌿Template-Method" class="headerlink" title="🌿Template Method"></a>🌿Template Method</h2><p>​            定义一<strong>个操作中的算法的骨架 (稳定)</strong>，而将一些<strong>步骤延迟 (变化)到子类</strong>中。Template Method使得子类可以<strong>不改变 (复用)一个算法的结构</strong>即可重定义<strong>(override 重写)</strong>该算法的 某些特定步骤。                                                                                      ——《设计模式》GoF</p><h3 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h3><ul><li>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</li><li>如何在确定稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？</li></ul><h3 id="样例👇"><a href="#样例👇" class="headerlink" title="样例👇"></a>样例👇</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//例1</span><br><span class="hljs-comment">//程序库开发人员in template1_lib.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Library</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step3</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step5</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//应用程序开发人员in template1_app.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Step2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step4</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Library <span class="hljs-title">lib</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">Application <span class="hljs-title">app</span><span class="hljs-params">()</span></span>;<br><br>lib.Step1();<br><br><span class="hljs-keyword">if</span> (app.Step2())&#123;<br>lib.Step3();<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>app.Step4();<br>&#125;<br><br>lib.Step5();<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//程序库开发人员 in template2_lib.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Library</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//稳定 template method， ！！稳定中有变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span>&#123;<br>        <br>        Step1();<br><br>        <span class="hljs-keyword">if</span> (Step2()) &#123; <span class="hljs-comment">//支持变化 ==&gt; 虚函数的多态调用</span><br>            Step3(); <br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>            Step4(); <span class="hljs-comment">//支持变化 ==&gt; 虚函数的多态调用</span><br>        &#125;<br><br>        Step5();<br><br>    &#125;<br>    <span class="hljs-comment">//  !!基类要定义虚析构函数，不写可能子类的析构函数调不到</span><br><span class="hljs-keyword">virtual</span> ~Library()&#123; &#125;<br><br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step1</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//稳定</span><br>        <span class="hljs-comment">//.....</span><br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step3</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//稳定</span><br>        <span class="hljs-comment">//.....</span><br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step5</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//稳定</span><br><span class="hljs-comment">//.....</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">Step2</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-comment">//变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Step4</span><span class="hljs-params">()</span> </span>=<span class="hljs-number">0</span>; <span class="hljs-comment">//变化</span><br>&#125;;<br><br><span class="hljs-comment">//应用程序开发人员 in template2_app.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> :</span> <span class="hljs-keyword">public</span> Library &#123;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">Step2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//... 子类重写实现</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Step4</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//... 子类重写实现</span><br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Library* pLib=<span class="hljs-keyword">new</span> Application();<br>    lib-&gt;Run();<br><br><span class="hljs-keyword">delete</span> pLib;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\bind.png" alt="两段代码区别"></p><blockquote><p>设计模式：在变化和稳定之间寻找<strong>隔离点</strong>，从而分离它们，管理变化（把兔子关进笼子里）。如果没有稳定，或者没有变化，设计模式也将不起作用。</p></blockquote><h3 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h3><p><img src=".\template.png" alt=""></p><h3 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>Template Method模式是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（<strong>虚函数的多态性</strong>，<em>函数指针也可以实现</em>） 为很多应用程序框架提供了<strong>灵活的扩展点</strong>，是代码复用方面的基本实现结构。</li><li>除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你”的<strong>反向控制结构</strong>是Template Method的典型应用。</li><li>在具体实现方面，被Template Method调用的虚方法可以具有实现，也可以没有任何实现（<strong>抽象方法、纯虚方法</strong>），但一般推荐将它们设置为<strong>protected</strong>方法。</li></ul><blockquote><p><a href="https://refactoring.guru/design-patterns/template-method"> 网站章节学习资料</a></p></blockquote><p><br></p><hr><p><br></p><h2 id="🌿Strategy"><a href="#🌿Strategy" class="headerlink" title="🌿Strategy"></a>🌿Strategy</h2><p>​            定义一系列算法，把它们一个个封装起来，并且使它们可<strong>互相替换（变化）</strong>。该模式使得<strong>算法可独立于使用它的客户程序</strong>(稳定)而变（扩展，子类化）。                                                                                                                                                    ——《设计模式》GoF</p><h3 id="动机（Motivation）-1"><a href="#动机（Motivation）-1" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h3><ul><li>在软件构建过程中，某些<strong>对象使用的算法可能多种多样</strong>，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个<strong>性能</strong>负担(大量判断)。</li><li>如何在运行时根据需要透明地更改对象的算法？将算法与对象本 身解耦，从而避免上述问题？</li></ul><h3 id="样例👇（税总计算）"><a href="#样例👇（税总计算）" class="headerlink" title="样例👇（税总计算）"></a>样例👇（税总计算）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 1</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">TaxBase</span> &#123;</span><br>CN_Tax,<br>US_Tax,<br>DE_Tax,<br>FR_Tax       <span class="hljs-comment">//更改</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SalesOrder</span>&#123;</span><br>    TaxBase tax;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">CalculateTax</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        <br>        <span class="hljs-keyword">if</span> (tax == CN_Tax)&#123;<br>            <span class="hljs-comment">//CN***********</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tax == US_Tax)&#123;<br>            <span class="hljs-comment">//US***********</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tax == DE_Tax)&#123;<br>            <span class="hljs-comment">//DE***********</span><br>        &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tax == FR_Tax)&#123;  <span class="hljs-comment">//更改</span><br><span class="hljs-comment">//...</span><br>&#125;<br><br>        <span class="hljs-comment">//...</span><br>     <span class="hljs-comment">//动态地去看这个问题...</span><br>     &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaxStrategy</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//纯虚方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//基类一定要写虚析构</span><br>    <span class="hljs-keyword">virtual</span> ~TaxStrategy()&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CNTax</span> :</span> <span class="hljs-keyword">public</span> TaxStrategy&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>&#123;<br>        <span class="hljs-comment">//***********</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">USTax</span> :</span> <span class="hljs-keyword">public</span> TaxStrategy&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>&#123;<br>        <span class="hljs-comment">//***********</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DETax</span> :</span> <span class="hljs-keyword">public</span> TaxStrategy&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>&#123;<br>        <span class="hljs-comment">//***********</span><br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">//扩展</span><br><span class="hljs-comment">//*********************************</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FRTax</span> :</span> <span class="hljs-keyword">public</span> TaxStrategy&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>&#123;<br><span class="hljs-comment">//.........</span><br>&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SalesOrder</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    TaxStrategy* strategy;<br><br><span class="hljs-keyword">public</span>:<br>    SalesOrder(StrategyFactory* strategyFactory)&#123;<br>        <span class="hljs-comment">//这里以后可以用工厂方法</span><br>        <span class="hljs-keyword">this</span>-&gt;strategy = strategyFactory-&gt;NewStrategy();<br>    &#125;<br>    ~SalesOrder()&#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;strategy;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">CalculateTax</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-function">Context <span class="hljs-title">context</span><span class="hljs-params">()</span></span>;<br>        <br>        <span class="hljs-keyword">double</span> val = <br>            strategy-&gt;Calculate(context); <span class="hljs-comment">//多态调用</span><br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>method 1 违背开放封闭原则，在编译后的二进制代码修改大, method 2 SalesOrder稳定，算法可变化。</p></blockquote><h3 id="结构（Structure）-1"><a href="#结构（Structure）-1" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h3><p><img src=".\strategy.png" alt=""></p><h3 id="要点总结-1"><a href="#要点总结-1" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在<strong>运行时</strong>方便地根据需要在各个算法之间进行切换（多态调用）。</li><li>Strategy模式提供了用条件判断语句以外的另一种选择，消除<strong>条件判断语句（bad smell，结构化思维）</strong>，就是在<strong>解耦合</strong>。含有许多条件判断语句的代码通常都需要Strategy模式。</li><li>如果Strategy对象<strong>没有实例变量</strong>(单例模式实现)，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。</li></ul><p><a href="https://refactoring.guru/design-patterns/strategy"> 网站章节学习资料</a></p><p><br></p><hr><p><br></p><h2 id="🌿Observer-Event"><a href="#🌿Observer-Event" class="headerlink" title="🌿Observer/Event"></a>🌿Observer/Event</h2><p>​            定义对象间的一种<strong>一对多（变化）的依赖关系</strong>，以便当一个对象(Subject)的状态发生改变时，所有<strong>依赖于它的对象都得到通知并自动更新</strong>。                                                                                                                                                                                ——《设计模式》GoF</p><h3 id="动机（Motivation）-2"><a href="#动机（Motivation）-2" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h3><ul><li>在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系” —— 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化。</li><li>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</li></ul><h3 id="示例👇（文件分割器）"><a href="#示例👇（文件分割器）" class="headerlink" title="示例👇（文件分割器）"></a>示例👇（文件分割器）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 1</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSplitter</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-built_in">string</span> m_filePath;<br><span class="hljs-keyword">int</span> m_fileNumber;<br>    <span class="hljs-comment">// ！！违背依赖倒置原则，ProgressBar（太过细节），可能是label，可能是控制台的···</span><br>    <span class="hljs-comment">// 依赖它的抽象基类，它的功能-&gt;实现通知</span><br>ProgressBar* m_progressBar;<br><br><span class="hljs-keyword">public</span>:<br>FileSplitter(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; filePath, <span class="hljs-keyword">int</span> fileNumber, ProgressBar* progressBar) :<br>m_filePath(filePath), <br>m_fileNumber(fileNumber),<br>m_progressBar(progressBar)&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//1.读取大文件</span><br><br><span class="hljs-comment">//2.分批次向小文件中写入</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_fileNumber; i++)&#123;<br><span class="hljs-comment">//...</span><br>            <span class="hljs-keyword">if</span>(m_progressBar!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">float</span> progressValue = m_fileNumber;<br>progressValue = (i + <span class="hljs-number">1</span>) / progressValue;<br>m_progressBar-&gt;setValue(progressValue);    <br>            &#125;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form<br>&#123;<br>    <span class="hljs-comment">//文件路径</span><br>TextBox* txtFilePath;<br>    <span class="hljs-comment">//文件被分割的数量</span><br>TextBox* txtFileNumber;<br>ProgressBar* progressBar;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Button1_Click</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">string</span> filePath = txtFilePath-&gt;getText();<br><span class="hljs-keyword">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());<br><br><span class="hljs-function">FileSplitter <span class="hljs-title">splitter</span><span class="hljs-params">(filePath, number, progressBar)</span></span>;<br><br>splitter.split();<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 2</span><br><span class="hljs-comment">//IProgress 抽象接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IProgress</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoProgress</span><span class="hljs-params">(<span class="hljs-keyword">float</span> value)</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~IProgress()&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSplitter</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-built_in">string</span> m_filePath;<br><span class="hljs-keyword">int</span> m_fileNumber;<br><br>List&lt;IProgress*&gt;  m_iprogressList; <span class="hljs-comment">// 抽象通知机制，支持多个观察者</span><br><br><span class="hljs-keyword">public</span>:<br>FileSplitter(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; filePath, <span class="hljs-keyword">int</span> fileNumber) :<br>m_filePath(filePath), <br>m_fileNumber(fileNumber)&#123;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//1.读取大文件</span><br><br><span class="hljs-comment">//2.分批次向小文件中写入</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_fileNumber; i++)&#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">float</span> progressValue = m_fileNumber;<br>progressValue = (i + <span class="hljs-number">1</span>) / progressValue;<br>onProgress(progressValue);<span class="hljs-comment">//发送通知</span><br>&#125;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addIProgress</span><span class="hljs-params">(IProgress* iprogress)</span></span>&#123;<br>m_iprogressList.push_back(iprogress);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeIProgress</span><span class="hljs-params">(IProgress* iprogress)</span></span>&#123;<br>m_iprogressList.remove(iprogress);<br>&#125;<br><br><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onProgress</span><span class="hljs-params">(<span class="hljs-keyword">float</span> value)</span></span>&#123;<br><br>List&lt;IProgress*&gt;::iterator itor=m_iprogressList.begin();<br><br><span class="hljs-keyword">while</span> (itor != m_iprogressList.end() )<br>(*itor)-&gt;DoProgress(value); <span class="hljs-comment">//更新进度条</span><br>itor++;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">// 多继承使用的场景：主继承类+接口（抽象类）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form, <span class="hljs-keyword">public</span> IProgress<br>&#123;<br>TextBox* txtFilePath;<br>TextBox* txtFileNumber;<br><br>ProgressBar* progressBar;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Button1_Click</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">string</span> filePath = txtFilePath-&gt;getText();<br><span class="hljs-keyword">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());<br><br>ConsoleNotifier cn;<br><br><span class="hljs-function">FileSplitter <span class="hljs-title">splitter</span><span class="hljs-params">(filePath, number)</span></span>;<br><br>splitter.addIProgress(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//订阅通知</span><br>splitter.addIProgress(&amp;cn)； <span class="hljs-comment">//订阅通知</span><br><br>splitter.split();<br><br>splitter.removeIProgress(<span class="hljs-keyword">this</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoProgress</span><span class="hljs-params">(<span class="hljs-keyword">float</span> value)</span></span>&#123;<br>progressBar-&gt;setValue(value);<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsoleNotifier</span> :</span> <span class="hljs-keyword">public</span> IProgress &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoProgress</span><span class="hljs-params">(<span class="hljs-keyword">float</span> value)</span></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;.&quot;</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="结构（Structure）-2"><a href="#结构（Structure）-2" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h3><p><img src=".\observer.png" alt=""></p><ul><li>样例中 Observer是IProgress，而MainForm、ConsoleNotifier是ConcreteObserver</li><li>样例中 Subject是FileSplitter（其实FileSplitter可以提取addIProgress，removeIProgress和onProgress）</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使<strong>二者之间的依赖关系达致松耦合</strong>。</li></ul><blockquote><p>IProgress不管多少个，FileSplitter都不变，保持复用性</p></blockquote><ul><li>目标发送通知时，<strong>无需指定观察者</strong>，通知（可以携带通知信息作为参数）会自动传播。</li></ul><blockquote><p>FileSplitter执行DoProgress不关心是那个观察者，抽象地进行通知，自动传播</p></blockquote><ul><li>观察者自己决定是否需要订阅通知，目标对象对此一无所知。 </li></ul><blockquote><p>MainForm执行addIProgress</p></blockquote><ul><li>Observer模式是<strong>基于事件的UI框架</strong>中非常常用的设计模式，也是<strong>MVC模式</strong>的一个重要组成部分。</li></ul><p><a href="https://refactoring.guru/design-patterns/observer"> 网站章节学习资料，核心：抽象的通知依赖关系</a></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>王道数据结构_第一章绪论</title>
    <link href="/2021/01/23/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%AA%E8%AE%BA/"/>
    <url>/2021/01/23/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>​    学习资料：《数据结构》（严蔚敏）   《王道2022数据结构考研复习指导》</p><p>​    视频网站：<a href="https://www.bilibili.com/video/BV1b7411N798?p=6">王道2021/2020版免费视频</a></p><p>​    leetcode题库：<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md">算法+数据结构</a></p><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><p><strong>考纲内容：</strong></p><ul><li>数据结构的相关<strong>概念和术语</strong>。</li><li>数据结构的<strong>三要素</strong>: 逻辑结构、物理结构和数据结构。</li><li>算法<strong>时间复杂度</strong>和<strong>空间复杂度</strong>的<strong>分析和计算</strong>。</li></ul><h2 id="数据结构的基本概念"><a href="#数据结构的基本概念" class="headerlink" title="数据结构的基本概念"></a>数据结构的基本概念</h2><p><img src=".\data_structe.png" alt="data_structe" style="zoom:67%;" /></p><h3 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h3><h4 id="🌿数据"><a href="#🌿数据" class="headerlink" title="🌿数据"></a>🌿数据</h4><p>​        <strong>数据（data）</strong>是<strong>信息的载体</strong>，是描述客观事物属性的数、字符及所有能<strong>输入到计算机中并能被计算机程序识别和处理的符号的总称</strong>。数据是计算机程序加工的原料。</p><h4 id="🌿数据元素、数据项"><a href="#🌿数据元素、数据项" class="headerlink" title="🌿数据元素、数据项"></a>🌿数据元素、数据项</h4><p>​        <strong>数据元素（data element）</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干个<strong>数据项（data item）</strong>组成，<strong>数据项是构成数据元素的不可分割的最小单位</strong>。</p><blockquote><p>例：学生记录就是一个数据元素，它由学号、姓名、性别等数据组成。</p></blockquote><h4 id="🌿数据结构、数据对象"><a href="#🌿数据结构、数据对象" class="headerlink" title="🌿数据结构、数据对象"></a>🌿数据结构、数据对象</h4><p>​        <strong>数据结构（data structure）</strong>是<strong>相互之间</strong>存在一种或多种特定关系的<strong>数据元素的集合</strong>。</p><p>​        <strong>数据对象（data object）</strong>是具有<strong>相同性质的数据元素</strong>的集合，是数据的一个子集。</p><h3 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h3><h4 id="✨逻辑结构"><a href="#✨逻辑结构" class="headerlink" title="✨逻辑结构"></a>✨逻辑结构</h4><ol><li><strong>集合</strong>：结构中的数据元素<strong>同属一个集合</strong>，除此之外没有其他关系。</li><li><strong>线性结构</strong>：结构中的数据元素之间<strong>存在着一个对一个</strong>的关系，除第一个元素外，每一个元素都有前驱，除最后一个外每一个都有后继</li><li><strong>树型结构</strong>：结构中数据元素之间<strong>存在一个对多个的关系</strong>。</li><li><strong>图状结构（网状结构）</strong>：结构中数据元素之间存在<strong>多对多的关系</strong>。</li></ol><p><img src=".\structure.png" alt="四种结构"></p><p><img src=".\linear.webp" alt="linear" style="zoom: 67%;" /></p><p><img src=".\none_linear.webp" alt="none_linear" style="zoom:67%;" /></p><h4 id="✨物理结构（存储结构）"><a href="#✨物理结构（存储结构）" class="headerlink" title="✨物理结构（存储结构）"></a>✨物理结构（存储结构）</h4><ol><li><p><strong>顺序存储</strong>：把<strong>逻辑相邻的元素存储在物理位置上也相邻的存储单元中</strong>，元素之间的关系由存储单元的相邻关系来体现。</p></li><li><p><strong>链式存储</strong>：<strong>逻辑上项邻的元素在物理位置上可以不相邻</strong>，借助指示元素存储地址的<strong>指针</strong>来表示元素之间的位置关系。</p></li><li><p><strong>索引存储</strong>：在<strong>存储信息的同时，还建立附加的索引表</strong>。索引表的每项称为索引项（形式是<code>关键字，地址</code>）</p></li><li><p><strong>散列存储</strong>：根据<strong>元素的关键字直接计算出该元素的存储地址</strong>，有称为哈希（Hash）存储。</p><p><img src=".\store_sum.png" alt=""></p></li></ol><p><img src=".\hash.jpg" alt="hash"></p><blockquote><p>顺序存储支持随机访问（即按下标访问），但对其数据操作较为复杂。</p></blockquote><p>数据的<strong>存储结构</strong>会影响<strong>存储空间分配的方便程度</strong>和<strong>对数据运算的速度</strong></p><h4 id="✨数据的运算"><a href="#✨数据的运算" class="headerlink" title="✨数据的运算"></a>✨数据的运算</h4><p>施加在数据上的运算包括运算的定义和实现。</p><ul><li><strong>运算的定义</strong>：<strong>针对逻辑结构</strong>，指出运算的<strong>功能</strong>。</li></ul><blockquote><p>入队/栈，出队/栈，插队，插结点…</p></blockquote><ul><li><strong>运算的实现</strong>： <strong>争对存储结构</strong>，指出运算的具体步骤。</li></ul><blockquote><p>不同存储结构实现上面的方法不一样，如线性/非线性</p></blockquote><h3 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h3><h4 id="🎈数据类型"><a href="#🎈数据类型" class="headerlink" title="🎈数据类型"></a>🎈数据类型</h4><p>数据类型是<strong>一个值的集合</strong>和第一在此集合上的<strong>一组操作</strong>总称。</p><ol><li><strong>原子类型</strong>。其值不可再分（bool，int）</li><li><strong>结构类型</strong>。其值可以再分解为若干成分（分量）的数据类型（如<code>struct  ×××&#123;   &#125;;</code> 结构体）。</li></ol><h4 id="🎈抽象数据类型（ADT-Abstract-Data-Type）"><a href="#🎈抽象数据类型（ADT-Abstract-Data-Type）" class="headerlink" title="🎈抽象数据类型（ADT,Abstract Data Type）"></a>🎈抽象数据类型（ADT,Abstract Data Type）</h4><p><strong>抽象数据类型</strong>是抽象组织与之相关的操作,ADT用数学化的语言定义数据的逻辑结构、运算，与<strong>具体实现</strong>无关。</p><p>常用<strong>三元组来表示</strong> （D,S,P）</p><p>D是数据对象，S是D上的关系集，P是对D的基本操作集。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">ADT 抽象数据类型名&#123;<br>数据对象: &lt;数据对象的定义&gt;<br>数据关系: &lt;数据关系的定义&gt;<br>基本操作: &lt;基本操作的定义&gt;<br>&#125;ADT 抽象数据类型名<br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>当我们探讨某一种数据结构时，一般按以下步骤来学习</p><p>①定义<strong>逻辑结构</strong>（数据元素之间的关系）</p><p>②定义<strong>数据运算</strong>（实现什么样的需求，对这种逻辑结构进行什么样的运算）</p><p>③<strong>确定存储结构</strong>，实现数据结构，并实现一些对数据结构的基本运算。</p><p>④去了解该<strong>数据结构的应用</strong>。</p><p><br></p><p><br></p><hr><p><br></p><p><br></p><h2 id="算法和算法评价"><a href="#算法和算法评价" class="headerlink" title="算法和算法评价"></a>算法和算法评价</h2><p><img src=".\algorithm.png" alt="algorithm" style="zoom:67%;" /></p><h2 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h2><blockquote><p><strong>程序 = 数据结构 + 算法</strong></p></blockquote><p><strong>数据结构</strong>：如何把现实世界的问题信息化，将信息存入计算机。同时还要实现对数据结构的基本操作。</p><p><strong>算法</strong>：如何处理这些信息，去解决实际问题。</p><blockquote><p>主要学习<code>数据结构的应用</code>、查找和排序算法。</p></blockquote><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><h4 id="🎉有穷性"><a href="#🎉有穷性" class="headerlink" title="🎉有穷性"></a>🎉有穷性</h4><p><strong>有穷性</strong>：一个<strong>算法必须总再执行有穷步之后结束</strong>，且<strong>每一步</strong>都可在<strong>又穷时间</strong>内完成(但<strong>程序可以是无穷</strong>的)。</p><h4 id="🎉确定性"><a href="#🎉确定性" class="headerlink" title="🎉确定性"></a>🎉确定性</h4><p><strong>确定性</strong>：算法中<strong>每条指令必须有确切</strong>的含义，对于<strong>相同的输入</strong>只能得到<strong>相同的输出</strong>。</p><h4 id="🎉可行性"><a href="#🎉可行性" class="headerlink" title="🎉可行性"></a>🎉可行性</h4><p><strong>可行性</strong>：算法中描述的操作都可以通过已经实现的<strong>基本运算执行有限次</strong>来实现。</p><h4 id="🎉输入"><a href="#🎉输入" class="headerlink" title="🎉输入"></a>🎉输入</h4><p>一个算法有<strong>零个或多个输入</strong>，这些输入取自于某个特定的对象集合</p><h4 id="🎉输出"><a href="#🎉输出" class="headerlink" title="🎉输出"></a>🎉输出</h4><p>一个算法有<strong>一个或多个输出</strong>，这些输出是与输入有着某些特定关系的量。</p><blockquote><p>y = f（x） x是输入，y是输出 f（）为算法。</p></blockquote><h3 id="算法的评价指标"><a href="#算法的评价指标" class="headerlink" title="算法的评价指标"></a>算法的评价指标</h3><h4 id="🌹正确性"><a href="#🌹正确性" class="headerlink" title="🌹正确性"></a>🌹正确性</h4><p>算法应能够正确地解决问题</p><h4 id="🌹可读性"><a href="#🌹可读性" class="headerlink" title="🌹可读性"></a>🌹可读性</h4><p>算法应该有良好地可读性，以帮助人们理解（要无歧义地描述解决问题的步骤）</p><h4 id="🌹健壮性"><a href="#🌹健壮性" class="headerlink" title="🌹健壮性"></a>🌹健壮性</h4><p>输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果</p><h4 id="🌹效率与低存储量需求"><a href="#🌹效率与低存储量需求" class="headerlink" title="🌹效率与低存储量需求"></a>🌹效率与低存储量需求</h4><p>算法的<strong>执行时间</strong>和算法<strong>执行过程中所需要的最大存储空间</strong></p><p>算法执行<strong>省时（时间复杂度低）</strong>、<strong>省内存（空间复杂度低）</strong></p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><blockquote><p>算法的效率如何度量？ <code>时间复杂度</code>+<code>空间复杂段</code></p></blockquote><p><strong>算法的时间复杂度</strong>不能在事后<strong>统计运行时间的方式</strong>进行统计，因为算法和机器性能、编程语言（编译器）…因素有关，所以时间复杂度采用事前<strong>预估算法时间开销T（n）与问题规模n</strong>的关系 T=T(n)。</p><h4 id="🦊O渐近上界"><a href="#🦊O渐近上界" class="headerlink" title="🦊O渐近上界"></a>🦊O渐近上界</h4><p><img src=".\O.png" alt=""></p><h4 id="🦊Ω渐近下界"><a href="#🦊Ω渐近下界" class="headerlink" title="🦊Ω渐近下界"></a>🦊Ω渐近下界</h4><p><img src=".\omiga.png" alt=""></p><h4 id="🦊θ准确的界"><a href="#🦊θ准确的界" class="headerlink" title="🦊θ准确的界"></a>🦊θ准确的界</h4><p><img src=".\sita.png" alt=""></p><p><img src=".\sita2.png" alt=""></p><p>我们只关注<code>最坏情况</code>和<code>平均情况</code> 所以我们计算出的O通常是指θ准确界。</p><h4 id="乘法和加法定理"><a href="#乘法和加法定理" class="headerlink" title="乘法和加法定理"></a>乘法和加法定理</h4><p>T(n,m) = T1(n) + T2(n) = O (max ( f(n),g(m) )</p><p>T(n,m) = T1(n) <em> T2(m) = O (f(n) </em> g(m))</p><h4 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h4><p><img src=".\time.png" alt="" style="zoom:60%;" /></p><blockquote><p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n2) &lt; O(n3) &lt; O(2n) &lt; O(n!) &lt; O(n<sup>n</sup>) </strong> 常对幂指阶</p></blockquote><p>我们根据加法规则只需要关注<code>内存循环</code>中的<code>阶数最高</code>部分，所以找求时间复杂度，我就的方法</p><ol><li>找内存循环</li><li>找循环结束条件</li><li>根据结束条件计算内层循环大概在那个数量级</li></ol><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p><strong>空间复杂度</strong>：<strong>内存开销与问题规模n之间的关系</strong>    <strong>S(n)=O (g(n))</strong></p><h4 id="复杂度常量型-S-n-O（1）"><a href="#复杂度常量型-S-n-O（1）" class="headerlink" title="复杂度常量型 S(n)=O（1）"></a>复杂度常量型 S(n)=O（1）</h4><p><img src=".\store33.png" alt="算法可原地工作"></p><h4 id="非常量型："><a href="#非常量型：" class="headerlink" title="非常量型："></a>非常量型：</h4><ol><li>一维数组：int flag[n]，n越大，占的空间越多</li><li>二维数组:  int flag[n][n] , 同上，为n<sup>2</sup></li><li><strong>函数递归调用</strong></li></ol><p><img src=".\DIGUI1.png" alt="递归1，变量无数组"></p><p><img src=".\DIGUI2.png" alt="递归2，函数中有数组"></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-考研 -王道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoF_分类</title>
    <link href="/2021/01/23/GoF-%E5%88%86%E7%B1%BB/"/>
    <url>/2021/01/23/GoF-%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="GOF-23-模式分类"><a href="#GOF-23-模式分类" class="headerlink" title="GOF-23 模式分类"></a>GOF-23 模式分类</h1><h2 id="从目的来看："><a href="#从目的来看：" class="headerlink" title="从目的来看："></a><a href="ttps://refactoring.guru/design-patterns/catalog">从目的来看</a>：</h2><ul><li><strong>创建型(Creational)模式</strong> ：将<strong>对象的部分创建工作延迟到子类或者其他对象</strong>，从而应对需求变化为对象创建时具体类型实现引来的冲击。</li><li><strong>结构型(Structural) 模式</strong>： 通过<strong>类继承或者对象组合获得更灵活的结构</strong>，从而应对需求变化为对象的结构带来的冲击。</li><li><strong>行为（Behavioral)模式</strong> ：通过<strong>类继承或者对象组合来划分类与对象间的职责</strong>，从而应对需求变化为多个交互的对象带来 的冲击。</li></ul><p><img src=".\GoF_classify.png" alt=""></p><h2 id="从范围来看"><a href="#从范围来看" class="headerlink" title="从范围来看"></a>从范围来看</h2><ul><li>类模式处理类与子类的静态关系。 </li><li>对象模式处理对象间的动态关系。</li></ul><h2 id="从封装变化角度分类"><a href="#从封装变化角度分类" class="headerlink" title="从封装变化角度分类"></a>从封装变化角度分类</h2><p><img src=".\classify.png" alt="李老师的分类方法"></p><h2 id="重构获得模式-Refactoring-to-Patterns"><a href="#重构获得模式-Refactoring-to-Patterns" class="headerlink" title="重构获得模式 Refactoring to Patterns"></a>重构获得模式 Refactoring to Patterns</h2><ul><li>面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足 “<strong>应对变化，提高复用</strong>”的设计 。</li><li>现代软件设计的特征是“需求的频繁变化”。设计模式的要点是 “<strong>寻找变化点</strong>，然后在变化点处应用设计模式，从而来更好地应对需求的变化”.“<strong>什么时候、什么地点应用设计模式</strong>”比“理解设计模式结构本身”更为重要。</li><li>设计模式的应用<strong>不宜先入为主</strong>，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“<strong>Refactoring to Patterns</strong>”是目前普遍公认的最好的使用设计模式的方法。</li></ul><p><img src=".\refactoring.png" alt="李老师推荐图书"></p><h2 id="重构关键技法"><a href="#重构关键技法" class="headerlink" title="重构关键技法"></a>重构关键技法</h2><h3 id="🌿静态-gt-动态"><a href="#🌿静态-gt-动态" class="headerlink" title="🌿静态 -&gt; 动态"></a>🌿静态 -&gt; 动态</h3><h3 id="🌿早绑定-gt-晚绑定"><a href="#🌿早绑定-gt-晚绑定" class="headerlink" title="🌿早绑定 -&gt; 晚绑定"></a>🌿早绑定 -&gt; 晚绑定</h3><h3 id="🌿继承-gt-组合"><a href="#🌿继承-gt-组合" class="headerlink" title="🌿继承 -&gt; 组合"></a>🌿继承 -&gt; 组合</h3><h3 id="🌿编译时依赖-gt-运行时依赖"><a href="#🌿编译时依赖-gt-运行时依赖" class="headerlink" title="🌿编译时依赖 -&gt; 运行时依赖"></a>🌿编译时依赖 -&gt; 运行时依赖</h3><h3 id="🌿紧耦合-gt-松耦合"><a href="#🌿紧耦合-gt-松耦合" class="headerlink" title="🌿紧耦合 -&gt; 松耦合"></a>🌿紧耦合 -&gt; 松耦合</h3>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归:Fibonacci（🐇🐸）与🗼</title>
    <link href="/2021/01/23/Fibonacci%E5%85%94%E4%B8%8E%E9%9D%92%E8%9B%99/"/>
    <url>/2021/01/23/Fibonacci%E5%85%94%E4%B8%8E%E9%9D%92%E8%9B%99/</url>
    
    <content type="html"><![CDATA[<h1 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h1><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>西元1202年，一位名叫斐波那契意大利青年在他的一部著作中提出了一个有趣的问题:   假设一对刚出生的小兔<strong>一个月后</strong>就能长成大兔，再过一个月就能生下一对小兔，并且此后每个月都生一对小兔，一年内没有发生死亡，问：一对刚出生的兔子，一年内繁殖成多少对兔子?</p><p><img src=".\tuzi.jpg" alt="" style="zoom:67%;" /></p><blockquote><p>黑点表示的是成熟兔子，白点表示的是小兔子</p></blockquote><p>由图我们可以发现这个数字是由规律的，<code>该月的兔子数=前两个月之和</code>（如果月份&gt;2的话），这很好理解，上上个月的兔子到上个月时都是成熟的兔子🐇，所以 <code>该月的兔子数=前一个月的兔子+前一个月已经成熟的兔子（即成熟的兔子）</code>公式👇</p><script type="math/tex; mode=display">F[n]=\begin{cases}    0,n=0\\    1,n=1\\    F[n-1]+F[n-2],n>=2\\\end{cases}</script><p><img src=".\number.jpg" alt="增长率0.618" style="zoom:67%;" /></p><p>这就引入了斐波那契数列的问题，更多详情请看👉 <a href="https://zhuanlan.zhihu.com/p/26752744">不死神兔的繁衍生息——神奇的斐波那契数列</a> </p><h2 id="通项公式"><a href="#通项公式" class="headerlink" title="通项公式"></a>通项公式</h2><script type="math/tex; mode=display">递推公式：an=an−1+an−2(n≥3)</script><script type="math/tex; mode=display">裂项相消：an−λan−1=μ(an−1−λan−2)</script><script type="math/tex; mode=display">\begin{cases}    λ+μ=1\\    −λ×μ=1\end{cases}</script><p>求出λ和μ两组解放入裂项相消的原式中</p><p><img src=".\formula1.png" alt=""></p><p><img src=".\formula4.png" alt=""></p><p><img src=".\formula3.png" alt=""></p><script type="math/tex; mode=display">最后求得通项公式:F(N)={5\over\sqrt5}(({1+\sqrt5\over2})^n-({1-\sqrt5\over2})^n)</script><h2 id="算法求解："><a href="#算法求解：" class="headerlink" title="算法求解："></a>算法求解：</h2><p>不展开Fibonacci的话题探讨了，我们还是用代码来解决上面这个兔子问题      （🔗👉 <a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">Fibonacci Leetcode</a>）</p><h3 id="递归求法"><a href="#递归求法" class="headerlink" title="递归求法"></a>递归求法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 1  递归算法求解</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-1</span>)+fib(n<span class="hljs-number">-2</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src=".\recursion.png" alt="递归算法n=4的过程"></p><p>显然我们看到递归算法计算n=4时，f(1)被计算了三次，f(2)被计算了两次…  计算效率底下。</p><script type="math/tex; mode=display">通项公式:F(N)={5\over\sqrt5}(({1+\sqrt5\over2})^n-({1-\sqrt5\over2})^n)</script><p>复杂度的计算：每个结点都有一次计算，我们计算总结点数即可。</p><ul><li>第N轮的叶子结点总数:      F[N]=F[n-1]+F[n-2]</li><li>而非叶子结点加一等于叶子结点    <ul><li>总结点=F[n-1]+F[n-2]+F[n-1]+F[n-2]-1=2F[n-1]+2F[N-2]-1&lt;4F[N-1]</li></ul></li><li>显然，n趋于∞时，O（2F[n-1]+2F[N-2]-1） =  O（4F[N-1]）= O（F[N]）</li></ul><p>故时间复杂度，等于通项公式，去掉小于1的指数项，得：  <code>(这里O是渐进上届)</code></p><script type="math/tex; mode=display">O({1+\sqrt5\over2})^n</script><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = <span class="hljs-number">2</span>; m &lt;= n; m++) &#123;<br>        k = i + j;<br>        i = j;<br>        j = k;<br>    &#125;<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>LeetCode注意点：答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。k = i + j这句后面加一个%1000000007即可，尽量不要在后面return再取余，先取后取结果是一样的,后取还可能溢出。</p></blockquote><p>迭代的<code>复杂度就是n</code>   </p><h2 id="拓展：青蛙跳台阶"><a href="#拓展：青蛙跳台阶" class="headerlink" title="拓展：青蛙跳台阶"></a><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">拓展：青蛙跳台阶</a></h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 <code>n</code> 级的台阶总共有多少种跳法。</p><blockquote><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p></blockquote><ul><li>第一级台阶有1种跳法跳上去</li><li>第二级台阶有2种跳法跳上去，一种是直接跳两级台阶，一种是两次跳1级台阶</li><li>第n级有<code>两种方式</code>第一种是从<code>n-1级跳1级台阶上去</code>，第二种是从<code>n-2级跳两级台阶上去</code>，所以<code>跳上n级台阶的种数有f(n-1)+f(n-2)</code></li></ul><script type="math/tex; mode=display">F[n]=\begin{cases}    1,n=1\\    2,n=2\\    F[n-1]+F[n-2],n>=3\\\end{cases}</script><p>Fibonacci公式同样适用于这里。 <code>//注意力扣题目样例中0级台阶也有一种跳法</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numWays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = <span class="hljs-number">2</span>; m &lt;= n; m++) &#123;<br>            k = (i + j) % <span class="hljs-number">1000000007</span>;<br>            i = j;<br>            j = k;<br>        &#125;<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a><a href="https://leetcode-cn.com/problems/hanota-lcci/">汉诺塔</a></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即<strong>每一个盘子只能放在更大的盘子上面</strong>)。移动圆盘时受到以下限制:<br>(1) 每次只能移动一个盘子;<br>(2) 盘子只能从柱子顶端滑出移到下一根柱子;<br>(3) 盘子只能叠在比它大的盘子上。</p><p>请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子，你需要原地修改栈。</p><blockquote><p>吐槽：直接把第一根柱子和最后一根换一下不就得了嘛😂</p></blockquote><ul><li><p><strong>情况1</strong>：n=1只有一个盘子，直接把A移动到C就可以了</p></li><li><p><strong>情况2：</strong>n=2有两个盘子👇</p></li></ul><p><img src=".\tower1.gif" alt=""></p><ul><li><p><strong>情况3</strong>：n&gt;2 ,把 n 个盘子也看成两个部分，一部分有 1 个盘子，另一部分有 n - 1个盘子。</p><p><img src=".\tower2.gif" alt=""></p></li></ul><blockquote><p>你可能会问：“那 n - 1 个盘子是怎么从 A 移到 C 的呢？”</p><p>注意，当你在思考这个问题的时候，就将<strong>最初的 n 个盘子从 A 移到 C 的问题，转化成了将 n - 1 个盘子从 A 移到 C 的问题， 依次类推，直至转化成 1 个盘子的问题时，问题也就解决了</strong>。这就是分治的思想。（引用力扣作者<a href="https://leetcode-cn.com/problems/hanota-lcci/solution/tu-jie-yi-nuo-ta-de-gu-shi-ju-shuo-dang-64ge-pan-z/">z1m🔗</a>）</p></blockquote><h2 id="算法求解"><a href="#算法求解" class="headerlink" title="算法求解"></a>算法求解</h2><ul><li>n = 1 时，直接把盘子从 A 移到 C；</li><li>n &gt; 1 时，<ul><li>先把上面 n - 1 个盘子从 A 移到 B（子问题，递归）；</li><li>再将最大的盘子从 A 移到 C；</li><li>再将 B 上 n - 1 个盘子从 B 移到 C（子问题，递归）。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hanota</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; A, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; B, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; C)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n=A.size();<br>        move(n,A,B,C);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; A, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; B, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; C)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>            C.push_back(A.back());<br>            A.pop_back();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//先把上面n-1个盘子从A移到B（子问题，递归）</span><br>            move(n<span class="hljs-number">-1</span>,A,C,B);<br>            <span class="hljs-comment">//再将最大的盘子从 A 移到 C</span><br>            C.push_back(A.back());<br>            A.pop_back();<br>            <span class="hljs-comment">//再将B上n-1个盘子从B移到C（子问题，递归）</span><br>            move(n<span class="hljs-number">-1</span>,B,A,C);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-算法总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回文与进制转化</title>
    <link href="/2021/01/23/%E5%9B%9E%E6%96%87%E4%B8%8E%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96/"/>
    <url>/2021/01/23/%E5%9B%9E%E6%96%87%E4%B8%8E%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p>先来看这一个题目👇</p><h2 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">9. 回文数</a></h2><p>​        判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例1：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 121</span><br><span class="hljs-section">输出: true</span><br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: -121</span><br><span class="hljs-section">输出: false</span><br><span class="hljs-section">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></code></pre></td></tr></table></figure><p>​        回文数一般都很好想，负数就肯定不是回文了，直接false，然后我的两种思路。</p><ol><li><strong>整数转化为字符串</strong>，用循环判断，比较第一个和最后一个，第二个和倒数第二个…</li><li>将这个<strong>整数进行翻转</strong>，然后再和原整数对比。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//思路一实现: 用string库中的to_string()函数(因为浮点数本身表示原因，这个函数对浮点数转化一般不会得到想要的结果)</span><br><span class="hljs-built_in">string</span> s= to_string(number);<br><span class="hljs-keyword">int</span> lens=s.length();<br><span class="hljs-keyword">for</span>();<br><span class="hljs-comment">//思路二实现:</span><br><span class="hljs-comment">//剔除不能翻转的整数</span><br><span class="hljs-keyword">if</span>(x % <span class="hljs-number">10</span> == <span class="hljs-number">0</span> &amp;&amp; x != <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br><span class="hljs-comment">//翻转</span><br><span class="hljs-keyword">int</span> reverteNumber = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> tmp = number;<br>    <span class="hljs-keyword">while</span> (tmp != <span class="hljs-number">0</span>) &#123;<br>        reverteNumber = reverteNumber * <span class="hljs-number">10</span> + tmp % <span class="hljs-number">10</span>;<br>        tmp /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (reverteNumber == number) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br></code></pre></td></tr></table></figure><p>然后再来看一下两道蓝桥的题目</p><h2 id="BASIC-8-回文数"><a href="#BASIC-8-回文数" class="headerlink" title="BASIC-8 回文数"></a>BASIC-8 <a href="http://lx.lanqiao.cn/problem.page?gpid=T47">回文数</a></h2><p><strong>问题描述：</strong></p><p>​        1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p><p><strong>输出格式：</strong></p><p>​        按从小到大的顺序输出满足条件的四位十进制数。</p><blockquote><p>​        一模一样的题目题目对不对，直接写个循环从1000开始判断，按上面的两种思路看这个数是不是回文，是回文则输出，不是则continue下一个直到9999为止，然后我框框框，啪啪啪写下来了，40+行，然后我看到别人(柳诺)的题解👇。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; j &lt;&lt; j &lt;&lt; i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        题目只是让你输出数字，没让你判断是不是回文数，抓住本质问题，做的工作果然还是要少一些😥</p><h2 id="BASIC-7-amp-9-特殊的数字-amp-特殊回文数"><a href="#BASIC-7-amp-9-特殊的数字-amp-特殊回文数" class="headerlink" title="BASIC-7&amp;9  特殊的数字 &amp;特殊回文数"></a>BASIC-7&amp;9 <a href="http://lx.lanqiao.cn/problem.page?gpid=T46"> 特殊的数字</a> &amp;<a href="http://lx.lanqiao.cn/problem.page?gpid=T48">特殊回文数</a></h2><h3 id="特殊数字："><a href="#特殊数字：" class="headerlink" title="特殊数字："></a>特殊数字：</h3><p><strong>问题描述：</strong></p><p>​        153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1×1×1+5×5×5+3×3×3。编程求所有满足这种条件的三位十进制数。</p><blockquote><p>​        我之前这个题也是把个位，十位，百位全部取出来，再判断，但是按照第八题的思路，完全不用这样干，三重循环（i,j,k分别代表个位、十位、百位）,再写判断1×1×1+5×5×5+3×3×3  ？=153，如果等于cout&lt;&lt;i&lt;&lt;j&lt;&lt;k 即可。</p></blockquote><h3 id="特殊回文数"><a href="#特殊回文数" class="headerlink" title="特殊回文数"></a>特殊回文数</h3><p><strong>问题描述：</strong></p><p>​        123321是一个非常特殊的数，它从左边读和从右边读是一样的。输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p><blockquote><p>也是上面第八题的思路，不过五位和六位分别写两个循环。</p></blockquote><hr><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="BASIC-10-十进制转十六进制"><a href="#BASIC-10-十进制转十六进制" class="headerlink" title="BASIC-10 十进制转十六进制"></a>BASIC-10 <a href="http://lx.lanqiao.cn/problem.page?gpid=T49">十进制转十六进制</a></h2><p><strong>问题描述：</strong></p><p>​        十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。<br>​        给出一个非负整数，将它表示成十六进制的形式。</p><ul><li>输入格式：输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647。  如：30</li><li>输出格式：输出这个整数的16进制表示。如: 1E</li></ul><p>第一眼看到这个题的时候我都没得犹豫，直接输出流中调整<code>cout&lt;&lt;hex&lt;&lt;number;</code>，当然这也是一种耍赖的做法，默认<code>cout&lt;&lt;hex&lt;&lt;number;</code>输出的是1e，题目要求那个字母大写，引入<code>iomanip</code>中的<code>setiosflags(ios::uppercase)</code>调整即可。记住hex，dec，oct，bin和这个<code>iomanip</code>和函数（前提是oj系统中带这个库），就可以快速处理<strong>非大数问题</strong>的进制转化问题了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-built_in">cout</span> &lt;&lt; setiosflags(ios::uppercase)&lt;&lt; hex &lt;&lt; n;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BASIC-11-十六进制转十进制"><a href="#BASIC-11-十六进制转十进制" class="headerlink" title="BASIC-11 十六进制转十进制"></a>BASIC-11 <a href="http://lx.lanqiao.cn/problem.page?gpid=T50">十六进制转十进制</a></h2><p><strong>问题描述</strong>：</p><p>​        从键盘输入一个<strong>不超过8位的正的十六进制数</strong>字符串，将它转换为正的十进制数后输出。</p><ul><li>样例输入: FFFF</li><li>样例输出: 65535</li></ul><blockquote><p>虽然也可以用cin &gt;&gt; hex &gt;&gt; number;  cout &lt;&lt; number; 这样的语句偷懒，但是还是用常规方法做一下</p></blockquote><p>​        这里<strong>不超过8位的十六进制数字符串</strong>，每个16进制4位嘛，4*8=32，题目输入的都是无符号（正）数。<code>int</code>是32位（带一位符号位，所以只有31位可表示），所有要把转化后的size定义为<code>long long</code>（64位），或者<code>unsigned int</code>也行。然后这边还要注意的一点就是ASCII码加减运算出数字的操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">string</span> number;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> size=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; number;<br><span class="hljs-keyword">int</span> len = number.size();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (number[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span>)<br>&#123;<br>size = size*<span class="hljs-number">16</span> + (number[i] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>size = size*<span class="hljs-number">16</span> + (number[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; size;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BASIC-12-十六进制转八进制"><a href="#BASIC-12-十六进制转八进制" class="headerlink" title="BASIC-12 十六进制转八进制"></a>BASIC-12 <a href="http://lx.lanqiao.cn/problem.page?gpid=T51">十六进制转八进制</a></h2><p><strong>问题描述</strong></p><p>​        给定n个十六进制正整数，输出它们对应的八进制数。</p><p><strong>输入格式</strong><br>　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。<br>　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个<strong>十六进制数长度不超过100000</strong>。</p><p><strong>输出格式</strong><br>　　输出n行，每行为输入对应的八进制正整数。</p><p>　　<strong>【注意</strong>】<br>　　输入的十六进制数不会有前导0，比如012A。<br>　　输出的八进制数也不能有前导0。</p><ul><li><p><strong>样例输入</strong>   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">2<br>39<br>123ABC<br></code></pre></td></tr></table></figure></li><li><p><strong>样例输出</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">71</span><br><span class="hljs-number">4435274</span><br></code></pre></td></tr></table></figure><blockquote><p>tip：先将十六进制数转换成某进制数，再由某进制数转换成八进制。</p></blockquote></li></ul><p>我先想的是，16进制转10进制呗，十进制再转8进制。写就完了，然后就有了👇面代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">hex_to_dec</span><span class="hljs-params">(<span class="hljs-built_in">string</span> str)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> len = str.size();<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (str[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>)<br>&#123;<br>sum = sum * <span class="hljs-number">16</span> + (str[i] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>sum = sum * <span class="hljs-number">16</span> + (str[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dec_to_oct</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> oct)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">10000</span>];<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (oct!=<span class="hljs-number">0</span>)<br>&#123;<br>a[i++]= oct % <span class="hljs-number">8</span>;<br>oct /= <span class="hljs-number">8</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i<span class="hljs-number">-1</span>; j &gt;= <span class="hljs-number">0</span>; j--)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; a[j];<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">string</span> a[N];<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> oct = hex_to_dec(a[i]);<br>dec_to_oct(oct);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        然后就是无情的未通过，检查了好处时间发现题目这么一句话<strong>十六进制数长度不超过100000</strong>，大数问题了，long long都不顶用。改呗没办法😶</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> b, s, a;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-comment">//用2进制做转化</span><br>    <span class="hljs-built_in">string</span> arr[<span class="hljs-number">16</span>] = &#123; <span class="hljs-string">&quot;0000&quot;</span>, <span class="hljs-string">&quot;0001&quot;</span>, <span class="hljs-string">&quot;0010&quot;</span>, <span class="hljs-string">&quot;0011&quot;</span>, <span class="hljs-string">&quot;0100&quot;</span>, <span class="hljs-string">&quot;0101&quot;</span>, <span class="hljs-string">&quot;0110&quot;</span>, <span class="hljs-string">&quot;0111&quot;</span>, <span class="hljs-string">&quot;1000&quot;</span>,<br>        <span class="hljs-string">&quot;1001&quot;</span>, <span class="hljs-string">&quot;1010&quot;</span>, <span class="hljs-string">&quot;1011&quot;</span>, <span class="hljs-string">&quot;1100&quot;</span>, <span class="hljs-string">&quot;1101&quot;</span>, <span class="hljs-string">&quot;1110&quot;</span>, <span class="hljs-string">&quot;1111&quot;</span> &#125;;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;m;<br>    m[<span class="hljs-string">&quot;000&quot;</span>] = <span class="hljs-string">&quot;0&quot;</span>; m[<span class="hljs-string">&quot;001&quot;</span>] = <span class="hljs-string">&quot;1&quot;</span>; m[<span class="hljs-string">&quot;010&quot;</span>] = <span class="hljs-string">&quot;2&quot;</span>; m[<span class="hljs-string">&quot;011&quot;</span>] = <span class="hljs-string">&quot;3&quot;</span>; m[<span class="hljs-string">&quot;100&quot;</span>] = <span class="hljs-string">&quot;4&quot;</span>;<br>    m[<span class="hljs-string">&quot;101&quot;</span>] = <span class="hljs-string">&quot;5&quot;</span>; m[<span class="hljs-string">&quot;110&quot;</span>] = <span class="hljs-string">&quot;6&quot;</span>; m[<span class="hljs-string">&quot;111&quot;</span>] = <span class="hljs-string">&quot;7&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s;<br>        <span class="hljs-keyword">int</span> lens = s.length();<br>        <span class="hljs-comment">// 变成2进制存储</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; lens; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (s[j]&gt;<span class="hljs-string">&#x27;9&#x27;</span>)<br>            &#123;<br>                b += arr[s[j] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                b += arr[s[j] - <span class="hljs-string">&#x27;0&#x27;</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> lenb = b.length();<br>        <span class="hljs-comment">//lenb不是3的整数倍就在前面补0</span><br>        <span class="hljs-keyword">if</span> (lenb%<span class="hljs-number">3</span>==<span class="hljs-number">1</span>)<br>        &#123;<br>            b = <span class="hljs-string">&quot;00&quot;</span> + b;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (lenb%<span class="hljs-number">3</span>==<span class="hljs-number">2</span>)<br>        &#123;<br>            b = <span class="hljs-string">&quot;0&quot;</span> + b;<br>        &#125;<br>        <span class="hljs-comment">//这时b就变成合格的二进制数了</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; lenb; j+=<span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-comment">//取子串，每三位取一次</span><br>            <span class="hljs-built_in">string</span> temp = b.substr(j, <span class="hljs-number">3</span>);<br>            <span class="hljs-built_in">string</span> t = m[temp];<br>            <span class="hljs-comment">//如果16进制第一位是0001，填上0,1,2个0，前三个数字组成的子串为000</span><br>            <span class="hljs-keyword">if</span> (j==<span class="hljs-number">0</span> &amp;&amp; t==<span class="hljs-string">&quot;0&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; t;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        b = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>改的方法也是借鉴了<a href="https://github.com/liuchuo/Lanqiao/blob/master/%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/C%2B%2B/BASIC-12%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%20%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%AB%E8%BF%9B%E5%88%B6.cpp">柳诺的题解</a>但是她有一段代码我觉得没有必要，我删掉了也是过了oj的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> &amp;&amp; t == <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>             flag = <span class="hljs-number">1</span>;<br>             <span class="hljs-keyword">continue</span>;<br>         &#125;<br><span class="hljs-comment">//这里还做了第二次判断，如果第一个三位为0且第二个三位为0，则也忽略。</span><br>         <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">3</span> &amp;&amp; t == <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>             <span class="hljs-keyword">continue</span>;<br>         &#125;<br></code></pre></td></tr></table></figure><p>但是题目是不会出现连续六个0的情况的，出现这种情况是0000为第一个十六进制数，再填上2个零，但是题目标注了</p><ul><li>输入的<strong>十六进制数不会有前导0</strong>，比如012A。</li><li>输出的八进制数也不能有前导0。</li></ul><p>感觉自己数电和计算机组成原理白学了😥，纸上做题时，16进制展开，然后三个三个划一组变成8进制，到code时却没想到这个过程。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-lanqiao -刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式概述与原则</title>
    <link href="/2021/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%8E%9F%E5%88%99/"/>
    <url>/2021/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="Design-Patterns-Introduce"><a href="#Design-Patterns-Introduce" class="headerlink" title="Design Patterns Introduce"></a>Design Patterns Introduce</h1><p>C++设计模式配套资源：</p><ol><li>在线网站：<a href="https://refactoring.guru/">https://refactoring.guru/</a> </li><li>课本：<strong>可复用面向对象</strong>软件的基础</li></ol><p><img src="./book.png" alt="设计模式"></p><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>“每一个模式描述了一个在我们周围<strong>不断重复发生的问题</strong>， 以及该问题的<strong>解决方案的核心</strong>。这样，你就能<strong>一次又一次地使用该方案而不必做重复劳动</strong>”。                              ————Christopher Alexander</p><h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h2><ul><li>理解松耦合设计思想</li><li>掌握面向对象设计原则</li><li>掌握重构技法改善设计</li><li>掌握GOF核心设计模式</li></ul><h2 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h2><p><img src="./oop.png" alt=""></p><h3 id="向下：三大面对对象机制"><a href="#向下：三大面对对象机制" class="headerlink" title="向下：三大面对对象机制"></a>向下：三大面对对象机制</h3><ul><li><strong>封装</strong>，隐藏内部实现</li><li><strong>继承</strong>，复用现有代码</li><li><strong>多态</strong>，改写对象行为</li></ul><h3 id="向上：抽象意义"><a href="#向上：抽象意义" class="headerlink" title="向上：抽象意义"></a>向上：抽象意义</h3><p>深刻把握面向对象机制所<strong>带来的抽象意义</strong>，理解如何使用 这些机制来表达现实世界，掌握什么是“<strong>好的面向对象设计</strong>”</p><h2 id="软件的复杂性"><a href="#软件的复杂性" class="headerlink" title="软件的复杂性"></a>软件的复杂性</h2><p>建筑商从来不会去想给一栋已建好的100层高的 楼房底下再新修一个小地下室——这样做花费 极大而且注定要失败。然而令人惊奇的是，软件 系统的用户在要求作出类似改变时却不会仔细考 虑，而且他们认为这只是需要简单编程的事。       </p><p>​                                                                                                                            ——Object-Oriented Analysis and Design with Applications</p><h3 id="复杂性的原因"><a href="#复杂性的原因" class="headerlink" title="复杂性的原因"></a>复杂性的原因</h3><ul><li>客户需求的变化</li><li>技术平台的变化</li><li>开发团队的变化</li><li>市场环境的变化  …</li></ul><h3 id="复杂性的解决"><a href="#复杂性的解决" class="headerlink" title="复杂性的解决"></a>复杂性的解决</h3><h4 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h4><p>人们面对复杂性有一个常见的做法：即分而治之，将<strong>大问题分解为多个小问题</strong>，将<strong>复杂问题分解为多个简单问题</strong>。</p><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。 由于不能掌握全部的复杂对象，我们<strong>选择忽视它的非本质细节</strong>， 而去处理泛化和理想化了的对象模型。</p><h2 id="示例：结构化VS面对对象"><a href="#示例：结构化VS面对对象" class="headerlink" title="示例：结构化VS面对对象"></a>示例：结构化VS面对对象</h2><p>实现画图任务的两个代码实现(伪码)，如果我们增加不同的画图功能，对比两个代码会怎么样改变。</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Shape1.h</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Line</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>Point start;<br>    Point end;<br><br>Line(<span class="hljs-keyword">const</span> Point&amp; start, <span class="hljs-keyword">const</span> Point&amp; end)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;start = start;<br>        <span class="hljs-keyword">this</span>-&gt;end = end;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rect</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>Point leftUp;<br>    <span class="hljs-keyword">int</span> width;<br><span class="hljs-keyword">int</span> height;<br><br>Rect(<span class="hljs-keyword">const</span> Point&amp; leftUp, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;leftUp = leftUp;<br>        <span class="hljs-keyword">this</span>-&gt;width = width;<br><span class="hljs-keyword">this</span>-&gt;height = height;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-comment">//增加</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span>&#123;</span><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//MainForm1.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form &#123;<br><span class="hljs-keyword">private</span>:<br>Point p1;<br>Point p2;<br><br><span class="hljs-built_in">vector</span>&lt;Line&gt; lineVector;<br><span class="hljs-built_in">vector</span>&lt;Rect&gt; rectVector;<br><span class="hljs-comment">//改变</span><br><span class="hljs-built_in">vector</span>&lt;Circle&gt; circleVector;<br><br><span class="hljs-keyword">public</span>:<br>MainForm()&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p1.x = e.X;<br>p1.y = e.Y;<br><br><span class="hljs-comment">//...</span><br>Form::OnMouseDown(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p2.x = e.X;<br>p2.y = e.Y;<br><br><span class="hljs-keyword">if</span> (rdoLine.Checked)&#123;<br><span class="hljs-function">Line <span class="hljs-title">line</span><span class="hljs-params">(p1, p2)</span></span>;<br>lineVector.push_back(line);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rdoRect.Checked)&#123;<br><span class="hljs-keyword">int</span> width = <span class="hljs-built_in">abs</span>(p2.x - p1.x);<br><span class="hljs-keyword">int</span> height = <span class="hljs-built_in">abs</span>(p2.y - p1.y);<br><span class="hljs-function">Rect <span class="hljs-title">rect</span><span class="hljs-params">(p1, width, height)</span></span>;<br>rectVector.push_back(rect);<br>&#125;<br><span class="hljs-comment">//改变</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (...)&#123;<br><span class="hljs-comment">//...</span><br>circleVector.push_back(circle);<br>&#125;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">this</span>-&gt;Refresh();<br><br>Form::OnMouseUp(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>&#123;<br><br><span class="hljs-comment">//针对直线</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lineVector.size(); i++)&#123;<br>e.Graphics.DrawLine(Pens.Red,<br>lineVector[i].start.x, <br>lineVector[i].start.y,<br>lineVector[i].end.x,<br>lineVector[i].end.y);<br>&#125;<br><br><span class="hljs-comment">//针对矩形</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rectVector.size(); i++)&#123;<br>e.Graphics.DrawRectangle(Pens.Red,<br>rectVector[i].leftUp,<br>rectVector[i].width,<br>rectVector[i].height);<br>&#125;<br><br><span class="hljs-comment">//改变</span><br><span class="hljs-comment">//针对圆形</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; circleVector.size(); i++)&#123;<br>e.Graphics.DrawCircle(Pens.Red,<br>circleVector[i]);<br>&#125;<br><br><span class="hljs-comment">//...</span><br>Form::OnPaint(e);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Shape2.h</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~Shape() &#123; &#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Line</span>:</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br>Point start;<br>Point end;<br><br>Line(<span class="hljs-keyword">const</span> Point&amp; start, <span class="hljs-keyword">const</span> Point&amp; end)&#123;<br><span class="hljs-keyword">this</span>-&gt;start = start;<br><span class="hljs-keyword">this</span>-&gt;end = end;<br>&#125;<br><br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawLine(Pens.Red, <br>start.x, start.y,end.x, end.y);<br>&#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rect</span>:</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br>Point leftUp;<br><span class="hljs-keyword">int</span> width;<br><span class="hljs-keyword">int</span> height;<br><br>Rect(<span class="hljs-keyword">const</span> Point&amp; leftUp, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)&#123;<br><span class="hljs-keyword">this</span>-&gt;leftUp = leftUp;<br><span class="hljs-keyword">this</span>-&gt;width = width;<br><span class="hljs-keyword">this</span>-&gt;height = height;<br>&#125;<br><br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawRectangle(Pens.Red,<br>leftUp,width,height);<br>&#125;<br><br>&#125;;<br><br><span class="hljs-comment">//增加</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> :</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawCircle(Pens.Red,<br>...);<br>&#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//MainForm.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form &#123;<br><span class="hljs-keyword">private</span>:<br>Point p1;<br>Point p2;<br><br><span class="hljs-comment">//针对所有形状</span><br><span class="hljs-built_in">vector</span>&lt;Shape*&gt; shapeVector;<br><br><span class="hljs-keyword">public</span>:<br>MainForm()&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p1.x = e.X;<br>p1.y = e.Y;<br><br><span class="hljs-comment">//...</span><br>Form::OnMouseDown(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p2.x = e.X;<br>p2.y = e.Y;<br><br><span class="hljs-keyword">if</span> (rdoLine.Checked)&#123;<br>shapeVector.push_back(<span class="hljs-keyword">new</span> Line(p1,p2));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rdoRect.Checked)&#123;<br><span class="hljs-keyword">int</span> width = <span class="hljs-built_in">abs</span>(p2.x - p1.x);<br><span class="hljs-keyword">int</span> height = <span class="hljs-built_in">abs</span>(p2.y - p1.y);<br>shapeVector.push_back(<span class="hljs-keyword">new</span> Rect(p1, width, height));<br>&#125;<br><span class="hljs-comment">//改变</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (...)&#123;<br><span class="hljs-comment">//...</span><br>shapeVector.push_back(circle);<br>&#125;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">this</span>-&gt;Refresh();<br><br>Form::OnMouseUp(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>&#123;<br><br><span class="hljs-comment">//针对所有形状</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; shapeVector.size(); i++)&#123;<br><br>shapeVector[i]-&gt;Draw(e.Graphics); <span class="hljs-comment">//多态调用，各负其责</span><br>&#125;<br><br><span class="hljs-comment">//...</span><br>Form::OnPaint(e);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="软件设计的金科玉律：复用"><a href="#软件设计的金科玉律：复用" class="headerlink" title="软件设计的金科玉律：复用"></a>软件设计的金科玉律：复用</h2><h1 id="面向对象原则"><a href="#面向对象原则" class="headerlink" title="面向对象原则"></a>面向对象原则</h1><p>面向对象设计的最大的优势在于<code>抵御变化</code></p><h2 id="重新认识OOP"><a href="#重新认识OOP" class="headerlink" title="重新认识OOP"></a>重新认识OOP</h2><p>🌿 理解<strong>隔离变化</strong></p><p>从宏观层面来看，面向对象的构建方式更能适应软件的变化， 能将变化所带来的影响减为最小。</p><p>🌿 <strong>各司其职</strong></p><ul><li>从微观层面来看，面向对象的方式更强调各个类的“责任” </li><li>由于需求变化导致的新增类型不应该影响原来类型的实现—— 是所谓各负其责</li></ul><p>🌿 <strong>对象是什么</strong></p><ul><li>从语言实现层面来看，对象封装了代码和数据。 </li><li>从规格层面讲，对象是一系列可被使用的公共接口。 </li><li>从概念层面讲，对象是某种拥有责任的抽象。</li></ul><h2 id="面向对象的设计原则（8种）"><a href="#面向对象的设计原则（8种）" class="headerlink" title="面向对象的设计原则（8种）"></a>面向对象的设计原则（8种）</h2><h3 id="🌿依赖倒置原则（DIP）"><a href="#🌿依赖倒置原则（DIP）" class="headerlink" title="🌿依赖倒置原则（DIP）"></a>🌿依赖倒置原则（DIP）</h3><ul><li>高层模块(<strong>稳定</strong>)不应该依赖于低层模块(<strong>变化</strong>)，二者都应该依赖于抽象(<strong>稳定</strong>) 。</li><li>抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖抽象(稳定)。</li></ul><p>上一段示例代码的两个例子，<strong>高层模块依赖于稳定的Shape虚基类</strong>。</p><p><img src="./DIP.png" style="zoom: 80%;" /></p><h3 id="🌿开放封闭原则（OCP）"><a href="#🌿开放封闭原则（OCP）" class="headerlink" title="🌿开放封闭原则（OCP）"></a>🌿开放封闭原则（OCP）</h3><ul><li>对扩展开放，对更改封闭。 </li><li>类模块应该是可扩展的，但是不可修改。</li></ul><h3 id="🌿单一职责原则（SRP）"><a href="#🌿单一职责原则（SRP）" class="headerlink" title="🌿单一职责原则（SRP）"></a>🌿单一职责原则（SRP）</h3><ul><li>一个类应该仅有一个引起它变化的原因。 </li><li>变化的方向隐含着类的责任。</li></ul><h3 id="🌿Liskov-替换原则（LSP）"><a href="#🌿Liskov-替换原则（LSP）" class="headerlink" title="🌿Liskov 替换原则（LSP）"></a>🌿Liskov 替换原则（LSP）</h3><ul><li>子类必须能够替换它们的基类(IS-A)（继承时思考是不是组合关系）。 </li><li>继承表达类型抽象。</li></ul><h3 id="🌿接口隔离原则（ISP）"><a href="#🌿接口隔离原则（ISP）" class="headerlink" title="🌿接口隔离原则（ISP）"></a>🌿接口隔离原则（ISP）</h3><ul><li>不应该强迫客户程序依赖它们不用的方法。</li><li>接口应该<strong>小而完备</strong>。</li></ul><h3 id="🌿优先使用对象组合，而不是类继承"><a href="#🌿优先使用对象组合，而不是类继承" class="headerlink" title="🌿优先使用对象组合，而不是类继承"></a>🌿优先使用对象组合，而不是类继承</h3><ul><li>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。</li><li>继承在某种程度上破坏了封装性，子类父类耦合度高。 </li><li>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li></ul><h3 id="🌿封装变化点"><a href="#🌿封装变化点" class="headerlink" title="🌿封装变化点"></a>🌿封装变化点</h3><p>使用封装来创建对象之间的分界层，让设计者可以在分界层的 一侧进行修改，而不会对另一侧产生不良的影响，从而实现层 次间的松耦合。</p><h3 id="🌿针对接口编程，而不是针对实现编程"><a href="#🌿针对接口编程，而不是针对实现编程" class="headerlink" title="🌿针对接口编程，而不是针对实现编程"></a>🌿针对接口编程，而不是针对实现编程</h3><ul><li>不将变量类型声明为某个特定的具体类，而是声明为某个接口。 </li><li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。 </li><li>减少系统中各部分的依赖关系，从而实现“高内聚、松耦合” 的类型设计方案。</li></ul><h2 id="接口标准化（分工协作）"><a href="#接口标准化（分工协作）" class="headerlink" title="接口标准化（分工协作）"></a>接口标准化（分工协作）</h2><p>标准化工作往往是一个产业强盛的标准，这一点在学习计网的时候也有体会到（不同协议标准规定统一促进行业发展）</p><h3 id="以史为鉴"><a href="#以史为鉴" class="headerlink" title="以史为鉴"></a>以史为鉴</h3><p><img src="./history1.png" alt=""></p><p><img src="./history2.png" alt=""></p><h2 id="设计原则提升为设计经验"><a href="#设计原则提升为设计经验" class="headerlink" title="设计原则提升为设计经验"></a>设计原则提升为设计经验</h2><h3 id="🎈设计习语-Design-Idioms"><a href="#🎈设计习语-Design-Idioms" class="headerlink" title="🎈设计习语 Design Idioms"></a>🎈设计习语 Design Idioms</h3><p> Design Idioms 描述与特定编程语言相关的低层模式，技巧， 惯用法（cpp primer，more effect cpp）。 </p><h3 id="🎈设计模式-Design-Patterns"><a href="#🎈设计模式-Design-Patterns" class="headerlink" title="🎈设计模式 Design Patterns"></a>🎈设计模式 Design Patterns</h3><p>Design Patterns主要描述的是“<strong>类与相互通信的对象之间的组织关系</strong>，包括它们的角色、职责、协作方式等方面。 </p><h3 id="🎈架构模式-Architectural-Patterns"><a href="#🎈架构模式-Architectural-Patterns" class="headerlink" title="🎈架构模式 Architectural Patterns"></a>🎈架构模式 Architectural Patterns</h3><p> Architectural Patterns描述<strong>系统中与基本结构组织关系密切的高层模式</strong>，包括子系统划分，职责，以及如何组织它们之间关系的规则。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2020/07/12/git/"/>
    <url>/2020/07/12/git/</url>
    
    <content type="html"><![CDATA[<h1 id="GIT（版本管理软件）"><a href="#GIT（版本管理软件）" class="headerlink" title="GIT（版本管理软件）"></a>GIT（版本管理软件）</h1><p>git只能管理各种文本信息文件，如（.txt/.py等等），像图片(.jpg,.doc则不能被管理).</p><p>这是看莫烦Git系列视频个人所做笔记<a href="https://morvanzhou.github.io/tutorials/others/git/1-1-why/">点击进入莫烦bolg</a></p><h2 id="第一个版本库repository"><a href="#第一个版本库repository" class="headerlink" title="第一个版本库repository"></a>第一个版本库repository</h2><h3 id="1、常用命令"><a href="#1、常用命令" class="headerlink" title="1、常用命令"></a>1、常用命令</h3><p>1、<code>mkdir</code> 生成一个文件夹</p><p>2、<code>cd</code>   cd ~ 返回根目录（普通用户和super用户不同）</p><p>3、<code>pwd</code>显示当前目录 (目录不要含中文)</p><h3 id="2、关键操作"><a href="#2、关键操作" class="headerlink" title="2、关键操作"></a>2、关键操作</h3><h4 id="创建版本库-init"><a href="#创建版本库-init" class="headerlink" title="创建版本库(init)"></a>创建版本库(init)</h4><ul><li><p>创建用户<code>git config --global user.name &quot;qingcai56&quot;</code></p></li><li><p>为刚才创建的用户指定邮箱<code>git config --global user.email &quot;qc@email.com&quot;</code></p></li><li><p><code>config user.name和config user.email</code>查询用户</p></li><li><p><code>git init</code>生成git的管理文件</p></li><li><p><code>start git</code>打开git的管理文件</p></li></ul><h4 id="添加文件管理（add）"><a href="#添加文件管理（add）" class="headerlink" title="添加文件管理（add）"></a>添加文件管理（add）</h4><ul><li><code>touch  **.py/txt</code>创建一个文件</li><li><code>git add **.py/txt</code>把文件加到git版本库之中</li><li><code>git status</code>查看当前版本库的状态</li><li><code>git add .</code>add所有程序</li></ul><h4 id="提交改变（commit）"><a href="#提交改变（commit）" class="headerlink" title="提交改变（commit）"></a>提交改变（commit）</h4><ul><li><code>git commit -m &quot;create 1.py&quot;</code> 提交这次改变,引号之中为本次提交说明</li><li><strong>可以多次add文件用commit一次可以提交多个文件</strong></li></ul><p><img src="./0.png" alt=""></p><h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><p>​        在git之中，每一次提交（commit）修改，都会被单独保存起来，就好像游戏通过某一关要保存存档一样</p><h3 id="1、使用命令"><a href="#1、使用命令" class="headerlink" title="1、使用命令"></a>1、使用命令</h3><p>1、<code>git log</code> 查看之前所有的修改记录</p><p>2、<code>git satus</code>查看当前文件的状态</p><p>3、<code>git diff</code>比较修改后的状态<strong>(modified)</strong>和之前提交状态有什么不同<strong>(Unmodified)</strong></p><p>4、<code>git diff --cached</code> 比较<strong>Staged</strong>的状态和上一个<strong>Commit</strong>的状态的不同</p><p>5、<code>git diff HEAD</code>再次修改Stage状态文件比较<strong>stage&amp;unstage</strong>有什么不同</p><h3 id="2、比较三种不同形式的diff"><a href="#2、比较三种不同形式的diff" class="headerlink" title="2、比较三种不同形式的diff"></a>2、比较三种不同形式的diff</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 对比三种不同 diff 形式</span><br><span class="hljs-meta">$</span><span class="bash"> git diff HEAD     <span class="hljs-comment"># staged &amp; unstaged</span></span><br><br>@@ -1 +1,3 @@<br>-a = 1  # 已 staged<br>+a = 2  # 已 staged<br>+b = 1  # 已 staged<br>+c = b  # 还没 add 去 stage (unstaged)<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git diff          <span class="hljs-comment"># unstaged</span></span><br><br>@@ -1,2 +1,3 @@<br> a = 2  # 注: 前面没有 +<br> b = 1  # 注: 前面没有 +<br>+c = b  # 还没 add 去 stage (unstaged)<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git diff --cached <span class="hljs-comment"># staged</span></span><br><br>@@ -1 +1,2 @@<br>-a = 1  # 已 staged<br>+a = 2  # 已 staged<br>+b = 1  # 已 staged<br></code></pre></td></tr></table></figure><h2 id="回到从前-reset"><a href="#回到从前-reset" class="headerlink" title="回到从前(reset)"></a>回到从前(reset)</h2><h3 id="1、修改已commit的版本"><a href="#1、修改已commit的版本" class="headerlink" title="1、修改已commit的版本"></a>1、修改已commit的版本</h3><p>​        有时候我们把文件<code>commit</code>到版本库之中，却发现还忘了附上另一个文件，例如我们最后一个<code>commit</code>是<code>change 2</code>，版本号<code>904e1ba</code>，那么我们的把附件也<code>commit</code>进<code>change 2</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add 2.py</span><br><span class="hljs-meta">$</span><span class="bash"> git commit --amend --no-edit   <span class="hljs-comment"># &quot;--no-edit&quot;: 不编辑, 直接合并到上一个 commit</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline    <span class="hljs-comment"># &quot;--oneline&quot;: 每个 commit 内容显示在一行</span></span><br></code></pre></td></tr></table></figure><h3 id="2、从Stage返回-reset-到add之前"><a href="#2、从Stage返回-reset-到add之前" class="headerlink" title="2、从Stage返回(reset)到add之前"></a>2、从Stage返回(reset)到add之前</h3><p>​        有时我们已经把文件<code>add</code>到<code>stage</code>之中，但是想补充一些新得内容，这时，我们得回到<code>add</code>之前。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git status -s <span class="hljs-comment"># &quot;-s&quot;: status 的缩写模式</span></span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>M  1.py     # staged<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git reset 1.py</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Unstaged changes after reset:<br>M1.py<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py     # unstaged<br></code></pre></td></tr></table></figure><h3 id="3、reset回到comimit之前（时光穿梭）"><a href="#3、reset回到comimit之前（时光穿梭）" class="headerlink" title="3、reset回到comimit之前（时光穿梭）"></a>3、reset回到comimit之前（时光穿梭）</h3><p>​        每个 <code>commit</code> 都有自己的 <code>id</code> 数字号, <code>HEAD</code> 是一个指针, 指引当前的状态是在哪个 <code>commit</code>. 最近的一次 <code>commit</code> 在最右边, 我们如果要回到过去, 就是让 <code>HEAD</code> 回到过去并 <code>reset</code> 此时的 <code>HEAD</code> 到过去的位置.</p><p><img src="./-1.png" alt=""></p><p><img src="./-2.png" alt=""></p><p><img src="./-3.png" alt=""></p><p><img src="./-4.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 不管我们之前有没有做了一些 add 工作, 这一步让我们回到 上一次的 commit</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD</span>    <br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>HEAD is now at 904e1ba change 2<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 看看所有的<span class="hljs-built_in">log</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 回到 c6762a1 change 1</span><br><span class="hljs-meta">#</span><span class="bash"> 方式1: <span class="hljs-string">&quot;HEAD^&quot;</span> 几个箭头就是返回几个版本</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD^</span>   <br><br><span class="hljs-meta">#</span><span class="bash"> 方式2: <span class="hljs-string">&quot;commit id&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard c6762a1</span><br><br><span class="hljs-meta">#</span><span class="bash"> 方式3: <span class="hljs-string">&quot;HEAD~&quot;</span> ~后面加数字,数字几就是几个版本</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard ~1</span><br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 看看现在的 <span class="hljs-built_in">log</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p>​        把版本库指到<code>c6762a1</code>后再用<code>log --oneline</code>查看发现之前得<code>change 2</code>没了,这是我么则需要用<code>git reflog</code>查看近期对HEAD得所有改动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reflog</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>c6762a1 HEAD@&#123;0&#125;: reset: moving to c6762a1<br>904e1ba HEAD@&#123;1&#125;: commit (amend): change 2<br>0107760 HEAD@&#123;2&#125;: commit: change 2<br>c6762a1 HEAD@&#123;3&#125;: commit: change 1<br>13be9a7 HEAD@&#123;4&#125;: commit (initial): create 1.py<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 重复reset步骤就能回到change2</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard 904e1ba</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><h2 id="回到从前"><a href="#回到从前" class="headerlink" title="回到从前"></a>回到从前</h2><h3 id="1、改写文件checkout"><a href="#1、改写文件checkout" class="headerlink" title="1、改写文件checkout"></a>1、改写文件checkout</h3><p>​        之前的<code>reset</code>是针对整个版本库，但是有时只想修改某一个文件，这时我们就要使用checkout语句时单个文件回到过去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br><br>---------------------<br><span class="hljs-meta">$</span><span class="bash"> git checkout c6762a1 -- 1.py</span><br><br><br>---------------------<br><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;back to change 1 and add comment for 1.py&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>47f167e back to change 1 and add comment for 1.py<br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><h2 id="分支（branch）"><a href="#分支（branch）" class="headerlink" title="分支（branch）"></a>分支（branch）</h2><p>​        有时我们需要不同的版本库（如开发软件的稳定版本和测试版），git提供分支（branch）管理去满足我们的需求。</p><p><img src=".\1.svg" alt="1"></p><h3 id="1、用到的命令"><a href="#1、用到的命令" class="headerlink" title="1、用到的命令"></a>1、用到的命令</h3><p>1、<code>git log --oneline --graph</code> 用<code>--graph</code>查看分支.</p><p>2、<code>git branch dev</code> 创建分支<code>dev</code>.</p><p>3、<code>git checkout dev</code> 切换到分支dev.</p><p>4、<code>git checkout -b  dev</code>创建并切换到分支dev.</p><p>5、<code>git merge dev</code> 把分支推送到master，这个操作要在master上完成.</p><p>6、<code>git commit -am &quot;change 3 in dev&quot;</code>  简化操作先add再commit，不过要在um状态下.</p><h3 id="2、操作代码"><a href="#2、操作代码" class="headerlink" title="2、操作代码"></a>2、操作代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b  dev               <span class="hljs-comment">#创建和切换到新建的分支</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Switched to a new branch &#x27;dev&#x27;<br><br>--------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>* dev                                 # 这时 HEAD 已经被切换至 dev 分支<br>  master<br>  <br>--------------------------            # 修改dev中文件并提交 <br><span class="hljs-meta">$</span><span class="bash"> git commit -am <span class="hljs-string">&quot;change 3 in dev&quot;</span>    <span class="hljs-comment"># &quot;-am&quot;: add 所有改变 并直接 commit</span></span><br><br>--------------------------  <br><span class="hljs-meta">$</span><span class="bash"> git checkout master                 <span class="hljs-comment"># 切换至 master 才能把其他分支合并过来</span></span><br><span class="hljs-meta">$</span><span class="bash"> git merge --no-ff -m <span class="hljs-string">&quot;keep merge info&quot;</span> dev     <span class="hljs-comment"># 保留 merge 信息</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>*   c60668f keep merge info<br>|\  <br>| * f9584f8 change 3 in dev                   # 这里就能看出, 我们建立过一个分支<br>|/  <br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p>​        <strong>注意：如果直接 <code>git merge dev</code>, git 会采用默认的 <code>Fast forward</code> 格式进行 <code>merge</code>, 这样 <code>merge</code> 的这次操作不会有 <code>commit</code> 信息. <code>log</code> 中也不会有分支的图案. 我们可以采取 <code>--no-ff</code> 这种方式保留 <code>merge</code> 的 <code>commit</code> 信息.</strong></p><h2 id="merge分支冲突"><a href="#merge分支冲突" class="headerlink" title="merge分支冲突"></a>merge分支冲突</h2><p>​        如果我们在dev中做出修改，但是master这时被修改了,我们要进行合并，该怎么办呢？这是git会报出Automatic merge failed; fix conflicts and then commit the result.的错误，我们需打开文件手动调试保存那些内容。</p><p><img src="./2.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这是 master 的 <span class="hljs-built_in">log</span></span><br>* 3d7796e change 4 in master # 这一条 commit 和 dev 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br>-----------------------------<br><span class="hljs-meta">#</span><span class="bash"> 这是 dev 的 <span class="hljs-built_in">log</span></span><br>* f7d2e3a change 3 in dev   # 这一条 commit 和 master 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br>  dev<br>* master<br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git merge dev</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Auto-merging 1.py<br>CONFLICT (content): Merge conflict in 1.py<br>Automatic merge failed; fix conflicts and then commit the result.<br><br><span class="hljs-meta">#</span><span class="bash"> 打开vscode，git已经帮我们把冲突标记出来了</span><br>a = 1<br><span class="hljs-meta">#</span><span class="bash"> I went back to change 1</span><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> master</span><br>=======<br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> dev</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br>-------------------------<br><span class="hljs-meta">#</span><span class="bash"> 手动调试并提交</span><br>a = 1<br><span class="hljs-meta">#</span><span class="bash"> I went back to change 1</span><br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> master and dev</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -am <span class="hljs-string">&quot;solve conflict&quot;</span></span><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>*   7810065 solve conflict<br>|\  <br>| * f7d2e3a change 3 in dev<br>* | 3d7796e change 4 in master<br>|/  <br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br></code></pre></td></tr></table></figure><h2 id="rebase分支冲突"><a href="#rebase分支冲突" class="headerlink" title="rebase分支冲突"></a>rebase分支冲突</h2><p>​        更高级的合并方式<code>rebase</code>，共享的 branch 是 <code>branch B</code>, 而我在 <code>branch A</code> 上工作, 有一天我发现<code>branch B</code>已经有一些小更新, 我也想试试我的程序和这些小更新兼不兼容, 我也我想合并, 这时就可以用 <code>rebase</code> 来补充我的分支<code>branch A</code>的内容. 补充完以后, 和后面那张图的 <code>merge</code> 不同, 我还是继续在 <code>C3</code> 上工作, 不过此时的 <code>C3</code> 的本质却不一样了, 因为吸收了那些小更新. 所以我们用 <code>C3&#39;</code> 来代替.</p><p><img src="./3.png" alt=""></p><p><img src="./4.png" alt=""></p><p><img src="./5.png" alt=""></p><p><img src="./6.png" alt=""></p><p>​        可以看出我们工作的<code>C3</code>已经不是从<code>C1</code>衍生来的，这一点和<code>merge</code>不一样，<code>merge</code>是把C3和<code>C4</code>合并成一个新的<code>C5</code>,如果是rebase，那你就把别人的共享内容给改写了。</p><p><img src="./7.png" alt=""></p><h3 id="1、错误示例把主分支基于你的分支修改"><a href="#1、错误示例把主分支基于你的分支修改" class="headerlink" title="1、错误示例把主分支基于你的分支修改"></a>1、错误示例把主分支基于你的分支修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这是 master 的 <span class="hljs-built_in">log</span></span><br>* 3d7796e change 4 in master # 这一条 commit 和 dev 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br>-----------------------------<br><br><span class="hljs-meta">#</span><span class="bash"> 这是 dev 的 <span class="hljs-built_in">log</span></span><br>* f7d2e3a change 3 in dev   # 这一条 commit 和 master 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br>-----------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>  dev<br>* master<br>-------------------------<br><br><span class="hljs-meta">$</span><span class="bash"> git rebase dev</span> <br><span class="hljs-meta">#</span><span class="bash"> 输出  显示有conflict要手动修改</span><br>First, rewinding head to replay your work on top of it...<br>Applying: change 3 in dev<br>Using index info to reconstruct a base tree...<br>M1.py<br>Falling back to patching base and 3-way merge...<br>Auto-merging 1.py<br>CONFLICT (content): Merge conflict in 1.py<br>error: Failed to merge in the changes.<br>Patch failed at 0001 change 3 in dev<br>The copy of the patch that failed is found in: .git/rebase-apply/patch<br><br>When you have resolved this problem, run &quot;git rebase --continue&quot;.<br>If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.<br>To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.<br>-------------------------<br><br><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git rebase --<span class="hljs-built_in">continue</span></span><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>* c844cb1 change 4 in master    # 这条 commit 原本的id=3d7796e, 所以 master 的历史被修改<br>* f7d2e3a change 3 in dev       # rebase 过来的 dev commit<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p><strong>!! 注意 !!</strong> 这个例子也说明了使用 <code>rebase</code> 要万分小心, 千万不要在共享的 branch 中 <code>rebase</code>, 不然就像上面那样, 现在 <code>master</code> 的历史已经被 <code>rebase</code> 改变了. <code>master</code> 当中别人提交的 <code>change 4</code> 就被你无情地修改掉了, 所以千万不要在共享分支中使用 <code>rebase</code>.</p><h2 id="临时修改（stash）"><a href="#临时修改（stash）" class="headerlink" title="临时修改（stash）"></a>临时修改（stash）</h2><p>​        想想有天在开开心心地改进代码, 突然接到老板的一个电话说要改之前的一个程序. 怎么办? 虽然还需要很久时间才能改进完自己的代码, 可我有强迫症, 又不想把要改的程序和自己改进代码的部分一起 <code>commit</code> 了.</p><p>这时 <code>stash</code> 就是我的救星了. 用 <code>stash</code> 能先将我的那改进的部分放在一边分隔开来. 再另外单独处理老板的任务.</p><h3 id="1、临时修改代码"><a href="#1、临时修改代码" class="headerlink" title="1、临时修改代码"></a>1、临时修改代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout dev</span><br></code></pre></td></tr></table></figure><p>在 <code>dev</code> 中的 <code>1.py</code> 中加上一行 <code># feel happy</code>, 然后老板的电话来了, 可是我还没有改进完这些代码. 所以我就用 <code>stash</code> 将这些改变暂时放一边.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py<br>------------------ <br><span class="hljs-meta">$</span><span class="bash"> git stash</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Saved working directory and index state WIP on dev: f7d2e3a change 3 in dev<br>HEAD is now at f7d2e3a change 3 in dev<br>-------------------<br><span class="hljs-meta">$</span><span class="bash"> git status</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>On branch dev<br>nothing to commit, working directory clean     # 干净得很<br></code></pre></td></tr></table></figure><p>​        然后去从<code>master</code>中建立新分支去完成老板的任务，<code>merge</code>合并到<code>master</code>后我们在转会dev.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout dev</span><br><span class="hljs-meta">$</span><span class="bash"> git stash list    <span class="hljs-comment"># 查看在 stash 中的缓存</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>stash@&#123;0&#125;: WIP on dev: f7d2e3a change 3 in dev<br><span class="hljs-meta">$</span><span class="bash"> git stash pop</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>On branch dev<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>modified:   1.py<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br>Dropped refs/stash@&#123;0&#125; (23332b7edc105a579b09b127336240a45756a91c)<br>----------------------<br><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py     # 和最开始一样了<br></code></pre></td></tr></table></figure><h2 id="github在线管理"><a href="#github在线管理" class="headerlink" title="github在线管理"></a>github在线管理</h2><h3 id="1、建立版本库"><a href="#1、建立版本库" class="headerlink" title="1、建立版本库"></a>1、建立版本库</h3><h3 id="2、链接本地版本库"><a href="#2、链接本地版本库" class="headerlink" title="2、链接本地版本库"></a>2、链接本地版本库</h3><h3 id="3、本地推送修改"><a href="#3、本地推送修改" class="headerlink" title="3、本地推送修改"></a>3、本地推送修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote add origin https://github.com/MorvanZhou/git-demo.git</span><br><span class="hljs-meta">#</span><span class="bash"> 上面https是莫烦的，链接时记得换成自己的</span><br><span class="hljs-meta">$</span><span class="bash"> git push -u origin master     <span class="hljs-comment"># 推送本地 master 去 origin</span></span><br><span class="hljs-meta">$</span><span class="bash"> git push -u origin dev        <span class="hljs-comment"># 推送本地 dev  去 origin</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-git -how use</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
