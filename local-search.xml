<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GoF_分类</title>
    <link href="/2021/01/24/GoF-%E5%88%86%E7%B1%BB/"/>
    <url>/2021/01/24/GoF-%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="GOF-23-模式分类"><a href="#GOF-23-模式分类" class="headerlink" title="GOF-23 模式分类"></a>GOF-23 模式分类</h1><h2 id="从目的来看："><a href="#从目的来看：" class="headerlink" title="从目的来看："></a><a href="ttps://refactoring.guru/design-patterns/catalog">从目的来看</a>：</h2><ul><li><strong>创建型(Creational)模式</strong> ：将<strong>对象的部分创建工作延迟到子类或者其他对象</strong>，从而应对需求变化为对象创建时具体类型实现引来的冲击。</li><li><strong>结构型(Structural) 模式</strong>： 通过<strong>类继承或者对象组合获得更灵活的结构</strong>，从而应对需求变化为对象的结构带来的冲击。</li><li><strong>行为（Behavioral)模式</strong> ：通过<strong>类继承或者对象组合来划分类与对象间的职责</strong>，从而应对需求变化为多个交互的对象带来 的冲击。</li></ul><p><img src=".\GoF_classify.png" alt=""></p><h2 id="从范围来看"><a href="#从范围来看" class="headerlink" title="从范围来看"></a>从范围来看</h2><ul><li>类模式处理类与子类的静态关系。 </li><li>对象模式处理对象间的动态关系。</li></ul><h2 id="从封装变化角度分类"><a href="#从封装变化角度分类" class="headerlink" title="从封装变化角度分类"></a>从封装变化角度分类</h2><p><img src=".\classify.png" alt="李老师的分类方法"></p><h2 id="重构获得模式-Refactoring-to-Patterns"><a href="#重构获得模式-Refactoring-to-Patterns" class="headerlink" title="重构获得模式 Refactoring to Patterns"></a>重构获得模式 Refactoring to Patterns</h2><ul><li>面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足 “<strong>应对变化，提高复用</strong>”的设计 。</li><li>现代软件设计的特征是“需求的频繁变化”。设计模式的要点是 “<strong>寻找变化点</strong>，然后在变化点处应用设计模式，从而来更好地应对需求的变化”.“<strong>什么时候、什么地点应用设计模式</strong>”比“理解设计模式结构本身”更为重要。</li><li>设计模式的应用<strong>不宜先入为主</strong>，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“<strong>Refactoring to Patterns</strong>”是目前普遍公认的最好的使用设计模式的方法。</li></ul><p><img src=".\refactoring.png" alt="李老师推荐图书"></p><h2 id="重构关键技法"><a href="#重构关键技法" class="headerlink" title="重构关键技法"></a>重构关键技法</h2><h3 id="🌿静态-gt-动态"><a href="#🌿静态-gt-动态" class="headerlink" title="🌿静态 -&gt; 动态"></a>🌿静态 -&gt; 动态</h3><h3 id="🌿早绑定-gt-晚绑定"><a href="#🌿早绑定-gt-晚绑定" class="headerlink" title="🌿早绑定 -&gt; 晚绑定"></a>🌿早绑定 -&gt; 晚绑定</h3><h3 id="🌿继承-gt-组合"><a href="#🌿继承-gt-组合" class="headerlink" title="🌿继承 -&gt; 组合"></a>🌿继承 -&gt; 组合</h3><h3 id="🌿编译时依赖-gt-运行时依赖"><a href="#🌿编译时依赖-gt-运行时依赖" class="headerlink" title="🌿编译时依赖 -&gt; 运行时依赖"></a>🌿编译时依赖 -&gt; 运行时依赖</h3><h3 id="🌿紧耦合-gt-松耦合"><a href="#🌿紧耦合-gt-松耦合" class="headerlink" title="🌿紧耦合 -&gt; 松耦合"></a>🌿紧耦合 -&gt; 松耦合</h3>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoF_组件协作</title>
    <link href="/2021/01/24/GoF-%E7%BB%84%E4%BB%B6%E5%8D%8F%E4%BD%9C/"/>
    <url>/2021/01/24/GoF-%E7%BB%84%E4%BB%B6%E5%8D%8F%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="“组件协作”模式"><a href="#“组件协作”模式" class="headerlink" title="“组件协作”模式"></a>“组件协作”模式</h1><p>​            现代软件专业分工之后的第一个结果是“<strong>框架与应用程序</strong>的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合是二者之间协作时常用的模式。</p><p><strong>典型模式：</strong></p><ul><li>Template Method  </li><li>Observer / Event </li><li>Strategy</li></ul><h2 id="🌿Template-Method"><a href="#🌿Template-Method" class="headerlink" title="🌿Template Method"></a>🌿Template Method</h2><p>​            定义一<strong>个操作中的算法的骨架 (稳定)</strong>，而将一些<strong>步骤延迟 (变化)到子类</strong>中。Template Method使得子类可以<strong>不改变 (复用)一个算法的结构</strong>即可重定义<strong>(override 重写)</strong>该算法的 某些特定步骤。                                                                                      ——《设计模式》GoF</p><h3 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h3><ul><li>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</li><li>如何在确定稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？</li></ul><h3 id="样例👇"><a href="#样例👇" class="headerlink" title="样例👇"></a>样例👇</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//例1</span><br><span class="hljs-comment">//程序库开发人员in template1_lib.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Library</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step3</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step5</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//应用程序开发人员in template1_app.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Step2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step4</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//...</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Library <span class="hljs-title">lib</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">Application <span class="hljs-title">app</span><span class="hljs-params">()</span></span>;<br><br>lib.Step1();<br><br><span class="hljs-keyword">if</span> (app.Step2())&#123;<br>lib.Step3();<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>app.Step4();<br>&#125;<br><br>lib.Step5();<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//程序库开发人员 in template2_lib.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Library</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//稳定 template method， ！！稳定中有变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span>&#123;<br>        <br>        Step1();<br><br>        <span class="hljs-keyword">if</span> (Step2()) &#123; <span class="hljs-comment">//支持变化 ==&gt; 虚函数的多态调用</span><br>            Step3(); <br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>            Step4(); <span class="hljs-comment">//支持变化 ==&gt; 虚函数的多态调用</span><br>        &#125;<br><br>        Step5();<br><br>    &#125;<br>    <span class="hljs-comment">//  !!基类要定义虚析构函数，不写可能子类的析构函数调不到</span><br><span class="hljs-keyword">virtual</span> ~Library()&#123; &#125;<br><br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step1</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//稳定</span><br>        <span class="hljs-comment">//.....</span><br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step3</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//稳定</span><br>        <span class="hljs-comment">//.....</span><br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Step5</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//稳定</span><br><span class="hljs-comment">//.....</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">Step2</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-comment">//变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Step4</span><span class="hljs-params">()</span> </span>=<span class="hljs-number">0</span>; <span class="hljs-comment">//变化</span><br>&#125;;<br><br><span class="hljs-comment">//应用程序开发人员 in template2_app.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> :</span> <span class="hljs-keyword">public</span> Library &#123;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">Step2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//... 子类重写实现</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Step4</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//... 子类重写实现</span><br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Library* pLib=<span class="hljs-keyword">new</span> Application();<br>    lib-&gt;Run();<br><br><span class="hljs-keyword">delete</span> pLib;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src=".\bind.png" alt="两段代码区别"></p><blockquote><p>设计模式：在变化和稳定之间寻找<strong>隔离点</strong>，从而分离它们，管理变化（把兔子关进笼子里）。如果没有稳定，或者没有变化，设计模式也将不起作用。</p></blockquote><h3 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h3><p><img src=".\template.png" alt=""></p><h3 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>Template Method模式是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（<strong>虚函数的多态性</strong>，<em>函数指针也可以实现</em>） 为很多应用程序框架提供了<strong>灵活的扩展点</strong>，是代码复用方面的基本实现结构。</li><li>除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你”的<strong>反向控制结构</strong>是Template Method的典型应用。</li><li>在具体实现方面，被Template Method调用的虚方法可以具有实现，也可以没有任何实现（<strong>抽象方法、纯虚方法</strong>），但一般推荐将它们设置为<strong>protected</strong>方法。</li></ul><blockquote><p><a href="https://refactoring.guru/design-patterns/template-method"> 网站章节学习资料</a></p></blockquote><p><br></p><hr><p><br></p><h2 id="🌿Strategy"><a href="#🌿Strategy" class="headerlink" title="🌿Strategy"></a>🌿Strategy</h2><p>​            定义一系列算法，把它们一个个封装起来，并且使它们可<strong>互相替换（变化）</strong>。该模式使得<strong>算法可独立于使用它的客户程序</strong>(稳定)而变（扩展，子类化）。                                                                                                                                                    ——《设计模式》GoF</p><h3 id="动机（Motivation）-1"><a href="#动机（Motivation）-1" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h3><ul><li>在软件构建过程中，某些<strong>对象使用的算法可能多种多样</strong>，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个<strong>性能</strong>负担(大量判断)。</li><li>如何在运行时根据需要透明地更改对象的算法？将算法与对象本 身解耦，从而避免上述问题？</li></ul><h3 id="样例👇（税总计算）"><a href="#样例👇（税总计算）" class="headerlink" title="样例👇（税总计算）"></a>样例👇（税总计算）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 1</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">TaxBase</span> &#123;</span><br>CN_Tax,<br>US_Tax,<br>DE_Tax,<br>FR_Tax       <span class="hljs-comment">//更改</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SalesOrder</span>&#123;</span><br>    TaxBase tax;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">CalculateTax</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        <br>        <span class="hljs-keyword">if</span> (tax == CN_Tax)&#123;<br>            <span class="hljs-comment">//CN***********</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tax == US_Tax)&#123;<br>            <span class="hljs-comment">//US***********</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tax == DE_Tax)&#123;<br>            <span class="hljs-comment">//DE***********</span><br>        &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tax == FR_Tax)&#123;  <span class="hljs-comment">//更改</span><br><span class="hljs-comment">//...</span><br>&#125;<br><br>        <span class="hljs-comment">//...</span><br>     <span class="hljs-comment">//动态地去看这个问题...</span><br>     &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaxStrategy</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//纯虚方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//基类一定要写虚析构</span><br>    <span class="hljs-keyword">virtual</span> ~TaxStrategy()&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CNTax</span> :</span> <span class="hljs-keyword">public</span> TaxStrategy&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>&#123;<br>        <span class="hljs-comment">//***********</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">USTax</span> :</span> <span class="hljs-keyword">public</span> TaxStrategy&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>&#123;<br>        <span class="hljs-comment">//***********</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DETax</span> :</span> <span class="hljs-keyword">public</span> TaxStrategy&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>&#123;<br>        <span class="hljs-comment">//***********</span><br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">//扩展</span><br><span class="hljs-comment">//*********************************</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FRTax</span> :</span> <span class="hljs-keyword">public</span> TaxStrategy&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Context&amp; context)</span></span>&#123;<br><span class="hljs-comment">//.........</span><br>&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SalesOrder</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    TaxStrategy* strategy;<br><br><span class="hljs-keyword">public</span>:<br>    SalesOrder(StrategyFactory* strategyFactory)&#123;<br>        <span class="hljs-comment">//这里以后可以用工厂方法</span><br>        <span class="hljs-keyword">this</span>-&gt;strategy = strategyFactory-&gt;NewStrategy();<br>    &#125;<br>    ~SalesOrder()&#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;strategy;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">CalculateTax</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-function">Context <span class="hljs-title">context</span><span class="hljs-params">()</span></span>;<br>        <br>        <span class="hljs-keyword">double</span> val = <br>            strategy-&gt;Calculate(context); <span class="hljs-comment">//多态调用</span><br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>method 1 违背开放封闭原则，在编译后的二进制代码修改大, method 2 SalesOrder稳定，算法可变化。</p></blockquote><h3 id="结构（Structure）-1"><a href="#结构（Structure）-1" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h3><p><img src=".\strategy.png" alt=""></p><h3 id="要点总结-1"><a href="#要点总结-1" class="headerlink" title="要点总结"></a>要点总结</h3><ul><li>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在<strong>运行时</strong>方便地根据需要在各个算法之间进行切换（多态调用）。</li><li>Strategy模式提供了用条件判断语句以外的另一种选择，消除<strong>条件判断语句（bad smell，结构化思维）</strong>，就是在<strong>解耦合</strong>。含有许多条件判断语句的代码通常都需要Strategy模式。</li><li>如果Strategy对象<strong>没有实例变量</strong>(单例模式实现)，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。</li></ul><p><a href="https://refactoring.guru/design-patterns/strategy"> 网站章节学习资料</a></p><p><br></p><hr><p><br></p><h2 id="🌿Observer-Event"><a href="#🌿Observer-Event" class="headerlink" title="🌿Observer/Event"></a>🌿Observer/Event</h2><p>​            定义对象间的一种<strong>一对多（变化）的依赖关系</strong>，以便当一个对象(Subject)的状态发生改变时，所有<strong>依赖于它的对象都得到通知并自动更新</strong>。                                                                                                                                                                                ——《设计模式》GoF</p><h3 id="动机（Motivation）-2"><a href="#动机（Motivation）-2" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h3><ul><li>在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系” —— 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化。</li><li>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</li></ul><h3 id="示例👇（文件分割器）"><a href="#示例👇（文件分割器）" class="headerlink" title="示例👇（文件分割器）"></a>示例👇（文件分割器）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 1</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSplitter</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-built_in">string</span> m_filePath;<br><span class="hljs-keyword">int</span> m_fileNumber;<br>    <span class="hljs-comment">// ！！违背依赖倒置原则，ProgressBar（太过细节），可能是label，可能是控制台的···</span><br>    <span class="hljs-comment">// 依赖它的抽象基类，它的功能-&gt;实现通知</span><br>ProgressBar* m_progressBar;<br><br><span class="hljs-keyword">public</span>:<br>FileSplitter(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; filePath, <span class="hljs-keyword">int</span> fileNumber, ProgressBar* progressBar) :<br>m_filePath(filePath), <br>m_fileNumber(fileNumber),<br>m_progressBar(progressBar)&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//1.读取大文件</span><br><br><span class="hljs-comment">//2.分批次向小文件中写入</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_fileNumber; i++)&#123;<br><span class="hljs-comment">//...</span><br>            <span class="hljs-keyword">if</span>(m_progressBar!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">float</span> progressValue = m_fileNumber;<br>progressValue = (i + <span class="hljs-number">1</span>) / progressValue;<br>m_progressBar-&gt;setValue(progressValue);    <br>            &#125;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form<br>&#123;<br>    <span class="hljs-comment">//文件路径</span><br>TextBox* txtFilePath;<br>    <span class="hljs-comment">//文件被分割的数量</span><br>TextBox* txtFileNumber;<br>ProgressBar* progressBar;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Button1_Click</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">string</span> filePath = txtFilePath-&gt;getText();<br><span class="hljs-keyword">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());<br><br><span class="hljs-function">FileSplitter <span class="hljs-title">splitter</span><span class="hljs-params">(filePath, number, progressBar)</span></span>;<br><br>splitter.split();<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//method 2</span><br><span class="hljs-comment">//IProgress 抽象接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IProgress</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoProgress</span><span class="hljs-params">(<span class="hljs-keyword">float</span> value)</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~IProgress()&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSplitter</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-built_in">string</span> m_filePath;<br><span class="hljs-keyword">int</span> m_fileNumber;<br><br>List&lt;IProgress*&gt;  m_iprogressList; <span class="hljs-comment">// 抽象通知机制，支持多个观察者</span><br><br><span class="hljs-keyword">public</span>:<br>FileSplitter(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; filePath, <span class="hljs-keyword">int</span> fileNumber) :<br>m_filePath(filePath), <br>m_fileNumber(fileNumber)&#123;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//1.读取大文件</span><br><br><span class="hljs-comment">//2.分批次向小文件中写入</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_fileNumber; i++)&#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">float</span> progressValue = m_fileNumber;<br>progressValue = (i + <span class="hljs-number">1</span>) / progressValue;<br>onProgress(progressValue);<span class="hljs-comment">//发送通知</span><br>&#125;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addIProgress</span><span class="hljs-params">(IProgress* iprogress)</span></span>&#123;<br>m_iprogressList.push_back(iprogress);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeIProgress</span><span class="hljs-params">(IProgress* iprogress)</span></span>&#123;<br>m_iprogressList.remove(iprogress);<br>&#125;<br><br><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onProgress</span><span class="hljs-params">(<span class="hljs-keyword">float</span> value)</span></span>&#123;<br><br>List&lt;IProgress*&gt;::iterator itor=m_iprogressList.begin();<br><br><span class="hljs-keyword">while</span> (itor != m_iprogressList.end() )<br>(*itor)-&gt;DoProgress(value); <span class="hljs-comment">//更新进度条</span><br>itor++;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">// 多继承使用的场景：主继承类+接口（抽象类）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form, <span class="hljs-keyword">public</span> IProgress<br>&#123;<br>TextBox* txtFilePath;<br>TextBox* txtFileNumber;<br><br>ProgressBar* progressBar;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Button1_Click</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">string</span> filePath = txtFilePath-&gt;getText();<br><span class="hljs-keyword">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());<br><br>ConsoleNotifier cn;<br><br><span class="hljs-function">FileSplitter <span class="hljs-title">splitter</span><span class="hljs-params">(filePath, number)</span></span>;<br><br>splitter.addIProgress(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//订阅通知</span><br>splitter.addIProgress(&amp;cn)； <span class="hljs-comment">//订阅通知</span><br><br>splitter.split();<br><br>splitter.removeIProgress(<span class="hljs-keyword">this</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoProgress</span><span class="hljs-params">(<span class="hljs-keyword">float</span> value)</span></span>&#123;<br>progressBar-&gt;setValue(value);<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsoleNotifier</span> :</span> <span class="hljs-keyword">public</span> IProgress &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoProgress</span><span class="hljs-params">(<span class="hljs-keyword">float</span> value)</span></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;.&quot;</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="结构（Structure）-2"><a href="#结构（Structure）-2" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h3><p><img src=".\observer.png" alt=""></p><ul><li>样例中 Observer是IProgress，而MainForm、ConsoleNotifier是ConcreteObserver</li><li>样例中 Subject是FileSplitter（其实FileSplitter可以提取addIProgress，removeIProgress和onProgress）</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使<strong>二者之间的依赖关系达致松耦合</strong>。</li></ul><blockquote><p>IProgress不管多少个，FileSplitter都不变，保持复用性</p></blockquote><ul><li>目标发送通知时，<strong>无需指定观察者</strong>，通知（可以携带通知信息作为参数）会自动传播。</li></ul><blockquote><p>FileSplitter执行DoProgress不关心是那个观察者，抽象地进行通知，自动传播</p></blockquote><ul><li>观察者自己决定是否需要订阅通知，目标对象对此一无所知。 </li></ul><blockquote><p>MainForm执行addIProgress</p></blockquote><ul><li>Observer模式是<strong>基于事件的UI框架</strong>中非常常用的设计模式，也是<strong>MVC模式</strong>的一个重要组成部分。</li></ul><p><a href="https://refactoring.guru/design-patterns/observer"> 网站章节学习资料，核心：抽象的通知依赖关系</a></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>王道数据结构_第一章绪论</title>
    <link href="/2021/01/23/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%AA%E8%AE%BA/"/>
    <url>/2021/01/23/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>​    学习资料：《数据结构》（严蔚敏）   《王道2022数据结构考研复习指导》</p><p>​    视频网站：<a href="https://www.bilibili.com/video/BV1b7411N798?p=6">王道2021/2020版免费视频</a></p><p>​    leetcode题库：<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md">算法+数据结构</a></p><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><p><strong>考纲内容：</strong></p><ul><li>数据结构的相关<strong>概念和术语</strong>。</li><li>数据结构的<strong>三要素</strong>: 逻辑结构、物理结构和数据结构。</li><li>算法<strong>时间复杂度</strong>和<strong>空间复杂度</strong>的<strong>分析和计算</strong>。</li></ul><h2 id="数据结构的基本概念"><a href="#数据结构的基本概念" class="headerlink" title="数据结构的基本概念"></a>数据结构的基本概念</h2><p><img src=".\data_structe.png" alt="data_structe" style="zoom:67%;" /></p><h3 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h3><h4 id="🌿数据"><a href="#🌿数据" class="headerlink" title="🌿数据"></a>🌿数据</h4><p>​        <strong>数据（data）</strong>是<strong>信息的载体</strong>，是描述客观事物属性的数、字符及所有能<strong>输入到计算机中并能被计算机程序识别和处理的符号的总称</strong>。数据是计算机程序加工的原料。</p><h4 id="🌿数据元素、数据项"><a href="#🌿数据元素、数据项" class="headerlink" title="🌿数据元素、数据项"></a>🌿数据元素、数据项</h4><p>​        <strong>数据元素（data element）</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干个<strong>数据项（data item）</strong>组成，<strong>数据项是构成数据元素的不可分割的最小单位</strong>。</p><blockquote><p>例：学生记录就是一个数据元素，它由学号、姓名、性别等数据组成。</p></blockquote><h4 id="🌿数据结构、数据对象"><a href="#🌿数据结构、数据对象" class="headerlink" title="🌿数据结构、数据对象"></a>🌿数据结构、数据对象</h4><p>​        <strong>数据结构（data structure）</strong>是<strong>相互之间</strong>存在一种或多种特定关系的<strong>数据元素的集合</strong>。</p><p>​        <strong>数据对象（data object）</strong>是具有<strong>相同性质的数据元素</strong>的集合，是数据的一个子集。</p><h3 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h3><h4 id="✨逻辑结构"><a href="#✨逻辑结构" class="headerlink" title="✨逻辑结构"></a>✨逻辑结构</h4><ol><li><strong>集合</strong>：结构中的数据元素<strong>同属一个集合</strong>，除此之外没有其他关系。</li><li><strong>线性结构</strong>：结构中的数据元素之间<strong>存在着一个对一个</strong>的关系，除第一个元素外，每一个元素都有前驱，除最后一个外每一个都有后继</li><li><strong>树型结构</strong>：结构中数据元素之间<strong>存在一个对多个的关系</strong>。</li><li><strong>图状结构（网状结构）</strong>：结构中数据元素之间存在<strong>多对多的关系</strong>。</li></ol><p><img src=".\structure.png" alt="四种结构"></p><p><img src=".\linear.webp" alt="linear" style="zoom: 67%;" /></p><p><img src=".\none_linear.webp" alt="none_linear" style="zoom:67%;" /></p><h4 id="✨物理结构（存储结构）"><a href="#✨物理结构（存储结构）" class="headerlink" title="✨物理结构（存储结构）"></a>✨物理结构（存储结构）</h4><ol><li><p><strong>顺序存储</strong>：把<strong>逻辑相邻的元素存储在物理位置上也相邻的存储单元中</strong>，元素之间的关系由存储单元的相邻关系来体现。</p></li><li><p><strong>链式存储</strong>：<strong>逻辑上项邻的元素在物理位置上可以不相邻</strong>，借助指示元素存储地址的<strong>指针</strong>来表示元素之间的位置关系。</p></li><li><p><strong>索引存储</strong>：在<strong>存储信息的同时，还建立附加的索引表</strong>。索引表的每项称为索引项（形式是<code>关键字，地址</code>）</p></li><li><p><strong>散列存储</strong>：根据<strong>元素的关键字直接计算出该元素的存储地址</strong>，有称为哈希（Hash）存储。</p><p><img src=".\store_sum.png" alt=""></p></li></ol><p><img src=".\hash.jpg" alt="hash"></p><blockquote><p>顺序存储支持随机访问（即按下标访问），但对其数据操作较为复杂。</p></blockquote><p>数据的<strong>存储结构</strong>会影响<strong>存储空间分配的方便程度</strong>和<strong>对数据运算的速度</strong></p><h4 id="✨数据的运算"><a href="#✨数据的运算" class="headerlink" title="✨数据的运算"></a>✨数据的运算</h4><p>施加在数据上的运算包括运算的定义和实现。</p><ul><li><strong>运算的定义</strong>：<strong>针对逻辑结构</strong>，指出运算的<strong>功能</strong>。</li></ul><blockquote><p>入队/栈，出队/栈，插队，插结点…</p></blockquote><ul><li><strong>运算的实现</strong>： <strong>争对存储结构</strong>，指出运算的具体步骤。</li></ul><blockquote><p>不同存储结构实现上面的方法不一样，如线性/非线性</p></blockquote><h3 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h3><h4 id="🎈数据类型"><a href="#🎈数据类型" class="headerlink" title="🎈数据类型"></a>🎈数据类型</h4><p>数据类型是<strong>一个值的集合</strong>和第一在此集合上的<strong>一组操作</strong>总称。</p><ol><li><strong>原子类型</strong>。其值不可再分（bool，int）</li><li><strong>结构类型</strong>。其值可以再分解为若干成分（分量）的数据类型（如<code>struct  ×××&#123;   &#125;;</code> 结构体）。</li></ol><h4 id="🎈抽象数据类型（ADT-Abstract-Data-Type）"><a href="#🎈抽象数据类型（ADT-Abstract-Data-Type）" class="headerlink" title="🎈抽象数据类型（ADT,Abstract Data Type）"></a>🎈抽象数据类型（ADT,Abstract Data Type）</h4><p><strong>抽象数据类型</strong>是抽象组织与之相关的操作,ADT用数学化的语言定义数据的逻辑结构、运算，与<strong>具体实现</strong>无关。</p><p>常用<strong>三元组来表示</strong> （D,S,P）</p><p>D是数据对象，S是D上的关系集，P是对D的基本操作集。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">ADT 抽象数据类型名&#123;<br>数据对象: &lt;数据对象的定义&gt;<br>数据关系: &lt;数据关系的定义&gt;<br>基本操作: &lt;基本操作的定义&gt;<br>&#125;ADT 抽象数据类型名<br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>当我们探讨某一种数据结构时，一般按以下步骤来学习</p><p>①定义<strong>逻辑结构</strong>（数据元素之间的关系）</p><p>②定义<strong>数据运算</strong>（实现什么样的需求，对这种逻辑结构进行什么样的运算）</p><p>③<strong>确定存储结构</strong>，实现数据结构，并实现一些对数据结构的基本运算。</p><p>④去了解该<strong>数据结构的应用</strong>。</p><p><br></p><p><br></p><hr><p><br></p><p><br></p><h2 id="算法和算法评价"><a href="#算法和算法评价" class="headerlink" title="算法和算法评价"></a>算法和算法评价</h2><p><img src=".\algorithm.png" alt="algorithm" style="zoom:67%;" /></p><h2 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h2><blockquote><p><strong>程序 = 数据结构 + 算法</strong></p></blockquote><p><strong>数据结构</strong>：如何把现实世界的问题信息化，将信息存入计算机。同时还要实现对数据结构的基本操作。</p><p><strong>算法</strong>：如何处理这些信息，去解决实际问题。</p><blockquote><p>主要学习<code>数据结构的应用</code>、查找和排序算法。</p></blockquote><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><h4 id="🎉有穷性"><a href="#🎉有穷性" class="headerlink" title="🎉有穷性"></a>🎉有穷性</h4><p><strong>有穷性</strong>：一个<strong>算法必须总再执行有穷步之后结束</strong>，且<strong>每一步</strong>都可在<strong>又穷时间</strong>内完成(但<strong>程序可以是无穷</strong>的)。</p><h4 id="🎉确定性"><a href="#🎉确定性" class="headerlink" title="🎉确定性"></a>🎉确定性</h4><p><strong>确定性</strong>：算法中<strong>每条指令必须有确切</strong>的含义，对于<strong>相同的输入</strong>只能得到<strong>相同的输出</strong>。</p><h4 id="🎉可行性"><a href="#🎉可行性" class="headerlink" title="🎉可行性"></a>🎉可行性</h4><p><strong>可行性</strong>：算法中描述的操作都可以通过已经实现的<strong>基本运算执行有限次</strong>来实现。</p><h4 id="🎉输入"><a href="#🎉输入" class="headerlink" title="🎉输入"></a>🎉输入</h4><p>一个算法有<strong>零个或多个输入</strong>，这些输入取自于某个特定的对象集合</p><h4 id="🎉输出"><a href="#🎉输出" class="headerlink" title="🎉输出"></a>🎉输出</h4><p>一个算法有<strong>一个或多个输出</strong>，这些输出是与输入有着某些特定关系的量。</p><blockquote><p>y = f（x） x是输入，y是输出 f（）为算法。</p></blockquote><h3 id="算法的评价指标"><a href="#算法的评价指标" class="headerlink" title="算法的评价指标"></a>算法的评价指标</h3><h4 id="🌹正确性"><a href="#🌹正确性" class="headerlink" title="🌹正确性"></a>🌹正确性</h4><p>算法应能够正确地解决问题</p><h4 id="🌹可读性"><a href="#🌹可读性" class="headerlink" title="🌹可读性"></a>🌹可读性</h4><p>算法应该有良好地可读性，以帮助人们理解（要无歧义地描述解决问题的步骤）</p><h4 id="🌹健壮性"><a href="#🌹健壮性" class="headerlink" title="🌹健壮性"></a>🌹健壮性</h4><p>输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果</p><h4 id="🌹效率与低存储量需求"><a href="#🌹效率与低存储量需求" class="headerlink" title="🌹效率与低存储量需求"></a>🌹效率与低存储量需求</h4><p>算法的<strong>执行时间</strong>和算法<strong>执行过程中所需要的最大存储空间</strong></p><p>算法执行<strong>省时（时间复杂度低）</strong>、<strong>省内存（空间复杂度低）</strong></p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><blockquote><p>算法的效率如何度量？ <code>时间复杂度</code>+<code>空间复杂段</code></p></blockquote><p><strong>算法的时间复杂度</strong>不能在事后<strong>统计运行时间的方式</strong>进行统计，因为算法和机器性能、编程语言（编译器）…因素有关，所以时间复杂度采用事前<strong>预估算法时间开销T（n）与问题规模n</strong>的关系 T=T(n)。</p><h4 id="🦊O渐近上界"><a href="#🦊O渐近上界" class="headerlink" title="🦊O渐近上界"></a>🦊O渐近上界</h4><p><img src=".\O.png" alt=""></p><h4 id="🦊Ω渐近下界"><a href="#🦊Ω渐近下界" class="headerlink" title="🦊Ω渐近下界"></a>🦊Ω渐近下界</h4><p><img src=".\omiga.png" alt=""></p><h4 id="🦊θ准确的界"><a href="#🦊θ准确的界" class="headerlink" title="🦊θ准确的界"></a>🦊θ准确的界</h4><p><img src=".\sita.png" alt=""></p><p><img src=".\sita2.png" alt=""></p><p>我们只关注<code>最坏情况</code>和<code>平均情况</code> 所以我们计算出的O通常是指θ准确界。</p><h4 id="乘法和加法定理"><a href="#乘法和加法定理" class="headerlink" title="乘法和加法定理"></a>乘法和加法定理</h4><p>T(n,m) = T1(n) + T2(n) = O (max ( f(n),g(m) )</p><p>T(n,m) = T1(n) <em> T2(m) = O (f(n) </em> g(m))</p><h4 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h4><p><img src=".\time.png" alt="" style="zoom:60%;" /></p><blockquote><p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n2) &lt; O(n3) &lt; O(2n) &lt; O(n!) &lt; O(n<sup>n</sup>) </strong> 常对幂指阶</p></blockquote><p>我们根据加法规则只需要关注<code>内存循环</code>中的<code>阶数最高</code>部分，所以找求时间复杂度，我就的方法</p><ol><li>找内存循环</li><li>找循环结束条件</li><li>根据结束条件计算内层循环大概在那个数量级</li></ol><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p><strong>空间复杂度</strong>：<strong>内存开销与问题规模n之间的关系</strong>    <strong>S(n)=O (g(n))</strong></p><h4 id="复杂度常量型-S-n-O（1）"><a href="#复杂度常量型-S-n-O（1）" class="headerlink" title="复杂度常量型 S(n)=O（1）"></a>复杂度常量型 S(n)=O（1）</h4><p><img src=".\store33.png" alt="算法可原地工作"></p><h4 id="非常量型："><a href="#非常量型：" class="headerlink" title="非常量型："></a>非常量型：</h4><ol><li>一维数组：int flag[n]，n越大，占的空间越多</li><li>二维数组:  int flag[n][n] , 同上，为n<sup>2</sup></li><li><strong>函数递归调用</strong></li></ol><p><img src=".\DIGUI1.png" alt="递归1，变量无数组"></p><p><img src=".\DIGUI2.png" alt="递归2，函数中有数组"></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-考研 -王道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回文与进制转化</title>
    <link href="/2021/01/23/%E5%9B%9E%E6%96%87%E4%B8%8E%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96/"/>
    <url>/2021/01/23/%E5%9B%9E%E6%96%87%E4%B8%8E%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<pre><code>     本文主要是对蓝桥杯练习系统题库的BASIC-7，8，9（两个回文题目）。BASIC-10,11,12(三个进制转化)的题目总结和拓展,虽然题目不难但是还是有许多可以总结和学习的东西的。</code></pre><h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p>先来看这一个题目👇</p><h2 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">9. 回文数</a></h2><p>​        判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例1：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 121</span><br><span class="hljs-section">输出: true</span><br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: -121</span><br><span class="hljs-section">输出: false</span><br><span class="hljs-section">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></code></pre></td></tr></table></figure><p>​        回文数一般都很好想，负数就肯定不是回文了，直接false，然后我的两种思路。</p><ol><li><strong>整数转化为字符串</strong>，用循环判断，比较第一个和最后一个，第二个和倒数第二个…</li><li>将这个<strong>整数进行翻转</strong>，然后再和原整数对比。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//思路一实现: 用string库中的to_string()函数(因为浮点数本身表示原因，这个函数对浮点数转化一般不会得到想要的结果)</span><br><span class="hljs-built_in">string</span> s= to_string(number);<br><span class="hljs-keyword">int</span> lens=s.length();<br><span class="hljs-keyword">for</span>();<br><span class="hljs-comment">//思路二实现:</span><br><span class="hljs-comment">//剔除不能翻转的整数</span><br><span class="hljs-keyword">if</span>(x % <span class="hljs-number">10</span> == <span class="hljs-number">0</span> &amp;&amp; x != <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br><span class="hljs-comment">//翻转</span><br><span class="hljs-keyword">int</span> reverteNumber = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> tmp = number;<br>    <span class="hljs-keyword">while</span> (tmp != <span class="hljs-number">0</span>) &#123;<br>        reverteNumber = reverteNumber * <span class="hljs-number">10</span> + tmp % <span class="hljs-number">10</span>;<br>        tmp /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (reverteNumber == number) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br></code></pre></td></tr></table></figure><p>然后再来看一下两道蓝桥的题目</p><h2 id="BASIC-8-回文数"><a href="#BASIC-8-回文数" class="headerlink" title="BASIC-8 回文数"></a>BASIC-8 <a href="http://lx.lanqiao.cn/problem.page?gpid=T47">回文数</a></h2><p><strong>问题描述：</strong></p><p>​        1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p><p><strong>输出格式：</strong></p><p>​        按从小到大的顺序输出满足条件的四位十进制数。</p><blockquote><p>​        一模一样的题目题目对不对，直接写个循环从1000开始判断，按上面的两种思路看这个数是不是回文，是回文则输出，不是则continue下一个直到9999为止，然后我框框框，啪啪啪写下来了，40+行，然后我看到别人(柳诺)的题解👇。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; j &lt;&lt; j &lt;&lt; i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        题目只是让你输出数字，没让你判断是不是回文数，抓住本质问题，做的工作果然还是要少一些😥</p><h2 id="BASIC-7-amp-9-特殊的数字-amp-特殊回文数"><a href="#BASIC-7-amp-9-特殊的数字-amp-特殊回文数" class="headerlink" title="BASIC-7&amp;9  特殊的数字 &amp;特殊回文数"></a>BASIC-7&amp;9 <a href="http://lx.lanqiao.cn/problem.page?gpid=T46"> 特殊的数字</a> &amp;<a href="http://lx.lanqiao.cn/problem.page?gpid=T48">特殊回文数</a></h2><h3 id="特殊数字："><a href="#特殊数字：" class="headerlink" title="特殊数字："></a>特殊数字：</h3><p><strong>问题描述：</strong></p><p>​        153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1×1×1+5×5×5+3×3×3。编程求所有满足这种条件的三位十进制数。</p><blockquote><p>​        我之前这个题也是把个位，十位，百位全部取出来，再判断，但是按照第八题的思路，完全不用这样干，三重循环（i,j,k分别代表个位、十位、百位）,再写判断1×1×1+5×5×5+3×3×3  ？=153，如果等于cout&lt;&lt;i&lt;&lt;j&lt;&lt;k 即可。</p></blockquote><h3 id="特殊回文数"><a href="#特殊回文数" class="headerlink" title="特殊回文数"></a>特殊回文数</h3><p><strong>问题描述：</strong></p><p>​        123321是一个非常特殊的数，它从左边读和从右边读是一样的。输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p><blockquote><p>也是上面第八题的思路，不过五位和六位分别写两个循环。</p></blockquote><hr><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="BASIC-10-十进制转十六进制"><a href="#BASIC-10-十进制转十六进制" class="headerlink" title="BASIC-10 十进制转十六进制"></a>BASIC-10 <a href="http://lx.lanqiao.cn/problem.page?gpid=T49">十进制转十六进制</a></h2><p><strong>问题描述：</strong></p><p>​        十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。<br>​        给出一个非负整数，将它表示成十六进制的形式。</p><ul><li>输入格式：输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647。  如：30</li><li>输出格式：输出这个整数的16进制表示。如: 1E</li></ul><p>第一眼看到这个题的时候我都没得犹豫，直接输出流中调整<code>cout&lt;&lt;hex&lt;&lt;number;</code>，当然这也是一种耍赖的做法，默认<code>cout&lt;&lt;hex&lt;&lt;number;</code>输出的是1e，题目要求那个字母大写，引入<code>iomanip</code>中的<code>setiosflags(ios::uppercase)</code>调整即可。记住hex，dec，oct，bin和这个<code>iomanip</code>和函数（前提是oj系统中带这个库），就可以快速处理<strong>非大数问题</strong>的进制转化问题了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-built_in">cout</span> &lt;&lt; setiosflags(ios::uppercase)&lt;&lt; hex &lt;&lt; n;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BASIC-11-十六进制转十进制"><a href="#BASIC-11-十六进制转十进制" class="headerlink" title="BASIC-11 十六进制转十进制"></a>BASIC-11 <a href="http://lx.lanqiao.cn/problem.page?gpid=T50">十六进制转十进制</a></h2><p><strong>问题描述</strong>：</p><p>​        从键盘输入一个<strong>不超过8位的正的十六进制数</strong>字符串，将它转换为正的十进制数后输出。</p><ul><li>样例输入: FFFF</li><li>样例输出: 65535</li></ul><blockquote><p>虽然也可以用cin &gt;&gt; hex &gt;&gt; number;  cout &lt;&lt; number; 这样的语句偷懒，但是还是用常规方法做一下</p></blockquote><p>​        这里<strong>不超过8位的十六进制数字符串</strong>，每个16进制4位嘛，4*8=32，题目输入的都是无符号（正）数。<code>int</code>是32位（带一位符号位，所以只有31位可表示），所有要把转化后的size定义为<code>long long</code>（64位），或者<code>unsigned int</code>也行。然后这边还要注意的一点就是ASCII码加减运算出数字的操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">string</span> number;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> size=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; number;<br><span class="hljs-keyword">int</span> len = number.size();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (number[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span>)<br>&#123;<br>size = size*<span class="hljs-number">16</span> + (number[i] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>size = size*<span class="hljs-number">16</span> + (number[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; size;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BASIC-12-十六进制转八进制"><a href="#BASIC-12-十六进制转八进制" class="headerlink" title="BASIC-12 十六进制转八进制"></a>BASIC-12 <a href="http://lx.lanqiao.cn/problem.page?gpid=T51">十六进制转八进制</a></h2><p><strong>问题描述</strong></p><p>​        给定n个十六进制正整数，输出它们对应的八进制数。</p><p><strong>输入格式</strong><br>　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。<br>　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个<strong>十六进制数长度不超过100000</strong>。</p><p><strong>输出格式</strong><br>　　输出n行，每行为输入对应的八进制正整数。</p><p>　　<strong>【注意</strong>】<br>　　输入的十六进制数不会有前导0，比如012A。<br>　　输出的八进制数也不能有前导0。</p><ul><li><p><strong>样例输入</strong>   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">2<br>39<br>123ABC<br></code></pre></td></tr></table></figure></li><li><p><strong>样例输出</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">71</span><br><span class="hljs-number">4435274</span><br></code></pre></td></tr></table></figure><blockquote><p>tip：先将十六进制数转换成某进制数，再由某进制数转换成八进制。</p></blockquote></li></ul><p>我先想的是，16进制转10进制呗，十进制再转8进制。写就完了，然后就有了👇面代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">hex_to_dec</span><span class="hljs-params">(<span class="hljs-built_in">string</span> str)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> len = str.size();<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (str[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>)<br>&#123;<br>sum = sum * <span class="hljs-number">16</span> + (str[i] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>sum = sum * <span class="hljs-number">16</span> + (str[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dec_to_oct</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> oct)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">10000</span>];<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (oct!=<span class="hljs-number">0</span>)<br>&#123;<br>a[i++]= oct % <span class="hljs-number">8</span>;<br>oct /= <span class="hljs-number">8</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i<span class="hljs-number">-1</span>; j &gt;= <span class="hljs-number">0</span>; j--)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; a[j];<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">string</span> a[N];<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> oct = hex_to_dec(a[i]);<br>dec_to_oct(oct);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        然后就是无情的未通过，检查了好处时间发现题目这么一句话<strong>十六进制数长度不超过100000</strong>，大数问题了，long long都不顶用。改呗没办法😶</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> b, s, a;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-comment">//用2进制做转化</span><br>    <span class="hljs-built_in">string</span> arr[<span class="hljs-number">16</span>] = &#123; <span class="hljs-string">&quot;0000&quot;</span>, <span class="hljs-string">&quot;0001&quot;</span>, <span class="hljs-string">&quot;0010&quot;</span>, <span class="hljs-string">&quot;0011&quot;</span>, <span class="hljs-string">&quot;0100&quot;</span>, <span class="hljs-string">&quot;0101&quot;</span>, <span class="hljs-string">&quot;0110&quot;</span>, <span class="hljs-string">&quot;0111&quot;</span>, <span class="hljs-string">&quot;1000&quot;</span>,<br>        <span class="hljs-string">&quot;1001&quot;</span>, <span class="hljs-string">&quot;1010&quot;</span>, <span class="hljs-string">&quot;1011&quot;</span>, <span class="hljs-string">&quot;1100&quot;</span>, <span class="hljs-string">&quot;1101&quot;</span>, <span class="hljs-string">&quot;1110&quot;</span>, <span class="hljs-string">&quot;1111&quot;</span> &#125;;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;m;<br>    m[<span class="hljs-string">&quot;000&quot;</span>] = <span class="hljs-string">&quot;0&quot;</span>; m[<span class="hljs-string">&quot;001&quot;</span>] = <span class="hljs-string">&quot;1&quot;</span>; m[<span class="hljs-string">&quot;010&quot;</span>] = <span class="hljs-string">&quot;2&quot;</span>; m[<span class="hljs-string">&quot;011&quot;</span>] = <span class="hljs-string">&quot;3&quot;</span>; m[<span class="hljs-string">&quot;100&quot;</span>] = <span class="hljs-string">&quot;4&quot;</span>;<br>    m[<span class="hljs-string">&quot;101&quot;</span>] = <span class="hljs-string">&quot;5&quot;</span>; m[<span class="hljs-string">&quot;110&quot;</span>] = <span class="hljs-string">&quot;6&quot;</span>; m[<span class="hljs-string">&quot;111&quot;</span>] = <span class="hljs-string">&quot;7&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s;<br>        <span class="hljs-keyword">int</span> lens = s.length();<br>        <span class="hljs-comment">// 变成2进制存储</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; lens; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (s[j]&gt;<span class="hljs-string">&#x27;9&#x27;</span>)<br>            &#123;<br>                b += arr[s[j] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                b += arr[s[j] - <span class="hljs-string">&#x27;0&#x27;</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> lenb = b.length();<br>        <span class="hljs-comment">//lenb不是3的整数倍就在前面补0</span><br>        <span class="hljs-keyword">if</span> (lenb%<span class="hljs-number">3</span>==<span class="hljs-number">1</span>)<br>        &#123;<br>            b = <span class="hljs-string">&quot;00&quot;</span> + b;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (lenb%<span class="hljs-number">3</span>==<span class="hljs-number">2</span>)<br>        &#123;<br>            b = <span class="hljs-string">&quot;0&quot;</span> + b;<br>        &#125;<br>        <span class="hljs-comment">//这时b就变成合格的二进制数了</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; lenb; j+=<span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-comment">//取子串，每三位取一次</span><br>            <span class="hljs-built_in">string</span> temp = b.substr(j, <span class="hljs-number">3</span>);<br>            <span class="hljs-built_in">string</span> t = m[temp];<br>            <span class="hljs-comment">//如果16进制第一位是0001，填上0,1,2个0，前三个数字组成的子串为000</span><br>            <span class="hljs-keyword">if</span> (j==<span class="hljs-number">0</span> &amp;&amp; t==<span class="hljs-string">&quot;0&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; t;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        b = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>改的方法也是借鉴了<a href="https://github.com/liuchuo/Lanqiao/blob/master/%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/C%2B%2B/BASIC-12%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%20%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%AB%E8%BF%9B%E5%88%B6.cpp">柳诺的题解</a>但是她有一段代码我觉得没有必要，我删掉了也是过了oj的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> &amp;&amp; t == <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>             flag = <span class="hljs-number">1</span>;<br>             <span class="hljs-keyword">continue</span>;<br>         &#125;<br><span class="hljs-comment">//这里还做了第二次判断，如果第一个三位为0且第二个三位为0，则也忽略。</span><br>         <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">3</span> &amp;&amp; t == <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>             <span class="hljs-keyword">continue</span>;<br>         &#125;<br></code></pre></td></tr></table></figure><p>但是题目是不会出现连续六个0的情况的，出现这种情况是0000为第一个十六进制数，再填上2个零，但是题目标注了</p><ul><li>输入的<strong>十六进制数不会有前导0</strong>，比如012A。</li><li>输出的八进制数也不能有前导0。</li></ul><p>感觉自己数电和计算机组成原理白学了😥，纸上做题时，16进制展开，然后三个三个划一组变成8进制，到code时却没想到这个过程。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-lanqiao -刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式概述与原则</title>
    <link href="/2021/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%8E%9F%E5%88%99/"/>
    <url>/2021/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="Design-Patterns-Introduce"><a href="#Design-Patterns-Introduce" class="headerlink" title="Design Patterns Introduce"></a>Design Patterns Introduce</h1><p>C++设计模式配套资源：</p><ol><li>在线网站：<a href="https://refactoring.guru/">https://refactoring.guru/</a> </li><li>课本：<strong>可复用面向对象</strong>软件的基础</li></ol><p><img src="./book.png" alt="设计模式"></p><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>“每一个模式描述了一个在我们周围<strong>不断重复发生的问题</strong>， 以及该问题的<strong>解决方案的核心</strong>。这样，你就能<strong>一次又一次地使用该方案而不必做重复劳动</strong>”。                              ————Christopher Alexander</p><h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h2><ul><li>理解松耦合设计思想</li><li>掌握面向对象设计原则</li><li>掌握重构技法改善设计</li><li>掌握GOF核心设计模式</li></ul><h2 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h2><p><img src="./oop.png" alt=""></p><h3 id="向下：三大面对对象机制"><a href="#向下：三大面对对象机制" class="headerlink" title="向下：三大面对对象机制"></a>向下：三大面对对象机制</h3><ul><li><strong>封装</strong>，隐藏内部实现</li><li><strong>继承</strong>，复用现有代码</li><li><strong>多态</strong>，改写对象行为</li></ul><h3 id="向上：抽象意义"><a href="#向上：抽象意义" class="headerlink" title="向上：抽象意义"></a>向上：抽象意义</h3><p>深刻把握面向对象机制所<strong>带来的抽象意义</strong>，理解如何使用 这些机制来表达现实世界，掌握什么是“<strong>好的面向对象设计</strong>”</p><h2 id="软件的复杂性"><a href="#软件的复杂性" class="headerlink" title="软件的复杂性"></a>软件的复杂性</h2><p>建筑商从来不会去想给一栋已建好的100层高的 楼房底下再新修一个小地下室——这样做花费 极大而且注定要失败。然而令人惊奇的是，软件 系统的用户在要求作出类似改变时却不会仔细考 虑，而且他们认为这只是需要简单编程的事。       </p><p>​                                                                                                                            ——Object-Oriented Analysis and Design with Applications</p><h3 id="复杂性的原因"><a href="#复杂性的原因" class="headerlink" title="复杂性的原因"></a>复杂性的原因</h3><ul><li>客户需求的变化</li><li>技术平台的变化</li><li>开发团队的变化</li><li>市场环境的变化  …</li></ul><h3 id="复杂性的解决"><a href="#复杂性的解决" class="headerlink" title="复杂性的解决"></a>复杂性的解决</h3><h4 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h4><p>人们面对复杂性有一个常见的做法：即分而治之，将<strong>大问题分解为多个小问题</strong>，将<strong>复杂问题分解为多个简单问题</strong>。</p><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。 由于不能掌握全部的复杂对象，我们<strong>选择忽视它的非本质细节</strong>， 而去处理泛化和理想化了的对象模型。</p><h2 id="示例：结构化VS面对对象"><a href="#示例：结构化VS面对对象" class="headerlink" title="示例：结构化VS面对对象"></a>示例：结构化VS面对对象</h2><p>实现画图任务的两个代码实现(伪码)，如果我们增加不同的画图功能，对比两个代码会怎么样改变。</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Shape1.h</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Line</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>Point start;<br>    Point end;<br><br>Line(<span class="hljs-keyword">const</span> Point&amp; start, <span class="hljs-keyword">const</span> Point&amp; end)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;start = start;<br>        <span class="hljs-keyword">this</span>-&gt;end = end;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rect</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>Point leftUp;<br>    <span class="hljs-keyword">int</span> width;<br><span class="hljs-keyword">int</span> height;<br><br>Rect(<span class="hljs-keyword">const</span> Point&amp; leftUp, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;leftUp = leftUp;<br>        <span class="hljs-keyword">this</span>-&gt;width = width;<br><span class="hljs-keyword">this</span>-&gt;height = height;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-comment">//增加</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span>&#123;</span><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//MainForm1.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form &#123;<br><span class="hljs-keyword">private</span>:<br>Point p1;<br>Point p2;<br><br><span class="hljs-built_in">vector</span>&lt;Line&gt; lineVector;<br><span class="hljs-built_in">vector</span>&lt;Rect&gt; rectVector;<br><span class="hljs-comment">//改变</span><br><span class="hljs-built_in">vector</span>&lt;Circle&gt; circleVector;<br><br><span class="hljs-keyword">public</span>:<br>MainForm()&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p1.x = e.X;<br>p1.y = e.Y;<br><br><span class="hljs-comment">//...</span><br>Form::OnMouseDown(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p2.x = e.X;<br>p2.y = e.Y;<br><br><span class="hljs-keyword">if</span> (rdoLine.Checked)&#123;<br><span class="hljs-function">Line <span class="hljs-title">line</span><span class="hljs-params">(p1, p2)</span></span>;<br>lineVector.push_back(line);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rdoRect.Checked)&#123;<br><span class="hljs-keyword">int</span> width = <span class="hljs-built_in">abs</span>(p2.x - p1.x);<br><span class="hljs-keyword">int</span> height = <span class="hljs-built_in">abs</span>(p2.y - p1.y);<br><span class="hljs-function">Rect <span class="hljs-title">rect</span><span class="hljs-params">(p1, width, height)</span></span>;<br>rectVector.push_back(rect);<br>&#125;<br><span class="hljs-comment">//改变</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (...)&#123;<br><span class="hljs-comment">//...</span><br>circleVector.push_back(circle);<br>&#125;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">this</span>-&gt;Refresh();<br><br>Form::OnMouseUp(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>&#123;<br><br><span class="hljs-comment">//针对直线</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lineVector.size(); i++)&#123;<br>e.Graphics.DrawLine(Pens.Red,<br>lineVector[i].start.x, <br>lineVector[i].start.y,<br>lineVector[i].end.x,<br>lineVector[i].end.y);<br>&#125;<br><br><span class="hljs-comment">//针对矩形</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rectVector.size(); i++)&#123;<br>e.Graphics.DrawRectangle(Pens.Red,<br>rectVector[i].leftUp,<br>rectVector[i].width,<br>rectVector[i].height);<br>&#125;<br><br><span class="hljs-comment">//改变</span><br><span class="hljs-comment">//针对圆形</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; circleVector.size(); i++)&#123;<br>e.Graphics.DrawCircle(Pens.Red,<br>circleVector[i]);<br>&#125;<br><br><span class="hljs-comment">//...</span><br>Form::OnPaint(e);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Shape2.h</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~Shape() &#123; &#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Line</span>:</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br>Point start;<br>Point end;<br><br>Line(<span class="hljs-keyword">const</span> Point&amp; start, <span class="hljs-keyword">const</span> Point&amp; end)&#123;<br><span class="hljs-keyword">this</span>-&gt;start = start;<br><span class="hljs-keyword">this</span>-&gt;end = end;<br>&#125;<br><br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawLine(Pens.Red, <br>start.x, start.y,end.x, end.y);<br>&#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rect</span>:</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br>Point leftUp;<br><span class="hljs-keyword">int</span> width;<br><span class="hljs-keyword">int</span> height;<br><br>Rect(<span class="hljs-keyword">const</span> Point&amp; leftUp, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)&#123;<br><span class="hljs-keyword">this</span>-&gt;leftUp = leftUp;<br><span class="hljs-keyword">this</span>-&gt;width = width;<br><span class="hljs-keyword">this</span>-&gt;height = height;<br>&#125;<br><br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawRectangle(Pens.Red,<br>leftUp,width,height);<br>&#125;<br><br>&#125;;<br><br><span class="hljs-comment">//增加</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> :</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawCircle(Pens.Red,<br>...);<br>&#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//MainForm.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form &#123;<br><span class="hljs-keyword">private</span>:<br>Point p1;<br>Point p2;<br><br><span class="hljs-comment">//针对所有形状</span><br><span class="hljs-built_in">vector</span>&lt;Shape*&gt; shapeVector;<br><br><span class="hljs-keyword">public</span>:<br>MainForm()&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p1.x = e.X;<br>p1.y = e.Y;<br><br><span class="hljs-comment">//...</span><br>Form::OnMouseDown(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p2.x = e.X;<br>p2.y = e.Y;<br><br><span class="hljs-keyword">if</span> (rdoLine.Checked)&#123;<br>shapeVector.push_back(<span class="hljs-keyword">new</span> Line(p1,p2));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rdoRect.Checked)&#123;<br><span class="hljs-keyword">int</span> width = <span class="hljs-built_in">abs</span>(p2.x - p1.x);<br><span class="hljs-keyword">int</span> height = <span class="hljs-built_in">abs</span>(p2.y - p1.y);<br>shapeVector.push_back(<span class="hljs-keyword">new</span> Rect(p1, width, height));<br>&#125;<br><span class="hljs-comment">//改变</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (...)&#123;<br><span class="hljs-comment">//...</span><br>shapeVector.push_back(circle);<br>&#125;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">this</span>-&gt;Refresh();<br><br>Form::OnMouseUp(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>&#123;<br><br><span class="hljs-comment">//针对所有形状</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; shapeVector.size(); i++)&#123;<br><br>shapeVector[i]-&gt;Draw(e.Graphics); <span class="hljs-comment">//多态调用，各负其责</span><br>&#125;<br><br><span class="hljs-comment">//...</span><br>Form::OnPaint(e);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="软件设计的金科玉律：复用"><a href="#软件设计的金科玉律：复用" class="headerlink" title="软件设计的金科玉律：复用"></a>软件设计的金科玉律：复用</h2><h1 id="面向对象原则"><a href="#面向对象原则" class="headerlink" title="面向对象原则"></a>面向对象原则</h1><p>面向对象设计的最大的优势在于<code>抵御变化</code></p><h2 id="重新认识OOP"><a href="#重新认识OOP" class="headerlink" title="重新认识OOP"></a>重新认识OOP</h2><p>🌿 理解<strong>隔离变化</strong></p><p>从宏观层面来看，面向对象的构建方式更能适应软件的变化， 能将变化所带来的影响减为最小。</p><p>🌿 <strong>各司其职</strong></p><ul><li>从微观层面来看，面向对象的方式更强调各个类的“责任” </li><li>由于需求变化导致的新增类型不应该影响原来类型的实现—— 是所谓各负其责</li></ul><p>🌿 <strong>对象是什么</strong></p><ul><li>从语言实现层面来看，对象封装了代码和数据。 </li><li>从规格层面讲，对象是一系列可被使用的公共接口。 </li><li>从概念层面讲，对象是某种拥有责任的抽象。</li></ul><h2 id="面向对象的设计原则（8种）"><a href="#面向对象的设计原则（8种）" class="headerlink" title="面向对象的设计原则（8种）"></a>面向对象的设计原则（8种）</h2><h3 id="🌿依赖倒置原则（DIP）"><a href="#🌿依赖倒置原则（DIP）" class="headerlink" title="🌿依赖倒置原则（DIP）"></a>🌿依赖倒置原则（DIP）</h3><ul><li>高层模块(<strong>稳定</strong>)不应该依赖于低层模块(<strong>变化</strong>)，二者都应该依赖 于抽象(<strong>稳定</strong>) 。</li><li>抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于 抽象(稳定)。</li></ul><p>上一段示例代码的两个例子，<strong>高层模块依赖于稳定的Shape虚基类</strong>。</p><p><img src="./DIP.png" style="zoom: 80%;" /></p><h3 id="🌿开放封闭原则（OCP）"><a href="#🌿开放封闭原则（OCP）" class="headerlink" title="🌿开放封闭原则（OCP）"></a>🌿开放封闭原则（OCP）</h3><ul><li>对扩展开放，对更改封闭。 </li><li>类模块应该是可扩展的，但是不可修改。</li></ul><h3 id="🌿单一职责原则（SRP）"><a href="#🌿单一职责原则（SRP）" class="headerlink" title="🌿单一职责原则（SRP）"></a>🌿单一职责原则（SRP）</h3><ul><li>一个类应该仅有一个引起它变化的原因。 </li><li>变化的方向隐含着类的责任。</li></ul><h3 id="🌿Liskov-替换原则（LSP）"><a href="#🌿Liskov-替换原则（LSP）" class="headerlink" title="🌿Liskov 替换原则（LSP）"></a>🌿Liskov 替换原则（LSP）</h3><ul><li>子类必须能够替换它们的基类(IS-A)（继承时思考是不是组合关系）。 </li><li>继承表达类型抽象。</li></ul><h3 id="🌿接口隔离原则（ISP）"><a href="#🌿接口隔离原则（ISP）" class="headerlink" title="🌿接口隔离原则（ISP）"></a>🌿接口隔离原则（ISP）</h3><ul><li>不应该强迫客户程序依赖它们不用的方法。</li><li>接口应该<strong>小而完备</strong>。</li></ul><h3 id="🌿优先使用对象组合，而不是类继承"><a href="#🌿优先使用对象组合，而不是类继承" class="headerlink" title="🌿优先使用对象组合，而不是类继承"></a>🌿优先使用对象组合，而不是类继承</h3><ul><li>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。</li><li>继承在某种程度上破坏了封装性，子类父类耦合度高。 </li><li>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li></ul><h3 id="🌿封装变化点"><a href="#🌿封装变化点" class="headerlink" title="🌿封装变化点"></a>🌿封装变化点</h3><p>使用封装来创建对象之间的分界层，让设计者可以在分界层的 一侧进行修改，而不会对另一侧产生不良的影响，从而实现层 次间的松耦合。</p><h3 id="🌿针对接口编程，而不是针对实现编程"><a href="#🌿针对接口编程，而不是针对实现编程" class="headerlink" title="🌿针对接口编程，而不是针对实现编程"></a>🌿针对接口编程，而不是针对实现编程</h3><ul><li>不将变量类型声明为某个特定的具体类，而是声明为某个接口。 </li><li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。 </li><li>减少系统中各部分的依赖关系，从而实现“高内聚、松耦合” 的类型设计方案。</li></ul><h2 id="接口标准化（分工协作）"><a href="#接口标准化（分工协作）" class="headerlink" title="接口标准化（分工协作）"></a>接口标准化（分工协作）</h2><p>标准化工作往往是一个产业强盛的标准，这一点在学习计网的时候也有体会到（不同协议标准规定统一促进行业发展）</p><h3 id="以史为鉴"><a href="#以史为鉴" class="headerlink" title="以史为鉴"></a>以史为鉴</h3><p><img src="./history1.png" alt=""></p><p><img src="./history2.png" alt=""></p><h2 id="设计原则提升为设计经验"><a href="#设计原则提升为设计经验" class="headerlink" title="设计原则提升为设计经验"></a>设计原则提升为设计经验</h2><h3 id="🎈设计习语-Design-Idioms"><a href="#🎈设计习语-Design-Idioms" class="headerlink" title="🎈设计习语 Design Idioms"></a>🎈设计习语 Design Idioms</h3><p> Design Idioms 描述与特定编程语言相关的低层模式，技巧， 惯用法（cpp primer，more effect cpp）。 </p><h3 id="🎈设计模式-Design-Patterns"><a href="#🎈设计模式-Design-Patterns" class="headerlink" title="🎈设计模式 Design Patterns"></a>🎈设计模式 Design Patterns</h3><p>Design Patterns主要描述的是“<strong>类与相互通信的对象之间的组织关系</strong>，包括它们的角色、职责、协作方式等方面。 </p><h3 id="🎈架构模式-Architectural-Patterns"><a href="#🎈架构模式-Architectural-Patterns" class="headerlink" title="🎈架构模式 Architectural Patterns"></a>🎈架构模式 Architectural Patterns</h3><p> Architectural Patterns描述<strong>系统中与基本结构组织关系密切的高层模式</strong>，包括子系统划分，职责，以及如何组织它们之间关系的规则。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2020/07/12/git/"/>
    <url>/2020/07/12/git/</url>
    
    <content type="html"><![CDATA[<h1 id="GIT（版本管理软件）"><a href="#GIT（版本管理软件）" class="headerlink" title="GIT（版本管理软件）"></a>GIT（版本管理软件）</h1><p>git只能管理各种文本信息文件，如（.txt/.py等等），像图片(.jpg,.doc则不能被管理).</p><p>这是看莫烦Git系列视频个人所做笔记<a href="https://morvanzhou.github.io/tutorials/others/git/1-1-why/">点击进入莫烦bolg</a></p><h2 id="第一个版本库repository"><a href="#第一个版本库repository" class="headerlink" title="第一个版本库repository"></a>第一个版本库repository</h2><h3 id="1、常用命令"><a href="#1、常用命令" class="headerlink" title="1、常用命令"></a>1、常用命令</h3><p>1、<code>mkdir</code> 生成一个文件夹</p><p>2、<code>cd</code>   cd ~ 返回根目录（普通用户和super用户不同）</p><p>3、<code>pwd</code>显示当前目录 (目录不要含中文)</p><h3 id="2、关键操作"><a href="#2、关键操作" class="headerlink" title="2、关键操作"></a>2、关键操作</h3><h4 id="创建版本库-init"><a href="#创建版本库-init" class="headerlink" title="创建版本库(init)"></a>创建版本库(init)</h4><ul><li><p>创建用户<code>git config --global user.name &quot;qingcai56&quot;</code></p></li><li><p>为刚才创建的用户指定邮箱<code>git config --global user.email &quot;qc@email.com&quot;</code></p></li><li><p><code>config user.name和config user.email</code>查询用户</p></li><li><p><code>git init</code>生成git的管理文件</p></li><li><p><code>start git</code>打开git的管理文件</p></li></ul><h4 id="添加文件管理（add）"><a href="#添加文件管理（add）" class="headerlink" title="添加文件管理（add）"></a>添加文件管理（add）</h4><ul><li><code>touch  **.py/txt</code>创建一个文件</li><li><code>git add **.py/txt</code>把文件加到git版本库之中</li><li><code>git status</code>查看当前版本库的状态</li><li><code>git add .</code>add所有程序</li></ul><h4 id="提交改变（commit）"><a href="#提交改变（commit）" class="headerlink" title="提交改变（commit）"></a>提交改变（commit）</h4><ul><li><code>git commit -m &quot;create 1.py&quot;</code> 提交这次改变,引号之中为本次提交说明</li><li><strong>可以多次add文件用commit一次可以提交多个文件</strong></li></ul><p><img src="./0.png" alt=""></p><h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><p>​        在git之中，每一次提交（commit）修改，都会被单独保存起来，就好像游戏通过某一关要保存存档一样</p><h3 id="1、使用命令"><a href="#1、使用命令" class="headerlink" title="1、使用命令"></a>1、使用命令</h3><p>1、<code>git log</code> 查看之前所有的修改记录</p><p>2、<code>git satus</code>查看当前文件的状态</p><p>3、<code>git diff</code>比较修改后的状态<strong>(modified)</strong>和之前提交状态有什么不同<strong>(Unmodified)</strong></p><p>4、<code>git diff --cached</code> 比较<strong>Staged</strong>的状态和上一个<strong>Commit</strong>的状态的不同</p><p>5、<code>git diff HEAD</code>再次修改Stage状态文件比较<strong>stage&amp;unstage</strong>有什么不同</p><h3 id="2、比较三种不同形式的diff"><a href="#2、比较三种不同形式的diff" class="headerlink" title="2、比较三种不同形式的diff"></a>2、比较三种不同形式的diff</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 对比三种不同 diff 形式</span><br><span class="hljs-meta">$</span><span class="bash"> git diff HEAD     <span class="hljs-comment"># staged &amp; unstaged</span></span><br><br>@@ -1 +1,3 @@<br>-a = 1  # 已 staged<br>+a = 2  # 已 staged<br>+b = 1  # 已 staged<br>+c = b  # 还没 add 去 stage (unstaged)<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git diff          <span class="hljs-comment"># unstaged</span></span><br><br>@@ -1,2 +1,3 @@<br> a = 2  # 注: 前面没有 +<br> b = 1  # 注: 前面没有 +<br>+c = b  # 还没 add 去 stage (unstaged)<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git diff --cached <span class="hljs-comment"># staged</span></span><br><br>@@ -1 +1,2 @@<br>-a = 1  # 已 staged<br>+a = 2  # 已 staged<br>+b = 1  # 已 staged<br></code></pre></td></tr></table></figure><h2 id="回到从前-reset"><a href="#回到从前-reset" class="headerlink" title="回到从前(reset)"></a>回到从前(reset)</h2><h3 id="1、修改已commit的版本"><a href="#1、修改已commit的版本" class="headerlink" title="1、修改已commit的版本"></a>1、修改已commit的版本</h3><p>​        有时候我们把文件<code>commit</code>到版本库之中，却发现还忘了附上另一个文件，例如我们最后一个<code>commit</code>是<code>change 2</code>，版本号<code>904e1ba</code>，那么我们的把附件也<code>commit</code>进<code>change 2</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add 2.py</span><br><span class="hljs-meta">$</span><span class="bash"> git commit --amend --no-edit   <span class="hljs-comment"># &quot;--no-edit&quot;: 不编辑, 直接合并到上一个 commit</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline    <span class="hljs-comment"># &quot;--oneline&quot;: 每个 commit 内容显示在一行</span></span><br></code></pre></td></tr></table></figure><h3 id="2、从Stage返回-reset-到add之前"><a href="#2、从Stage返回-reset-到add之前" class="headerlink" title="2、从Stage返回(reset)到add之前"></a>2、从Stage返回(reset)到add之前</h3><p>​        有时我们已经把文件<code>add</code>到<code>stage</code>之中，但是想补充一些新得内容，这时，我们得回到<code>add</code>之前。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git status -s <span class="hljs-comment"># &quot;-s&quot;: status 的缩写模式</span></span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>M  1.py     # staged<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git reset 1.py</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Unstaged changes after reset:<br>M1.py<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py     # unstaged<br></code></pre></td></tr></table></figure><h3 id="3、reset回到comimit之前（时光穿梭）"><a href="#3、reset回到comimit之前（时光穿梭）" class="headerlink" title="3、reset回到comimit之前（时光穿梭）"></a>3、reset回到comimit之前（时光穿梭）</h3><p>​        每个 <code>commit</code> 都有自己的 <code>id</code> 数字号, <code>HEAD</code> 是一个指针, 指引当前的状态是在哪个 <code>commit</code>. 最近的一次 <code>commit</code> 在最右边, 我们如果要回到过去, 就是让 <code>HEAD</code> 回到过去并 <code>reset</code> 此时的 <code>HEAD</code> 到过去的位置.</p><p><img src="./-1.png" alt=""></p><p><img src="./-2.png" alt=""></p><p><img src="./-3.png" alt=""></p><p><img src="./-4.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 不管我们之前有没有做了一些 add 工作, 这一步让我们回到 上一次的 commit</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD</span>    <br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>HEAD is now at 904e1ba change 2<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 看看所有的<span class="hljs-built_in">log</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 回到 c6762a1 change 1</span><br><span class="hljs-meta">#</span><span class="bash"> 方式1: <span class="hljs-string">&quot;HEAD^&quot;</span> 几个箭头就是返回几个版本</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD^</span>   <br><br><span class="hljs-meta">#</span><span class="bash"> 方式2: <span class="hljs-string">&quot;commit id&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard c6762a1</span><br><br><span class="hljs-meta">#</span><span class="bash"> 方式3: <span class="hljs-string">&quot;HEAD~&quot;</span> ~后面加数字,数字几就是几个版本</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard ~1</span><br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 看看现在的 <span class="hljs-built_in">log</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p>​        把版本库指到<code>c6762a1</code>后再用<code>log --oneline</code>查看发现之前得<code>change 2</code>没了,这是我么则需要用<code>git reflog</code>查看近期对HEAD得所有改动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reflog</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>c6762a1 HEAD@&#123;0&#125;: reset: moving to c6762a1<br>904e1ba HEAD@&#123;1&#125;: commit (amend): change 2<br>0107760 HEAD@&#123;2&#125;: commit: change 2<br>c6762a1 HEAD@&#123;3&#125;: commit: change 1<br>13be9a7 HEAD@&#123;4&#125;: commit (initial): create 1.py<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 重复reset步骤就能回到change2</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard 904e1ba</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><h2 id="回到从前"><a href="#回到从前" class="headerlink" title="回到从前"></a>回到从前</h2><h3 id="1、改写文件checkout"><a href="#1、改写文件checkout" class="headerlink" title="1、改写文件checkout"></a>1、改写文件checkout</h3><p>​        之前的<code>reset</code>是针对整个版本库，但是有时只想修改某一个文件，这时我们就要使用checkout语句时单个文件回到过去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br><br>---------------------<br><span class="hljs-meta">$</span><span class="bash"> git checkout c6762a1 -- 1.py</span><br><br><br>---------------------<br><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;back to change 1 and add comment for 1.py&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>47f167e back to change 1 and add comment for 1.py<br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><h2 id="分支（branch）"><a href="#分支（branch）" class="headerlink" title="分支（branch）"></a>分支（branch）</h2><p>​        有时我们需要不同的版本库（如开发软件的稳定版本和测试版），git提供分支（branch）管理去满足我们的需求。</p><p><img src=".\1.svg" alt="1"></p><h3 id="1、用到的命令"><a href="#1、用到的命令" class="headerlink" title="1、用到的命令"></a>1、用到的命令</h3><p>1、<code>git log --oneline --graph</code> 用<code>--graph</code>查看分支.</p><p>2、<code>git branch dev</code> 创建分支<code>dev</code>.</p><p>3、<code>git checkout dev</code> 切换到分支dev.</p><p>4、<code>git checkout -b  dev</code>创建并切换到分支dev.</p><p>5、<code>git merge dev</code> 把分支推送到master，这个操作要在master上完成.</p><p>6、<code>git commit -am &quot;change 3 in dev&quot;</code>  简化操作先add再commit，不过要在um状态下.</p><h3 id="2、操作代码"><a href="#2、操作代码" class="headerlink" title="2、操作代码"></a>2、操作代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b  dev               <span class="hljs-comment">#创建和切换到新建的分支</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Switched to a new branch &#x27;dev&#x27;<br><br>--------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>* dev                                 # 这时 HEAD 已经被切换至 dev 分支<br>  master<br>  <br>--------------------------            # 修改dev中文件并提交 <br><span class="hljs-meta">$</span><span class="bash"> git commit -am <span class="hljs-string">&quot;change 3 in dev&quot;</span>    <span class="hljs-comment"># &quot;-am&quot;: add 所有改变 并直接 commit</span></span><br><br>--------------------------  <br><span class="hljs-meta">$</span><span class="bash"> git checkout master                 <span class="hljs-comment"># 切换至 master 才能把其他分支合并过来</span></span><br><span class="hljs-meta">$</span><span class="bash"> git merge --no-ff -m <span class="hljs-string">&quot;keep merge info&quot;</span> dev     <span class="hljs-comment"># 保留 merge 信息</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>*   c60668f keep merge info<br>|\  <br>| * f9584f8 change 3 in dev                   # 这里就能看出, 我们建立过一个分支<br>|/  <br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p>​        <strong>注意：如果直接 <code>git merge dev</code>, git 会采用默认的 <code>Fast forward</code> 格式进行 <code>merge</code>, 这样 <code>merge</code> 的这次操作不会有 <code>commit</code> 信息. <code>log</code> 中也不会有分支的图案. 我们可以采取 <code>--no-ff</code> 这种方式保留 <code>merge</code> 的 <code>commit</code> 信息.</strong></p><h2 id="merge分支冲突"><a href="#merge分支冲突" class="headerlink" title="merge分支冲突"></a>merge分支冲突</h2><p>​        如果我们在dev中做出修改，但是master这时被修改了,我们要进行合并，该怎么办呢？这是git会报出Automatic merge failed; fix conflicts and then commit the result.的错误，我们需打开文件手动调试保存那些内容。</p><p><img src="./2.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这是 master 的 <span class="hljs-built_in">log</span></span><br>* 3d7796e change 4 in master # 这一条 commit 和 dev 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br>-----------------------------<br><span class="hljs-meta">#</span><span class="bash"> 这是 dev 的 <span class="hljs-built_in">log</span></span><br>* f7d2e3a change 3 in dev   # 这一条 commit 和 master 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br>  dev<br>* master<br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git merge dev</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Auto-merging 1.py<br>CONFLICT (content): Merge conflict in 1.py<br>Automatic merge failed; fix conflicts and then commit the result.<br><br><span class="hljs-meta">#</span><span class="bash"> 打开vscode，git已经帮我们把冲突标记出来了</span><br>a = 1<br><span class="hljs-meta">#</span><span class="bash"> I went back to change 1</span><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> master</span><br>=======<br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> dev</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br>-------------------------<br><span class="hljs-meta">#</span><span class="bash"> 手动调试并提交</span><br>a = 1<br><span class="hljs-meta">#</span><span class="bash"> I went back to change 1</span><br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> master and dev</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -am <span class="hljs-string">&quot;solve conflict&quot;</span></span><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>*   7810065 solve conflict<br>|\  <br>| * f7d2e3a change 3 in dev<br>* | 3d7796e change 4 in master<br>|/  <br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br></code></pre></td></tr></table></figure><h2 id="rebase分支冲突"><a href="#rebase分支冲突" class="headerlink" title="rebase分支冲突"></a>rebase分支冲突</h2><p>​        更高级的合并方式<code>rebase</code>，共享的 branch 是 <code>branch B</code>, 而我在 <code>branch A</code> 上工作, 有一天我发现<code>branch B</code>已经有一些小更新, 我也想试试我的程序和这些小更新兼不兼容, 我也我想合并, 这时就可以用 <code>rebase</code> 来补充我的分支<code>branch A</code>的内容. 补充完以后, 和后面那张图的 <code>merge</code> 不同, 我还是继续在 <code>C3</code> 上工作, 不过此时的 <code>C3</code> 的本质却不一样了, 因为吸收了那些小更新. 所以我们用 <code>C3&#39;</code> 来代替.</p><p><img src="./3.png" alt=""></p><p><img src="./4.png" alt=""></p><p><img src="./5.png" alt=""></p><p><img src="./6.png" alt=""></p><p>​        可以看出我们工作的<code>C3</code>已经不是从<code>C1</code>衍生来的，这一点和<code>merge</code>不一样，<code>merge</code>是把C3和<code>C4</code>合并成一个新的<code>C5</code>,如果是rebase，那你就把别人的共享内容给改写了。</p><p><img src="./7.png" alt=""></p><h3 id="1、错误示例把主分支基于你的分支修改"><a href="#1、错误示例把主分支基于你的分支修改" class="headerlink" title="1、错误示例把主分支基于你的分支修改"></a>1、错误示例把主分支基于你的分支修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这是 master 的 <span class="hljs-built_in">log</span></span><br>* 3d7796e change 4 in master # 这一条 commit 和 dev 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br>-----------------------------<br><br><span class="hljs-meta">#</span><span class="bash"> 这是 dev 的 <span class="hljs-built_in">log</span></span><br>* f7d2e3a change 3 in dev   # 这一条 commit 和 master 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br>-----------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>  dev<br>* master<br>-------------------------<br><br><span class="hljs-meta">$</span><span class="bash"> git rebase dev</span> <br><span class="hljs-meta">#</span><span class="bash"> 输出  显示有conflict要手动修改</span><br>First, rewinding head to replay your work on top of it...<br>Applying: change 3 in dev<br>Using index info to reconstruct a base tree...<br>M1.py<br>Falling back to patching base and 3-way merge...<br>Auto-merging 1.py<br>CONFLICT (content): Merge conflict in 1.py<br>error: Failed to merge in the changes.<br>Patch failed at 0001 change 3 in dev<br>The copy of the patch that failed is found in: .git/rebase-apply/patch<br><br>When you have resolved this problem, run &quot;git rebase --continue&quot;.<br>If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.<br>To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.<br>-------------------------<br><br><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git rebase --<span class="hljs-built_in">continue</span></span><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>* c844cb1 change 4 in master    # 这条 commit 原本的id=3d7796e, 所以 master 的历史被修改<br>* f7d2e3a change 3 in dev       # rebase 过来的 dev commit<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p><strong>!! 注意 !!</strong> 这个例子也说明了使用 <code>rebase</code> 要万分小心, 千万不要在共享的 branch 中 <code>rebase</code>, 不然就像上面那样, 现在 <code>master</code> 的历史已经被 <code>rebase</code> 改变了. <code>master</code> 当中别人提交的 <code>change 4</code> 就被你无情地修改掉了, 所以千万不要在共享分支中使用 <code>rebase</code>.</p><h2 id="临时修改（stash）"><a href="#临时修改（stash）" class="headerlink" title="临时修改（stash）"></a>临时修改（stash）</h2><p>​        想想有天在开开心心地改进代码, 突然接到老板的一个电话说要改之前的一个程序. 怎么办? 虽然还需要很久时间才能改进完自己的代码, 可我有强迫症, 又不想把要改的程序和自己改进代码的部分一起 <code>commit</code> 了.</p><p>这时 <code>stash</code> 就是我的救星了. 用 <code>stash</code> 能先将我的那改进的部分放在一边分隔开来. 再另外单独处理老板的任务.</p><h3 id="1、临时修改代码"><a href="#1、临时修改代码" class="headerlink" title="1、临时修改代码"></a>1、临时修改代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout dev</span><br></code></pre></td></tr></table></figure><p>在 <code>dev</code> 中的 <code>1.py</code> 中加上一行 <code># feel happy</code>, 然后老板的电话来了, 可是我还没有改进完这些代码. 所以我就用 <code>stash</code> 将这些改变暂时放一边.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py<br>------------------ <br><span class="hljs-meta">$</span><span class="bash"> git stash</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Saved working directory and index state WIP on dev: f7d2e3a change 3 in dev<br>HEAD is now at f7d2e3a change 3 in dev<br>-------------------<br><span class="hljs-meta">$</span><span class="bash"> git status</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>On branch dev<br>nothing to commit, working directory clean     # 干净得很<br></code></pre></td></tr></table></figure><p>​        然后去从<code>master</code>中建立新分支去完成老板的任务，<code>merge</code>合并到<code>master</code>后我们在转会dev.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout dev</span><br><span class="hljs-meta">$</span><span class="bash"> git stash list    <span class="hljs-comment"># 查看在 stash 中的缓存</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>stash@&#123;0&#125;: WIP on dev: f7d2e3a change 3 in dev<br><span class="hljs-meta">$</span><span class="bash"> git stash pop</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>On branch dev<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>modified:   1.py<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br>Dropped refs/stash@&#123;0&#125; (23332b7edc105a579b09b127336240a45756a91c)<br>----------------------<br><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py     # 和最开始一样了<br></code></pre></td></tr></table></figure><h2 id="github在线管理"><a href="#github在线管理" class="headerlink" title="github在线管理"></a>github在线管理</h2><h3 id="1、建立版本库"><a href="#1、建立版本库" class="headerlink" title="1、建立版本库"></a>1、建立版本库</h3><h3 id="2、链接本地版本库"><a href="#2、链接本地版本库" class="headerlink" title="2、链接本地版本库"></a>2、链接本地版本库</h3><h3 id="3、本地推送修改"><a href="#3、本地推送修改" class="headerlink" title="3、本地推送修改"></a>3、本地推送修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote add origin https://github.com/MorvanZhou/git-demo.git</span><br><span class="hljs-meta">#</span><span class="bash"> 上面https是莫烦的，链接时记得换成自己的</span><br><span class="hljs-meta">$</span><span class="bash"> git push -u origin master     <span class="hljs-comment"># 推送本地 master 去 origin</span></span><br><span class="hljs-meta">$</span><span class="bash"> git push -u origin dev        <span class="hljs-comment"># 推送本地 dev  去 origin</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-git -how use</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
