<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式概述与原则</title>
    <link href="/2021/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%8E%9F%E5%88%99/"/>
    <url>/2021/01/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="Design-Patterns-Introduce"><a href="#Design-Patterns-Introduce" class="headerlink" title="Design Patterns Introduce"></a>Design Patterns Introduce</h1><p>C++设计模式配套资源：</p><ol><li>在线网站：<a href="https://refactoring.guru/">https://refactoring.guru/</a> </li><li>课本：<strong>可复用面向对象</strong>软件的基础</li></ol><p><img src="./book.png" alt="image-20210122103057949"></p><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>“每一个模式描述了一个在我们周围<strong>不断重复发生的问题</strong>， 以及该问题的<strong>解决方案的核心</strong>。这样，你就能<strong>一次又一次地使用该方案而不必做重复劳动</strong>”。                              ————Christopher Alexander</p><h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h2><ul><li>理解松耦合设计思想</li><li>掌握面向对象设计原则</li><li>掌握重构技法改善设计</li><li>掌握GOF核心设计模式</li></ul><h2 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h2><p><img src="./oop.png" alt="image-20210122103453997"></p><h3 id="向下：三大面对对象机制"><a href="#向下：三大面对对象机制" class="headerlink" title="向下：三大面对对象机制"></a>向下：三大面对对象机制</h3><ul><li><strong>封装</strong>，隐藏内部实现</li><li><strong>继承</strong>，复用现有代码</li><li><strong>多态</strong>，改写对象行为</li></ul><h3 id="向上：抽象意义"><a href="#向上：抽象意义" class="headerlink" title="向上：抽象意义"></a>向上：抽象意义</h3><p>深刻把握面向对象机制所<strong>带来的抽象意义</strong>，理解如何使用 这些机制来表达现实世界，掌握什么是“<strong>好的面向对象设计</strong>”</p><h2 id="软件的复杂性"><a href="#软件的复杂性" class="headerlink" title="软件的复杂性"></a>软件的复杂性</h2><p>建筑商从来不会去想给一栋已建好的100层高的 楼房底下再新修一个小地下室——这样做花费 极大而且注定要失败。然而令人惊奇的是，软件 系统的用户在要求作出类似改变时却不会仔细考 虑，而且他们认为这只是需要简单编程的事。       </p><p>​                                                                                                                            ——Object-Oriented Analysis and Design with Applications</p><h3 id="复杂性的原因"><a href="#复杂性的原因" class="headerlink" title="复杂性的原因"></a>复杂性的原因</h3><ul><li>客户需求的变化</li><li>技术平台的变化</li><li>开发团队的变化</li><li>市场环境的变化  …</li></ul><h3 id="复杂性的解决"><a href="#复杂性的解决" class="headerlink" title="复杂性的解决"></a>复杂性的解决</h3><h4 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h4><p>人们面对复杂性有一个常见的做法：即分而治之，将<strong>大问题分解为多个小问题</strong>，将<strong>复杂问题分解为多个简单问题</strong>。</p><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。 由于不能掌握全部的复杂对象，我们<strong>选择忽视它的非本质细节</strong>， 而去处理泛化和理想化了的对象模型。</p><h2 id="示例：结构化VS面对对象"><a href="#示例：结构化VS面对对象" class="headerlink" title="示例：结构化VS面对对象"></a>示例：结构化VS面对对象</h2><p>实现画图任务的两个代码实现(伪码)，如果我们增加不同的画图功能，对比两个代码会怎么样改变。</p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Shape1.h</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Line</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>Point start;<br>    Point end;<br><br>Line(<span class="hljs-keyword">const</span> Point&amp; start, <span class="hljs-keyword">const</span> Point&amp; end)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;start = start;<br>        <span class="hljs-keyword">this</span>-&gt;end = end;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rect</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>Point leftUp;<br>    <span class="hljs-keyword">int</span> width;<br><span class="hljs-keyword">int</span> height;<br><br>Rect(<span class="hljs-keyword">const</span> Point&amp; leftUp, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;leftUp = leftUp;<br>        <span class="hljs-keyword">this</span>-&gt;width = width;<br><span class="hljs-keyword">this</span>-&gt;height = height;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-comment">//增加</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span>&#123;</span><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//MainForm1.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form &#123;<br><span class="hljs-keyword">private</span>:<br>Point p1;<br>Point p2;<br><br><span class="hljs-built_in">vector</span>&lt;Line&gt; lineVector;<br><span class="hljs-built_in">vector</span>&lt;Rect&gt; rectVector;<br><span class="hljs-comment">//改变</span><br><span class="hljs-built_in">vector</span>&lt;Circle&gt; circleVector;<br><br><span class="hljs-keyword">public</span>:<br>MainForm()&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p1.x = e.X;<br>p1.y = e.Y;<br><br><span class="hljs-comment">//...</span><br>Form::OnMouseDown(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p2.x = e.X;<br>p2.y = e.Y;<br><br><span class="hljs-keyword">if</span> (rdoLine.Checked)&#123;<br><span class="hljs-function">Line <span class="hljs-title">line</span><span class="hljs-params">(p1, p2)</span></span>;<br>lineVector.push_back(line);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rdoRect.Checked)&#123;<br><span class="hljs-keyword">int</span> width = <span class="hljs-built_in">abs</span>(p2.x - p1.x);<br><span class="hljs-keyword">int</span> height = <span class="hljs-built_in">abs</span>(p2.y - p1.y);<br><span class="hljs-function">Rect <span class="hljs-title">rect</span><span class="hljs-params">(p1, width, height)</span></span>;<br>rectVector.push_back(rect);<br>&#125;<br><span class="hljs-comment">//改变</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (...)&#123;<br><span class="hljs-comment">//...</span><br>circleVector.push_back(circle);<br>&#125;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">this</span>-&gt;Refresh();<br><br>Form::OnMouseUp(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>&#123;<br><br><span class="hljs-comment">//针对直线</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lineVector.size(); i++)&#123;<br>e.Graphics.DrawLine(Pens.Red,<br>lineVector[i].start.x, <br>lineVector[i].start.y,<br>lineVector[i].end.x,<br>lineVector[i].end.y);<br>&#125;<br><br><span class="hljs-comment">//针对矩形</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rectVector.size(); i++)&#123;<br>e.Graphics.DrawRectangle(Pens.Red,<br>rectVector[i].leftUp,<br>rectVector[i].width,<br>rectVector[i].height);<br>&#125;<br><br><span class="hljs-comment">//改变</span><br><span class="hljs-comment">//针对圆形</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; circleVector.size(); i++)&#123;<br>e.Graphics.DrawCircle(Pens.Red,<br>circleVector[i]);<br>&#125;<br><br><span class="hljs-comment">//...</span><br>Form::OnPaint(e);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Shape2.h</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~Shape() &#123; &#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Line</span>:</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br>Point start;<br>Point end;<br><br>Line(<span class="hljs-keyword">const</span> Point&amp; start, <span class="hljs-keyword">const</span> Point&amp; end)&#123;<br><span class="hljs-keyword">this</span>-&gt;start = start;<br><span class="hljs-keyword">this</span>-&gt;end = end;<br>&#125;<br><br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawLine(Pens.Red, <br>start.x, start.y,end.x, end.y);<br>&#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rect</span>:</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br>Point leftUp;<br><span class="hljs-keyword">int</span> width;<br><span class="hljs-keyword">int</span> height;<br><br>Rect(<span class="hljs-keyword">const</span> Point&amp; leftUp, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)&#123;<br><span class="hljs-keyword">this</span>-&gt;leftUp = leftUp;<br><span class="hljs-keyword">this</span>-&gt;width = width;<br><span class="hljs-keyword">this</span>-&gt;height = height;<br>&#125;<br><br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawRectangle(Pens.Red,<br>leftUp,width,height);<br>&#125;<br><br>&#125;;<br><br><span class="hljs-comment">//增加</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> :</span> <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//实现自己的Draw，负责画自己</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Graphics&amp; g)</span></span>&#123;<br>g.DrawCircle(Pens.Red,<br>...);<br>&#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//MainForm.cpp</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span> :</span> <span class="hljs-keyword">public</span> Form &#123;<br><span class="hljs-keyword">private</span>:<br>Point p1;<br>Point p2;<br><br><span class="hljs-comment">//针对所有形状</span><br><span class="hljs-built_in">vector</span>&lt;Shape*&gt; shapeVector;<br><br><span class="hljs-keyword">public</span>:<br>MainForm()&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">protected</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseDown</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p1.x = e.X;<br>p1.y = e.Y;<br><br><span class="hljs-comment">//...</span><br>Form::OnMouseDown(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnMouseUp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> MouseEventArgs&amp; e)</span></span>&#123;<br>p2.x = e.X;<br>p2.y = e.Y;<br><br><span class="hljs-keyword">if</span> (rdoLine.Checked)&#123;<br>shapeVector.push_back(<span class="hljs-keyword">new</span> Line(p1,p2));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rdoRect.Checked)&#123;<br><span class="hljs-keyword">int</span> width = <span class="hljs-built_in">abs</span>(p2.x - p1.x);<br><span class="hljs-keyword">int</span> height = <span class="hljs-built_in">abs</span>(p2.y - p1.y);<br>shapeVector.push_back(<span class="hljs-keyword">new</span> Rect(p1, width, height));<br>&#125;<br><span class="hljs-comment">//改变</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (...)&#123;<br><span class="hljs-comment">//...</span><br>shapeVector.push_back(circle);<br>&#125;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">this</span>-&gt;Refresh();<br><br>Form::OnMouseUp(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::OnPaint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PaintEventArgs&amp; e)</span></span>&#123;<br><br><span class="hljs-comment">//针对所有形状</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; shapeVector.size(); i++)&#123;<br><br>shapeVector[i]-&gt;Draw(e.Graphics); <span class="hljs-comment">//多态调用，各负其责</span><br>&#125;<br><br><span class="hljs-comment">//...</span><br>Form::OnPaint(e);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="软件设计的金科玉律：复用"><a href="#软件设计的金科玉律：复用" class="headerlink" title="软件设计的金科玉律：复用"></a>软件设计的金科玉律：复用</h2><h1 id="面向对象原则"><a href="#面向对象原则" class="headerlink" title="面向对象原则"></a>面向对象原则</h1><p>面向对象设计的最大的优势在于<code>抵御变化</code></p><h2 id="重新认识OOP"><a href="#重新认识OOP" class="headerlink" title="重新认识OOP"></a>重新认识OOP</h2><p>🌿 理解<strong>隔离变化</strong></p><p>从宏观层面来看，面向对象的构建方式更能适应软件的变化， 能将变化所带来的影响减为最小。</p><p>🌿 <strong>各司其职</strong></p><ul><li>从微观层面来看，面向对象的方式更强调各个类的“责任” </li><li>由于需求变化导致的新增类型不应该影响原来类型的实现—— 是所谓各负其责</li></ul><p>🌿 <strong>对象是什么</strong></p><ul><li>从语言实现层面来看，对象封装了代码和数据。 </li><li>从规格层面讲，对象是一系列可被使用的公共接口。 </li><li>从概念层面讲，对象是某种拥有责任的抽象。</li></ul><h2 id="面向对象的设计原则（8种）"><a href="#面向对象的设计原则（8种）" class="headerlink" title="面向对象的设计原则（8种）"></a>面向对象的设计原则（8种）</h2><h3 id="🌿依赖倒置原则（DIP）"><a href="#🌿依赖倒置原则（DIP）" class="headerlink" title="🌿依赖倒置原则（DIP）"></a>🌿依赖倒置原则（DIP）</h3><ul><li>高层模块(<strong>稳定</strong>)不应该依赖于低层模块(<strong>变化</strong>)，二者都应该依赖 于抽象(<strong>稳定</strong>) 。</li><li>抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于 抽象(稳定)。</li></ul><p>上一段示例代码的两个例子，<strong>高层模块依赖于稳定的Shape虚基类</strong>。</p><p><img src="./DIP.png" style="zoom: 80%;" /></p><h3 id="🌿开放封闭原则（OCP）"><a href="#🌿开放封闭原则（OCP）" class="headerlink" title="🌿开放封闭原则（OCP）"></a>🌿开放封闭原则（OCP）</h3><ul><li>对扩展开放，对更改封闭。 </li><li>类模块应该是可扩展的，但是不可修改。</li></ul><h3 id="🌿单一职责原则（SRP）"><a href="#🌿单一职责原则（SRP）" class="headerlink" title="🌿单一职责原则（SRP）"></a>🌿单一职责原则（SRP）</h3><ul><li>一个类应该仅有一个引起它变化的原因。 </li><li>变化的方向隐含着类的责任。</li></ul><h3 id="🌿Liskov-替换原则（LSP）"><a href="#🌿Liskov-替换原则（LSP）" class="headerlink" title="🌿Liskov 替换原则（LSP）"></a>🌿Liskov 替换原则（LSP）</h3><ul><li>子类必须能够替换它们的基类(IS-A)（继承时思考是不是组合关系）。 </li><li>继承表达类型抽象。</li></ul><h3 id="🌿接口隔离原则（ISP）"><a href="#🌿接口隔离原则（ISP）" class="headerlink" title="🌿接口隔离原则（ISP）"></a>🌿接口隔离原则（ISP）</h3><ul><li>不应该强迫客户程序依赖它们不用的方法。</li><li>接口应该<strong>小而完备</strong>。</li></ul><h3 id="🌿优先使用对象组合，而不是类继承"><a href="#🌿优先使用对象组合，而不是类继承" class="headerlink" title="🌿优先使用对象组合，而不是类继承"></a>🌿优先使用对象组合，而不是类继承</h3><ul><li>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。</li><li>继承在某种程度上破坏了封装性，子类父类耦合度高。 </li><li>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li></ul><h3 id="🌿封装变化点"><a href="#🌿封装变化点" class="headerlink" title="🌿封装变化点"></a>🌿封装变化点</h3><p>使用封装来创建对象之间的分界层，让设计者可以在分界层的 一侧进行修改，而不会对另一侧产生不良的影响，从而实现层 次间的松耦合。</p><h3 id="🌿针对接口编程，而不是针对实现编程"><a href="#🌿针对接口编程，而不是针对实现编程" class="headerlink" title="🌿针对接口编程，而不是针对实现编程"></a>🌿针对接口编程，而不是针对实现编程</h3><ul><li>不将变量类型声明为某个特定的具体类，而是声明为某个接口。 </li><li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。 </li><li>减少系统中各部分的依赖关系，从而实现“高内聚、松耦合” 的类型设计方案。</li></ul><h2 id="接口标准化（分工协作）"><a href="#接口标准化（分工协作）" class="headerlink" title="接口标准化（分工协作）"></a>接口标准化（分工协作）</h2><p>标准化工作往往是一个产业强盛的标准，这一点在学习计网的时候也有体会到（不同协议标准规定统一促进行业发展）</p><h3 id="以史为鉴"><a href="#以史为鉴" class="headerlink" title="以史为鉴"></a>以史为鉴</h3><p><img src="./history1.png" alt=""></p><p><img src="./history2.png" alt=""></p><h2 id="设计原则提升为设计经验"><a href="#设计原则提升为设计经验" class="headerlink" title="设计原则提升为设计经验"></a>设计原则提升为设计经验</h2><h3 id="🎈设计习语-Design-Idioms"><a href="#🎈设计习语-Design-Idioms" class="headerlink" title="🎈设计习语 Design Idioms"></a>🎈设计习语 Design Idioms</h3><p> Design Idioms 描述与特定编程语言相关的低层模式，技巧， 惯用法（cpp primer，more effect cpp）。 </p><h3 id="🎈设计模式-Design-Patterns"><a href="#🎈设计模式-Design-Patterns" class="headerlink" title="🎈设计模式 Design Patterns"></a>🎈设计模式 Design Patterns</h3><p>Design Patterns主要描述的是“<strong>类与相互通信的对象之间的组织关系</strong>，包括它们的角色、职责、协作方式等方面。 </p><h3 id="🎈架构模式-Architectural-Patterns"><a href="#🎈架构模式-Architectural-Patterns" class="headerlink" title="🎈架构模式 Architectural Patterns"></a>🎈架构模式 Architectural Patterns</h3><p> Architectural Patterns描述<strong>系统中与基本结构组织关系密切的高层模式</strong>，包括子系统划分，职责，以及如何组织它们之间关系的规则。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-设计模式 -cpp -李建忠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2020/07/12/git/"/>
    <url>/2020/07/12/git/</url>
    
    <content type="html"><![CDATA[<h1 id="GIT（版本管理软件）"><a href="#GIT（版本管理软件）" class="headerlink" title="GIT（版本管理软件）"></a>GIT（版本管理软件）</h1><p>git只能管理各种文本信息文件，如（.txt/.py等等），像图片(.jpg,.doc则不能被管理).</p><p>这是看莫烦Git系列视频个人所做笔记<a href="https://morvanzhou.github.io/tutorials/others/git/1-1-why/">点击进入莫烦bolg</a></p><h2 id="第一个版本库repository"><a href="#第一个版本库repository" class="headerlink" title="第一个版本库repository"></a>第一个版本库repository</h2><h3 id="1、常用命令"><a href="#1、常用命令" class="headerlink" title="1、常用命令"></a>1、常用命令</h3><p>1、<code>mkdir</code> 生成一个文件夹</p><p>2、<code>cd</code>   cd ~ 返回根目录（普通用户和super用户不同）</p><p>3、<code>pwd</code>显示当前目录 (目录不要含中文)</p><h3 id="2、关键操作"><a href="#2、关键操作" class="headerlink" title="2、关键操作"></a>2、关键操作</h3><h4 id="创建版本库-init"><a href="#创建版本库-init" class="headerlink" title="创建版本库(init)"></a>创建版本库(init)</h4><ul><li><p>创建用户<code>git config --global user.name &quot;qingcai56&quot;</code></p></li><li><p>为刚才创建的用户指定邮箱<code>git config --global user.email &quot;qc@email.com&quot;</code></p></li><li><p><code>config user.name和config user.email</code>查询用户</p></li><li><p><code>git init</code>生成git的管理文件</p></li><li><p><code>start git</code>打开git的管理文件</p></li></ul><h4 id="添加文件管理（add）"><a href="#添加文件管理（add）" class="headerlink" title="添加文件管理（add）"></a>添加文件管理（add）</h4><ul><li><code>touch  **.py/txt</code>创建一个文件</li><li><code>git add **.py/txt</code>把文件加到git版本库之中</li><li><code>git status</code>查看当前版本库的状态</li><li><code>git add .</code>add所有程序</li></ul><h4 id="提交改变（commit）"><a href="#提交改变（commit）" class="headerlink" title="提交改变（commit）"></a>提交改变（commit）</h4><ul><li><code>git commit -m &quot;create 1.py&quot;</code> 提交这次改变,引号之中为本次提交说明</li><li><strong>可以多次add文件用commit一次可以提交多个文件</strong></li></ul><p><img src="./0.png" alt=""></p><h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><p>​        在git之中，每一次提交（commit）修改，都会被单独保存起来，就好像游戏通过某一关要保存存档一样</p><h3 id="1、使用命令"><a href="#1、使用命令" class="headerlink" title="1、使用命令"></a>1、使用命令</h3><p>1、<code>git log</code> 查看之前所有的修改记录</p><p>2、<code>git satus</code>查看当前文件的状态</p><p>3、<code>git diff</code>比较修改后的状态<strong>(modified)</strong>和之前提交状态有什么不同<strong>(Unmodified)</strong></p><p>4、<code>git diff --cached</code> 比较<strong>Staged</strong>的状态和上一个<strong>Commit</strong>的状态的不同</p><p>5、<code>git diff HEAD</code>再次修改Stage状态文件比较<strong>stage&amp;unstage</strong>有什么不同</p><h3 id="2、比较三种不同形式的diff"><a href="#2、比较三种不同形式的diff" class="headerlink" title="2、比较三种不同形式的diff"></a>2、比较三种不同形式的diff</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 对比三种不同 diff 形式</span><br><span class="hljs-meta">$</span><span class="bash"> git diff HEAD     <span class="hljs-comment"># staged &amp; unstaged</span></span><br><br>@@ -1 +1,3 @@<br>-a = 1  # 已 staged<br>+a = 2  # 已 staged<br>+b = 1  # 已 staged<br>+c = b  # 还没 add 去 stage (unstaged)<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git diff          <span class="hljs-comment"># unstaged</span></span><br><br>@@ -1,2 +1,3 @@<br> a = 2  # 注: 前面没有 +<br> b = 1  # 注: 前面没有 +<br>+c = b  # 还没 add 去 stage (unstaged)<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git diff --cached <span class="hljs-comment"># staged</span></span><br><br>@@ -1 +1,2 @@<br>-a = 1  # 已 staged<br>+a = 2  # 已 staged<br>+b = 1  # 已 staged<br></code></pre></td></tr></table></figure><h2 id="回到从前-reset"><a href="#回到从前-reset" class="headerlink" title="回到从前(reset)"></a>回到从前(reset)</h2><h3 id="1、修改已commit的版本"><a href="#1、修改已commit的版本" class="headerlink" title="1、修改已commit的版本"></a>1、修改已commit的版本</h3><p>​        有时候我们把文件<code>commit</code>到版本库之中，却发现还忘了附上另一个文件，例如我们最后一个<code>commit</code>是<code>change 2</code>，版本号<code>904e1ba</code>，那么我们的把附件也<code>commit</code>进<code>change 2</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add 2.py</span><br><span class="hljs-meta">$</span><span class="bash"> git commit --amend --no-edit   <span class="hljs-comment"># &quot;--no-edit&quot;: 不编辑, 直接合并到上一个 commit</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline    <span class="hljs-comment"># &quot;--oneline&quot;: 每个 commit 内容显示在一行</span></span><br></code></pre></td></tr></table></figure><h3 id="2、从Stage返回-reset-到add之前"><a href="#2、从Stage返回-reset-到add之前" class="headerlink" title="2、从Stage返回(reset)到add之前"></a>2、从Stage返回(reset)到add之前</h3><p>​        有时我们已经把文件<code>add</code>到<code>stage</code>之中，但是想补充一些新得内容，这时，我们得回到<code>add</code>之前。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git status -s <span class="hljs-comment"># &quot;-s&quot;: status 的缩写模式</span></span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>M  1.py     # staged<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git reset 1.py</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Unstaged changes after reset:<br>M1.py<br>-----------------------<br><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py     # unstaged<br></code></pre></td></tr></table></figure><h3 id="3、reset回到comimit之前（时光穿梭）"><a href="#3、reset回到comimit之前（时光穿梭）" class="headerlink" title="3、reset回到comimit之前（时光穿梭）"></a>3、reset回到comimit之前（时光穿梭）</h3><p>​        每个 <code>commit</code> 都有自己的 <code>id</code> 数字号, <code>HEAD</code> 是一个指针, 指引当前的状态是在哪个 <code>commit</code>. 最近的一次 <code>commit</code> 在最右边, 我们如果要回到过去, 就是让 <code>HEAD</code> 回到过去并 <code>reset</code> 此时的 <code>HEAD</code> 到过去的位置.</p><p><img src="./-1.png" alt=""></p><p><img src="./-2.png" alt=""></p><p><img src="./-3.png" alt=""></p><p><img src="./-4.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 不管我们之前有没有做了一些 add 工作, 这一步让我们回到 上一次的 commit</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD</span>    <br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>HEAD is now at 904e1ba change 2<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 看看所有的<span class="hljs-built_in">log</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 回到 c6762a1 change 1</span><br><span class="hljs-meta">#</span><span class="bash"> 方式1: <span class="hljs-string">&quot;HEAD^&quot;</span> 几个箭头就是返回几个版本</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD^</span>   <br><br><span class="hljs-meta">#</span><span class="bash"> 方式2: <span class="hljs-string">&quot;commit id&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard c6762a1</span><br><br><span class="hljs-meta">#</span><span class="bash"> 方式3: <span class="hljs-string">&quot;HEAD~&quot;</span> ~后面加数字,数字几就是几个版本</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard ~1</span><br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 看看现在的 <span class="hljs-built_in">log</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p>​        把版本库指到<code>c6762a1</code>后再用<code>log --oneline</code>查看发现之前得<code>change 2</code>没了,这是我么则需要用<code>git reflog</code>查看近期对HEAD得所有改动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reflog</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>c6762a1 HEAD@&#123;0&#125;: reset: moving to c6762a1<br>904e1ba HEAD@&#123;1&#125;: commit (amend): change 2<br>0107760 HEAD@&#123;2&#125;: commit: change 2<br>c6762a1 HEAD@&#123;3&#125;: commit: change 1<br>13be9a7 HEAD@&#123;4&#125;: commit (initial): create 1.py<br>-----------------------<br><span class="hljs-meta">#</span><span class="bash"> 重复reset步骤就能回到change2</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard 904e1ba</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><h2 id="回到从前"><a href="#回到从前" class="headerlink" title="回到从前"></a>回到从前</h2><h3 id="1、改写文件checkout"><a href="#1、改写文件checkout" class="headerlink" title="1、改写文件checkout"></a>1、改写文件checkout</h3><p>​        之前的<code>reset</code>是针对整个版本库，但是有时只想修改某一个文件，这时我们就要使用checkout语句时单个文件回到过去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br><br>---------------------<br><span class="hljs-meta">$</span><span class="bash"> git checkout c6762a1 -- 1.py</span><br><br><br>---------------------<br><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;back to change 1 and add comment for 1.py&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>47f167e back to change 1 and add comment for 1.py<br>904e1ba change 2<br>c6762a1 change 1<br>13be9a7 create 1.py<br></code></pre></td></tr></table></figure><h2 id="分支（branch）"><a href="#分支（branch）" class="headerlink" title="分支（branch）"></a>分支（branch）</h2><p>​        有时我们需要不同的版本库（如开发软件的稳定版本和测试版），git提供分支（branch）管理去满足我们的需求。</p><p><img src=".\1.svg" alt="1"></p><h3 id="1、用到的命令"><a href="#1、用到的命令" class="headerlink" title="1、用到的命令"></a>1、用到的命令</h3><p>1、<code>git log --oneline --graph</code> 用<code>--graph</code>查看分支.</p><p>2、<code>git branch dev</code> 创建分支<code>dev</code>.</p><p>3、<code>git checkout dev</code> 切换到分支dev.</p><p>4、<code>git checkout -b  dev</code>创建并切换到分支dev.</p><p>5、<code>git merge dev</code> 把分支推送到master，这个操作要在master上完成.</p><p>6、<code>git commit -am &quot;change 3 in dev&quot;</code>  简化操作先add再commit，不过要在um状态下.</p><h3 id="2、操作代码"><a href="#2、操作代码" class="headerlink" title="2、操作代码"></a>2、操作代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout -b  dev               <span class="hljs-comment">#创建和切换到新建的分支</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Switched to a new branch &#x27;dev&#x27;<br><br>--------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>* dev                                 # 这时 HEAD 已经被切换至 dev 分支<br>  master<br>  <br>--------------------------            # 修改dev中文件并提交 <br><span class="hljs-meta">$</span><span class="bash"> git commit -am <span class="hljs-string">&quot;change 3 in dev&quot;</span>    <span class="hljs-comment"># &quot;-am&quot;: add 所有改变 并直接 commit</span></span><br><br>--------------------------  <br><span class="hljs-meta">$</span><span class="bash"> git checkout master                 <span class="hljs-comment"># 切换至 master 才能把其他分支合并过来</span></span><br><span class="hljs-meta">$</span><span class="bash"> git merge --no-ff -m <span class="hljs-string">&quot;keep merge info&quot;</span> dev     <span class="hljs-comment"># 保留 merge 信息</span></span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>*   c60668f keep merge info<br>|\  <br>| * f9584f8 change 3 in dev                   # 这里就能看出, 我们建立过一个分支<br>|/  <br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p>​        <strong>注意：如果直接 <code>git merge dev</code>, git 会采用默认的 <code>Fast forward</code> 格式进行 <code>merge</code>, 这样 <code>merge</code> 的这次操作不会有 <code>commit</code> 信息. <code>log</code> 中也不会有分支的图案. 我们可以采取 <code>--no-ff</code> 这种方式保留 <code>merge</code> 的 <code>commit</code> 信息.</strong></p><h2 id="merge分支冲突"><a href="#merge分支冲突" class="headerlink" title="merge分支冲突"></a>merge分支冲突</h2><p>​        如果我们在dev中做出修改，但是master这时被修改了,我们要进行合并，该怎么办呢？这是git会报出Automatic merge failed; fix conflicts and then commit the result.的错误，我们需打开文件手动调试保存那些内容。</p><p><img src="./2.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这是 master 的 <span class="hljs-built_in">log</span></span><br>* 3d7796e change 4 in master # 这一条 commit 和 dev 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br>-----------------------------<br><span class="hljs-meta">#</span><span class="bash"> 这是 dev 的 <span class="hljs-built_in">log</span></span><br>* f7d2e3a change 3 in dev   # 这一条 commit 和 master 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br>  dev<br>* master<br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git merge dev</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Auto-merging 1.py<br>CONFLICT (content): Merge conflict in 1.py<br>Automatic merge failed; fix conflicts and then commit the result.<br><br><span class="hljs-meta">#</span><span class="bash"> 打开vscode，git已经帮我们把冲突标记出来了</span><br>a = 1<br><span class="hljs-meta">#</span><span class="bash"> I went back to change 1</span><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> master</span><br>=======<br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> dev</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br>-------------------------<br><span class="hljs-meta">#</span><span class="bash"> 手动调试并提交</span><br>a = 1<br><span class="hljs-meta">#</span><span class="bash"> I went back to change 1</span><br><span class="hljs-meta">#</span><span class="bash"> edited <span class="hljs-keyword">in</span> master and dev</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -am <span class="hljs-string">&quot;solve conflict&quot;</span></span><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>*   7810065 solve conflict<br>|\  <br>| * f7d2e3a change 3 in dev<br>* | 3d7796e change 4 in master<br>|/  <br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br></code></pre></td></tr></table></figure><h2 id="rebase分支冲突"><a href="#rebase分支冲突" class="headerlink" title="rebase分支冲突"></a>rebase分支冲突</h2><p>​        更高级的合并方式<code>rebase</code>，共享的 branch 是 <code>branch B</code>, 而我在 <code>branch A</code> 上工作, 有一天我发现<code>branch B</code>已经有一些小更新, 我也想试试我的程序和这些小更新兼不兼容, 我也我想合并, 这时就可以用 <code>rebase</code> 来补充我的分支<code>branch A</code>的内容. 补充完以后, 和后面那张图的 <code>merge</code> 不同, 我还是继续在 <code>C3</code> 上工作, 不过此时的 <code>C3</code> 的本质却不一样了, 因为吸收了那些小更新. 所以我们用 <code>C3&#39;</code> 来代替.</p><p><img src="./3.png" alt=""></p><p><img src="./4.png" alt=""></p><p><img src="./5.png" alt=""></p><p><img src="./6.png" alt=""></p><p>​        可以看出我们工作的<code>C3</code>已经不是从<code>C1</code>衍生来的，这一点和<code>merge</code>不一样，<code>merge</code>是把C3和<code>C4</code>合并成一个新的<code>C5</code>,如果是rebase，那你就把别人的共享内容给改写了。</p><p><img src="./7.png" alt=""></p><h3 id="1、错误示例把主分支基于你的分支修改"><a href="#1、错误示例把主分支基于你的分支修改" class="headerlink" title="1、错误示例把主分支基于你的分支修改"></a>1、错误示例把主分支基于你的分支修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 这是 master 的 <span class="hljs-built_in">log</span></span><br>* 3d7796e change 4 in master # 这一条 commit 和 dev 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br>-----------------------------<br><br><span class="hljs-meta">#</span><span class="bash"> 这是 dev 的 <span class="hljs-built_in">log</span></span><br>* f7d2e3a change 3 in dev   # 这一条 commit 和 master 的不一样<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br><br>-----------------------------<br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>  dev<br>* master<br>-------------------------<br><br><span class="hljs-meta">$</span><span class="bash"> git rebase dev</span> <br><span class="hljs-meta">#</span><span class="bash"> 输出  显示有conflict要手动修改</span><br>First, rewinding head to replay your work on top of it...<br>Applying: change 3 in dev<br>Using index info to reconstruct a base tree...<br>M1.py<br>Falling back to patching base and 3-way merge...<br>Auto-merging 1.py<br>CONFLICT (content): Merge conflict in 1.py<br>error: Failed to merge in the changes.<br>Patch failed at 0001 change 3 in dev<br>The copy of the patch that failed is found in: .git/rebase-apply/patch<br><br>When you have resolved this problem, run &quot;git rebase --continue&quot;.<br>If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.<br>To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.<br>-------------------------<br><br><span class="hljs-meta">$</span><span class="bash"> git add 1.py</span><br><span class="hljs-meta">$</span><span class="bash"> git rebase --<span class="hljs-built_in">continue</span></span><br>-------------------------<br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --oneline --graph</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>* c844cb1 change 4 in master    # 这条 commit 原本的id=3d7796e, 所以 master 的历史被修改<br>* f7d2e3a change 3 in dev       # rebase 过来的 dev commit<br>* 47f167e back to change 1 and add comment for 1.py<br>* 904e1ba change 2<br>* c6762a1 change 1<br>* 13be9a7 create 1.py<br></code></pre></td></tr></table></figure><p><strong>!! 注意 !!</strong> 这个例子也说明了使用 <code>rebase</code> 要万分小心, 千万不要在共享的 branch 中 <code>rebase</code>, 不然就像上面那样, 现在 <code>master</code> 的历史已经被 <code>rebase</code> 改变了. <code>master</code> 当中别人提交的 <code>change 4</code> 就被你无情地修改掉了, 所以千万不要在共享分支中使用 <code>rebase</code>.</p><h2 id="临时修改（stash）"><a href="#临时修改（stash）" class="headerlink" title="临时修改（stash）"></a>临时修改（stash）</h2><p>​        想想有天在开开心心地改进代码, 突然接到老板的一个电话说要改之前的一个程序. 怎么办? 虽然还需要很久时间才能改进完自己的代码, 可我有强迫症, 又不想把要改的程序和自己改进代码的部分一起 <code>commit</code> 了.</p><p>这时 <code>stash</code> 就是我的救星了. 用 <code>stash</code> 能先将我的那改进的部分放在一边分隔开来. 再另外单独处理老板的任务.</p><h3 id="1、临时修改代码"><a href="#1、临时修改代码" class="headerlink" title="1、临时修改代码"></a>1、临时修改代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout dev</span><br></code></pre></td></tr></table></figure><p>在 <code>dev</code> 中的 <code>1.py</code> 中加上一行 <code># feel happy</code>, 然后老板的电话来了, 可是我还没有改进完这些代码. 所以我就用 <code>stash</code> 将这些改变暂时放一边.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py<br>------------------ <br><span class="hljs-meta">$</span><span class="bash"> git stash</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>Saved working directory and index state WIP on dev: f7d2e3a change 3 in dev<br>HEAD is now at f7d2e3a change 3 in dev<br>-------------------<br><span class="hljs-meta">$</span><span class="bash"> git status</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>On branch dev<br>nothing to commit, working directory clean     # 干净得很<br></code></pre></td></tr></table></figure><p>​        然后去从<code>master</code>中建立新分支去完成老板的任务，<code>merge</code>合并到<code>master</code>后我们在转会dev.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git checkout dev</span><br><span class="hljs-meta">$</span><span class="bash"> git stash list    <span class="hljs-comment"># 查看在 stash 中的缓存</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>stash@&#123;0&#125;: WIP on dev: f7d2e3a change 3 in dev<br><span class="hljs-meta">$</span><span class="bash"> git stash pop</span><br><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br>On branch dev<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>modified:   1.py<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br>Dropped refs/stash@&#123;0&#125; (23332b7edc105a579b09b127336240a45756a91c)<br>----------------------<br><span class="hljs-meta">$</span><span class="bash"> git status -s</span><br><span class="hljs-meta">#</span><span class="bash"> 输出</span><br> M 1.py     # 和最开始一样了<br></code></pre></td></tr></table></figure><h2 id="github在线管理"><a href="#github在线管理" class="headerlink" title="github在线管理"></a>github在线管理</h2><h3 id="1、建立版本库"><a href="#1、建立版本库" class="headerlink" title="1、建立版本库"></a>1、建立版本库</h3><h3 id="2、链接本地版本库"><a href="#2、链接本地版本库" class="headerlink" title="2、链接本地版本库"></a>2、链接本地版本库</h3><h3 id="3、本地推送修改"><a href="#3、本地推送修改" class="headerlink" title="3、本地推送修改"></a>3、本地推送修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git remote add origin https://github.com/MorvanZhou/git-demo.git</span><br><span class="hljs-meta">#</span><span class="bash"> 上面https是莫烦的，链接时记得换成自己的</span><br><span class="hljs-meta">$</span><span class="bash"> git push -u origin master     <span class="hljs-comment"># 推送本地 master 去 origin</span></span><br><span class="hljs-meta">$</span><span class="bash"> git push -u origin dev        <span class="hljs-comment"># 推送本地 dev  去 origin</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-git -how use</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
